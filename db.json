{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/clientHeight.png","path":"images/clientHeight.png","modified":0,"renderable":0},{"_id":"source/images/iv.png","path":"images/iv.png","modified":0,"renderable":0},{"_id":"source/images/offsetHeight.png","path":"images/offsetHeight.png","modified":0,"renderable":0},{"_id":"source/images/scollHeight.png","path":"images/scollHeight.png","modified":0,"renderable":0},{"_id":"source/images/scrollTop.png","path":"images/scrollTop.png","modified":0,"renderable":0},{"_id":"source/images/HHKB.jpeg","path":"images/HHKB.jpeg","modified":0,"renderable":0},{"_id":"source/images/encrypt.png","path":"images/encrypt.png","modified":0,"renderable":0},{"_id":"source/images/login.png","path":"images/login.png","modified":0,"renderable":0},{"_id":"source/images/success.png","path":"images/success.png","modified":0,"renderable":0},{"_id":"source/images/weekend.jpeg","path":"images/weekend.jpeg","modified":0,"renderable":0},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/Home.svg","path":"assets/Home.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/logo.jpg","path":"avatar/logo.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/qr.png","path":"assets/qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"source/images/travis.png","path":"images/travis.png","modified":0,"renderable":0},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/avtar.jpg","path":"avatar/avtar.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/bg.jpg","path":"intro/bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1},{"_id":"source/images/dinning.png","path":"images/dinning.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1566989305195},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1566989305196},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1566989305195},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1566989305196},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1566989305196},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1566989305197},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1566989305196},{"_id":"themes/archer/_config.yml","hash":"f275ea5ba180da82a1c5a94e7bf0a6357d2b5328","modified":1608470300405},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1566989305199},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1566989305207},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1566989305236},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1566989305236},{"_id":"source/_posts/ElonAndJack.md","hash":"b656bfcf192b7a721d7e3540b80486d7f4949c3a","modified":1572437327575},{"_id":"source/_posts/HHKB.md","hash":"b30c810b0530244360d8154cd52fbf0f59694e6e","modified":1568111932632},{"_id":"source/_posts/http-cache.md","hash":"d0b62edb76af791ed778e91ebd644ddf16cb4ca0","modified":1574675058761},{"_id":"source/_posts/javascript-type-judgement.md","hash":"b9e25830eb99c8aa7a5037c59586ff812ec4724d","modified":1599116891727},{"_id":"source/_posts/jp-learn1.md","hash":"cf7c1f41a58cb4a469829753d59020cab17ba236","modified":1599116891727},{"_id":"source/_posts/JsWidthAndHeight.md","hash":"baa429170557075e736a95be9e0e0ea343c56761","modified":1568012235756},{"_id":"source/_posts/jp-learn2.md","hash":"751e0f8697380995c87c7b11f8bb5c61f38006b6","modified":1599116891727},{"_id":"source/_posts/Travis-CI持续集成Hexo到云服务器.md","hash":"59c72d8ce7a97f35733d54890ffaef57b3c232e0","modified":1567909623487},{"_id":"source/_posts/jp-learn3.md","hash":"a37695b45137c52b64a1b4cec94e18752a18e645","modified":1599116891728},{"_id":"source/_posts/canvas.md","hash":"017c34015df6fad7e9b4553a0b4424f87ef55594","modified":1571110882824},{"_id":"source/_posts/js-regexp.md","hash":"1fecab20080a843f3b90ef6e79dc9904c9ce005d","modified":1599116891728},{"_id":"source/_posts/js-image-preview.md","hash":"cef756862f1af39c785fb7db9c95a559ad092a72","modified":1569326724749},{"_id":"source/_posts/node-1.md","hash":"85c3eafdbdfeb714d48c7232492b56adc5a2db83","modified":1569293071300},{"_id":"source/_posts/nginx配置ssl.md","hash":"216571d6ebd2812a2036be368a4565ad211e014e","modified":1567909595860},{"_id":"source/_posts/useEffect-componentDidMount.md","hash":"3006f92f764bd2a0bcc3bfbdbd82b376a73683e6","modified":1608466743499},{"_id":"source/_posts/thread.md","hash":"0409625d98e4b4894bfbb8395eb82ddc439ce8ed","modified":1570681411904},{"_id":"source/_posts/sshLogin.md","hash":"fd54a7734fc1d9824fd818cf1d3e99ecdd81c0f6","modified":1567909643466},{"_id":"source/_posts/weekend.md","hash":"ad4142aaf7a06ed2cee60af4e6131de225f8f9aa","modified":1567388247401},{"_id":"source/_posts/why-git-add.md","hash":"c870ab3c1b95cbc37a56126ace750fd9bc336c3d","modified":1572428402414},{"_id":"source/_posts/新网站.md","hash":"f23ae2c0f14c6ef9d9dc224f01d9e486bc0fe0f6","modified":1567388250425},{"_id":"source/about/index.md","hash":"31da4ed509e6c46b81eeb4b109a5ec6cb16deb3d","modified":1567159452263},{"_id":"source/images/clientHeight.png","hash":"5a21a3c25d2a7365d091badad9a1ba1e744e56c6","modified":1568011238055},{"_id":"source/images/iv.png","hash":"06614226fd14f6f18c96133bfff6d3a4663c6f5f","modified":1567341098856},{"_id":"source/images/offsetHeight.png","hash":"cdd3708195bd5d239627cb102a01e59904ba22ea","modified":1568011234417},{"_id":"source/images/scollHeight.png","hash":"551e31ada5f37fcbd51ca49b6b1687b9fcb1b4b8","modified":1568011788453},{"_id":"source/images/scrollTop.png","hash":"514d96fffb254b1a785204f66e9acb37ba45087e","modified":1568012085732},{"_id":"source/tags/index.md","hash":"594f738b83fedfa653d5c96da20510c8ea8b0de4","modified":1566911678021},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1566989305197},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1566989305197},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1566989305197},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1566989305197},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1566989305199},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1566989305199},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1566989305200},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1566989305204},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1566989305204},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1566989305204},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1566989305204},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1566989305205},{"_id":"themes/archer/source/.DS_Store","hash":"930c6508268f48a80018d8abc30d3bec638b3a99","modified":1566994101548},{"_id":"source/images/HHKB.jpeg","hash":"6289b7afd3c66c9790ff04c012092c18e90028bd","modified":1568107105381},{"_id":"source/images/encrypt.png","hash":"fd22fcba73ccc1eadade3e1323e4a240beea8913","modified":1567340650980},{"_id":"source/images/login.png","hash":"c2813d57bd6a01800858baf8ee561f5b366f3837","modified":1567340645957},{"_id":"source/images/success.png","hash":"926c35dbd53f5354611b28eaf84b605f682d1698","modified":1567353433317},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1566989305195},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1566989305196},{"_id":"source/images/weekend.jpeg","hash":"e27bd6ad7cabf0957104cc143c209e8fdef5c428","modified":1567306494349},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1566989305196},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1566989305200},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1566989305200},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"3a526d495f3380faf85892e42d59a87ac19d32db","modified":1568606156153},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1566989305200},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1568949307693},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"34ea3178ad7e363297e4372bf9501d7de9f3f8be","modified":1570681575557},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1566989305201},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1566989305201},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"c5b34e7edd135f0c3970cd746263ed1679f41af4","modified":1567059592519},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1566989305202},{"_id":"themes/archer/source/assets/favicon.ico","hash":"f46fc2c74d1eca053022ce404ea79ee7b0ffb7af","modified":1567155394087},{"_id":"themes/archer/source/assets/Home.svg","hash":"6c172208dd4e5b4c997c4ea830c0f340a3d0e267","modified":1568953628631},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1566989305208},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1566989305208},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1566989305209},{"_id":"themes/archer/source/avatar/logo.jpg","hash":"38450b286f7ec1a526fec5e557f58106e127eec9","modified":1567155568021},{"_id":"themes/archer/source/assets/qr.png","hash":"cfe2c27eeee47b5b25072167b19b56dd5f0134f3","modified":1566991188244},{"_id":"themes/archer/source/css/style.css","hash":"c5c4148e5041afafd1fabdebd80d156379e7b7a6","modified":1568606432330},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1566989305211},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1566989305211},{"_id":"themes/archer/source/intro/.DS_Store","hash":"f2e2b1d02471a3df83adf04897c9afdb9b1d49b5","modified":1566994101546},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1566989305221},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1566989305221},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1566989305222},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1566989305225},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1566989305224},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1566989305223},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1566989305225},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1566989305226},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1566989305225},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1566989305226},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1566989305227},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1566989305226},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1566989305227},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1566989305227},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1566989305228},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1566989305228},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1566989305228},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1566989305228},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1566989305229},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1566989305229},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1566989305235},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1566989305235},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1566989305235},{"_id":"source/images/travis.png","hash":"52333b84a76abf24152585bf0045b279ef3e0f35","modified":1567337141690},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566989305201},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1566989305211},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1566989305212},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1566989305213},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1566989305214},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1566989305220},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1566989305207},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1566989305201},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1566989305201},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1566989305201},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1566989305202},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1566989305202},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1566989305202},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1566989305202},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1566989305203},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"bbad4bf73858f50e99eb678d966cd6ee1d534408","modified":1566992802836},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1566989305203},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1566989305203},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1566989305203},{"_id":"themes/archer/source/avatar/avtar.jpg","hash":"8d693792ba6e95b9eeefcfd62cb30e4ad91af519","modified":1566993846251},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1566989305230},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1566989305229},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1566989305232},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1566989305230},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1566989305199},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1566989305216},{"_id":"themes/archer/source/intro/bg.jpg","hash":"f028bd23507f9ef5d3aa2aec1913fccfa4e674d9","modified":1566993760559},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1566989305220},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1566989305230},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1566989305230},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1566989305231},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1566989305231},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1566989305231},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1566989305233},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1566989305232},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1566989305234},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1566989305233},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1566989305234},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1566989305218},{"_id":"source/images/dinning.png","hash":"ae6b44e2800573452a21638d54f23b0507d0811a","modified":1570681225724},{"_id":"public/content.json","hash":"172b7d3b11b819f4b2835fb672497f109daf056a","modified":1635175442941},{"_id":"public/tags/index.html","hash":"b93ad057f1bb4a24525fd831bee941e1c1da8040","modified":1635175443661},{"_id":"public/about/index.html","hash":"214d344308347ff6e910bde7d579f12e1d348479","modified":1635175443661},{"_id":"public/2020/09/03/useEffect-componentDidMount/index.html","hash":"fb63bfcc43b2e6157c14f1b82e5344587307538b","modified":1635175443661},{"_id":"public/2020/08/04/jp-learn3/index.html","hash":"055a98ec7a094cb1fb826eea9125907d179509c2","modified":1635175443661},{"_id":"public/2020/07/12/jp-learn2/index.html","hash":"31fdfa7f2d487d010c6f75353f8c3747d17ebae4","modified":1635175443661},{"_id":"public/2020/07/10/js-regexp/index.html","hash":"51309976f6cedd9249eecd42927e3ebc98aacb3b","modified":1635175443661},{"_id":"public/2020/06/29/jp-learn1/index.html","hash":"7ab820b9357b56622a919243f7042010cc6d3d42","modified":1635175443661},{"_id":"public/2020/05/01/javascript-type-judgement/index.html","hash":"f938ee6323194a7f4c87282279dac44591b35935","modified":1635175443661},{"_id":"public/2019/11/25/http-cache/index.html","hash":"da2cf07d0fe22e1a1febeb7672db36f83a9ebe11","modified":1635175443662},{"_id":"public/2019/10/21/why-git-add/index.html","hash":"8a223a23647a352bb8b8e3d7dc6c840038a477b7","modified":1635175443662},{"_id":"public/2019/10/15/canvas/index.html","hash":"6d023beba26d21b69713ac307bd7bad0354a4acb","modified":1635175443662},{"_id":"public/2019/10/10/thread/index.html","hash":"19b719c878ba8f9fb783821cd792ed605adb747d","modified":1635175443662},{"_id":"public/2019/09/24/js-image-preview/index.html","hash":"2a789ccb2b73ef89a52ac2a3dbb6b038d9829ad0","modified":1635175443662},{"_id":"public/2019/09/10/HHKB/index.html","hash":"b9427d32e4b0fd06807506195559bdfcaa7a3c95","modified":1635175443662},{"_id":"public/2019/09/09/JsWidthAndHeight/index.html","hash":"eee8b1a7e0217281d82da74af783bebe57e7c138","modified":1635175443662},{"_id":"public/2019/09/07/ElonAndJack/index.html","hash":"4732541947f068ef780cef76169792974c7a800e","modified":1635175443663},{"_id":"public/2019/09/03/sshLogin/index.html","hash":"de4aa512de1cbbc2ddd5ff933015f023c33a8512","modified":1635175443663},{"_id":"public/2019/09/01/Travis-CI持续集成Hexo到云服务器/index.html","hash":"a166e3adc9ee6909932d39550923134d8e83a5c4","modified":1635175443663},{"_id":"public/2019/09/01/weekend/index.html","hash":"e781e9f867441ef74f7b5c4fa6323a4a7883e3b1","modified":1635175443663},{"_id":"public/2019/08/31/node-1/index.html","hash":"cde1163309d393e6d023aa9de058d39a3c56f695","modified":1635175443663},{"_id":"public/2019/08/31/nginx配置ssl/index.html","hash":"13ac1ea517965eb719dce7072b05c2cd1e49efb7","modified":1635175443663},{"_id":"public/2019/08/30/新网站/index.html","hash":"c51ed46c160dc262549ae4b285d70c44d1eb975d","modified":1635175443664},{"_id":"public/categories/daily/index.html","hash":"9f81ca63d97a10e0cec8493d2dedfa737a21f3d7","modified":1635175443664},{"_id":"public/categories/HTTP/index.html","hash":"e2b1fedf551ca59c21c4648477da56dd67dcbe18","modified":1635175443664},{"_id":"public/categories/javascript/index.html","hash":"aa29811b163f15241aa0166d5f2019d813063ff3","modified":1635175443664},{"_id":"public/categories/日语/index.html","hash":"2393aa9eebd5232b2c37fa5f8c2bff93fcfb5899","modified":1635175443664},{"_id":"public/categories/devOps/index.html","hash":"72ed6f1240c93b62b880570c6e756dac4e8ca3ae","modified":1635175443664},{"_id":"public/categories/JavaScript/index.html","hash":"700f3eb42c47b88a5625be5142cae3841fcbdf22","modified":1635175443664},{"_id":"public/categories/WebGL/index.html","hash":"762bd757e8ea8ae8350ce94aa42bf305295deeb6","modified":1635175443664},{"_id":"public/categories/OS/index.html","hash":"9674782f2f1f65faf853a953e4a32904604709db","modified":1635175443664},{"_id":"public/categories/React/index.html","hash":"d73b3b020c7644628be415f1d4739e8f57c71fd1","modified":1635175443664},{"_id":"public/categories/NODE/index.html","hash":"295d7d3ac3b5a1e7ae11a24a73ee389f9158b064","modified":1635175443664},{"_id":"public/categories/React/Hooks/index.html","hash":"d73b3b020c7644628be415f1d4739e8f57c71fd1","modified":1635175443664},{"_id":"public/index.html","hash":"843e1497bc9d9ed08e47785821e8b8a83e335d84","modified":1635175443664},{"_id":"public/categories/Git/index.html","hash":"9ae09334a63e7215f9392e27652a0ca4f19ab17b","modified":1635175443664},{"_id":"public/tags/日常/index.html","hash":"ed66b1e0c113384996c3f5eec674fa7d7b99cdb1","modified":1635175443664},{"_id":"public/page/2/index.html","hash":"4707da323d7cf8e7d62b932e9d6dd05742a13e26","modified":1635175443664},{"_id":"public/tags/思考/index.html","hash":"cc52598c5e683fee87674511fda2502c8d293214","modified":1635175443664},{"_id":"public/tags/HHKB/index.html","hash":"4114bf66706fd96001b009a13012b8e7b700b9d8","modified":1635175443664},{"_id":"public/tags/keyboard/index.html","hash":"4114bf66706fd96001b009a13012b8e7b700b9d8","modified":1635175443665},{"_id":"public/tags/expires/index.html","hash":"e2b1fedf551ca59c21c4648477da56dd67dcbe18","modified":1635175443665},{"_id":"public/tags/cache/index.html","hash":"e2b1fedf551ca59c21c4648477da56dd67dcbe18","modified":1635175443665},{"_id":"public/tags/cache-control/index.html","hash":"e2b1fedf551ca59c21c4648477da56dd67dcbe18","modified":1635175443665},{"_id":"public/tags/last-modified/index.html","hash":"e2b1fedf551ca59c21c4648477da56dd67dcbe18","modified":1635175443665},{"_id":"public/tags/etag/index.html","hash":"e2b1fedf551ca59c21c4648477da56dd67dcbe18","modified":1635175443665},{"_id":"public/tags/不懂就问/index.html","hash":"96dc91c772a9307fe1e320c7fe9f2c5fbf3a0d44","modified":1635175443665},{"_id":"public/tags/javascript/index.html","hash":"aa29811b163f15241aa0166d5f2019d813063ff3","modified":1635175443665},{"_id":"public/tags/日语/index.html","hash":"2393aa9eebd5232b2c37fa5f8c2bff93fcfb5899","modified":1635175443665},{"_id":"public/tags/半浊音/index.html","hash":"b2def284a6064269965ddf79927e1b1c67fe7f1c","modified":1635175443665},{"_id":"public/tags/浊音/index.html","hash":"b2def284a6064269965ddf79927e1b1c67fe7f1c","modified":1635175443665},{"_id":"public/tags/scorllTop/index.html","hash":"a2d32a62729f3b11cce603daaddaee1b8f576ca5","modified":1635175443665},{"_id":"public/tags/height/index.html","hash":"a2d32a62729f3b11cce603daaddaee1b8f576ca5","modified":1635175443665},{"_id":"public/tags/width/index.html","hash":"a2d32a62729f3b11cce603daaddaee1b8f576ca5","modified":1635175443665},{"_id":"public/tags/数字/index.html","hash":"5662f595727b641ee568c5bf7b2bd20085be082f","modified":1635175443665},{"_id":"public/tags/travis/index.html","hash":"5ff02ea76402b96e3260e5e8c889f8a35adea96e","modified":1635175443665},{"_id":"public/tags/CI/index.html","hash":"5ff02ea76402b96e3260e5e8c889f8a35adea96e","modified":1635175443666},{"_id":"public/tags/hexo/index.html","hash":"5ff02ea76402b96e3260e5e8c889f8a35adea96e","modified":1635175443666},{"_id":"public/tags/状态/index.html","hash":"82abb122ee4adaa6012de2f2a5b4df628841fddc","modified":1635175443666},{"_id":"public/tags/gem/index.html","hash":"5ff02ea76402b96e3260e5e8c889f8a35adea96e","modified":1635175443666},{"_id":"public/tags/WebGL/index.html","hash":"762bd757e8ea8ae8350ce94aa42bf305295deeb6","modified":1635175443666},{"_id":"public/tags/Canvas/index.html","hash":"762bd757e8ea8ae8350ce94aa42bf305295deeb6","modified":1635175443666},{"_id":"public/tags/JavaScript/index.html","hash":"a487beec92431612f6ed5a9c8311fbeaef78efd3","modified":1635175443666},{"_id":"public/tags/正则/index.html","hash":"a487beec92431612f6ed5a9c8311fbeaef78efd3","modified":1635175443666},{"_id":"public/tags/JS/index.html","hash":"d7ce86d981f5cf5ce1fad95d0e09cd12eb1bf03d","modified":1635175443666},{"_id":"public/tags/File/index.html","hash":"20392f94ff9fb10f9dda87c84909cee5579ea27f","modified":1635175443666},{"_id":"public/tags/HTML5/index.html","hash":"20392f94ff9fb10f9dda87c84909cee5579ea27f","modified":1635175443666},{"_id":"public/tags/NODE/index.html","hash":"295d7d3ac3b5a1e7ae11a24a73ee389f9158b064","modified":1635175443666},{"_id":"public/tags/nginx/index.html","hash":"0bb9e13de4f1a64b588c1dc7dc82a8e2d29b75a9","modified":1635175443666},{"_id":"public/tags/ssl/index.html","hash":"0bb9e13de4f1a64b588c1dc7dc82a8e2d29b75a9","modified":1635175443666},{"_id":"public/tags/Https/index.html","hash":"57d90cb9605b4f2bd3b9961f77da9388db539030","modified":1635175443666},{"_id":"public/tags/thread/index.html","hash":"9674782f2f1f65faf853a953e4a32904604709db","modified":1635175443666},{"_id":"public/tags/linux/index.html","hash":"9674782f2f1f65faf853a953e4a32904604709db","modified":1635175443667},{"_id":"public/tags/OS/index.html","hash":"9674782f2f1f65faf853a953e4a32904604709db","modified":1635175443667},{"_id":"public/tags/useEffect/index.html","hash":"d73b3b020c7644628be415f1d4739e8f57c71fd1","modified":1635175443667},{"_id":"public/tags/capturing/index.html","hash":"d73b3b020c7644628be415f1d4739e8f57c71fd1","modified":1635175443667},{"_id":"public/tags/react-hooks/index.html","hash":"d73b3b020c7644628be415f1d4739e8f57c71fd1","modified":1635175443667},{"_id":"public/tags/白话/index.html","hash":"a8c597b2f7e38319aecd7e09c5a818543446b65d","modified":1635175443667},{"_id":"public/tags/暂存区/index.html","hash":"9ae09334a63e7215f9392e27652a0ca4f19ab17b","modified":1635175443667},{"_id":"public/tags/git-add/index.html","hash":"9ae09334a63e7215f9392e27652a0ca4f19ab17b","modified":1635175443667},{"_id":"public/tags/git-commit/index.html","hash":"9ae09334a63e7215f9392e27652a0ca4f19ab17b","modified":1635175443667},{"_id":"public/tags/SSH/index.html","hash":"1afe42e687b7c6393e86ecef829c5804f9a9fcf1","modified":1635175443667},{"_id":"public/tags/SSL/index.html","hash":"1afe42e687b7c6393e86ecef829c5804f9a9fcf1","modified":1635175443667},{"_id":"public/tags/encrypt/index.html","hash":"1afe42e687b7c6393e86ecef829c5804f9a9fcf1","modified":1635175443667},{"_id":"public/archives/index.html","hash":"99a23b6c09773f31135259ba15bb80766105384f","modified":1635175443667},{"_id":"public/archives/page/2/index.html","hash":"4456938920148826e75f97c0ca8c3e14e637fd60","modified":1635175443667},{"_id":"public/archives/2019/index.html","hash":"c4ae57bad497b35bd941686975a05404d85391bb","modified":1635175443667},{"_id":"public/archives/2019/page/2/index.html","hash":"171fc009b6e75c8ad5688fde386471d584f3d0a7","modified":1635175443668},{"_id":"public/archives/2019/08/index.html","hash":"4607a4a2627089609431065c012d20793730a15f","modified":1635175443668},{"_id":"public/archives/2019/09/index.html","hash":"59f2e3f8391591941304784e5889b54bbb17510e","modified":1635175443668},{"_id":"public/archives/2019/10/index.html","hash":"988b946a96df8af8eaa943a12dd1f72b8ad0a85b","modified":1635175443668},{"_id":"public/archives/2019/11/index.html","hash":"e2b1fedf551ca59c21c4648477da56dd67dcbe18","modified":1635175443668},{"_id":"public/archives/2020/index.html","hash":"780110d39b20c428866987fbd3ff407f3df041fa","modified":1635175443668},{"_id":"public/archives/2020/05/index.html","hash":"aa29811b163f15241aa0166d5f2019d813063ff3","modified":1635175443668},{"_id":"public/archives/2020/06/index.html","hash":"b2def284a6064269965ddf79927e1b1c67fe7f1c","modified":1635175443668},{"_id":"public/archives/2020/07/index.html","hash":"4aa36b6c4dc400a8df3d2a5e37103bfcef7aacdc","modified":1635175443668},{"_id":"public/archives/2020/09/index.html","hash":"d73b3b020c7644628be415f1d4739e8f57c71fd1","modified":1635175443674},{"_id":"public/archives/2020/08/index.html","hash":"82abb122ee4adaa6012de2f2a5b4df628841fddc","modified":1635175443674}],"Category":[{"name":"daily","_id":"ckemh0dko000280oxw1fqa3d3"},{"name":"HTTP","_id":"ckemh0dkz000b80ox2lurn1nv"},{"name":"javascript","_id":"ckemh0dl5000j80oxboaf5ksf"},{"name":"日语","_id":"ckemh0dl8000o80oxxfrdh0iu"},{"name":"JavaScript","_id":"ckemh0dlc000v80oxicwxi24x"},{"name":"devOps","_id":"ckemh0dlh001380oxwbafuv9o"},{"name":"WebGL","_id":"ckemh0dlj001980oxb0kw7l7a"},{"name":"NODE","_id":"ckemh0dlm001l80oxsm8u1hpa"},{"name":"OS","_id":"ckemh0dlo001v80ox03alwfdd"},{"name":"React","_id":"ckemh0dlp002080oxw0fiytql"},{"name":"Hooks","parent":"ckemh0dlp002080oxw0fiytql","_id":"ckemh0dlv002580ox1q4rypsa"},{"name":"Git","_id":"ckemh0dmn004280oxym9n5l0a"}],"Data":[],"Page":[{"title":"tags","date":"2019-08-27T13:13:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-27 21:13:30\ntype: \"tags\"\n---\n","updated":"2019-08-27T13:14:38.021Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckemh0dmj003x80oxvziiwmp5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"I'm Cooper","date":"2019-08-29T06:58:14.000Z","layout":"about","_content":"\n> 在我一生的黄金时代，我有好多奢望。\n> 我想爱，想吃，还想在一瞬间变成天上半明半暗的云。\n> 后来我才知道，生活就是个缓慢受锤的过程。\n> 人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。\n> 我希望自己会永远生猛下去，什么也锤不了我。 \n\n## 靓仔\n<img src=\"https://github.com/huguobo/public/blob/master/avtar.jpg?raw=true\" width=\"25%\" style=\"margin: 0\">\n\n## 基本信息\n- 男\n- 性格开朗\n- 1992 年生人\n\n## 学习生涯\n- 吉林大学\n- 软件工程\n- 硕士\n\n## 职业信息\n- 前端工程师(全干工程师)\n\n### 工作经历\n- 2017.7 ~ 2019.7 [美团点评](https://about.meituan.com/home) \n- 2019.8 ~ 至今 [腾讯科技](https://www.tencent.com/zh-cn/index.html)\n\n### 技能（别问，问就是‘熟悉’）\n- Javascript、Css 和 HTML 基础3件套\n- 基于 React、Vue 等的流行前端框架\n- webpack、gulp 等前端工程化工具\n- 前端 CI/CD 流程，基础 devOps\n- Node\n- Koa、Express 等 node 前端框架\n- Mysql curd\n- git、shell、nginx 等基础工具\n\n## 状态\n- 在职\n- 身体还算健康\n- 心理非常健康\n- 价值观很正\n\n## 爱好\n- 主机游戏\n- 旅行\n- 🏀\n- 发呆\n\n## 其他\n- 小语种学习中\n\n","source":"about/index.md","raw":"---\ntitle: I'm Cooper\ndate: 2019-08-29 14:58:14\nlayout: about\n---\n\n> 在我一生的黄金时代，我有好多奢望。\n> 我想爱，想吃，还想在一瞬间变成天上半明半暗的云。\n> 后来我才知道，生活就是个缓慢受锤的过程。\n> 人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。\n> 我希望自己会永远生猛下去，什么也锤不了我。 \n\n## 靓仔\n<img src=\"https://github.com/huguobo/public/blob/master/avtar.jpg?raw=true\" width=\"25%\" style=\"margin: 0\">\n\n## 基本信息\n- 男\n- 性格开朗\n- 1992 年生人\n\n## 学习生涯\n- 吉林大学\n- 软件工程\n- 硕士\n\n## 职业信息\n- 前端工程师(全干工程师)\n\n### 工作经历\n- 2017.7 ~ 2019.7 [美团点评](https://about.meituan.com/home) \n- 2019.8 ~ 至今 [腾讯科技](https://www.tencent.com/zh-cn/index.html)\n\n### 技能（别问，问就是‘熟悉’）\n- Javascript、Css 和 HTML 基础3件套\n- 基于 React、Vue 等的流行前端框架\n- webpack、gulp 等前端工程化工具\n- 前端 CI/CD 流程，基础 devOps\n- Node\n- Koa、Express 等 node 前端框架\n- Mysql curd\n- git、shell、nginx 等基础工具\n\n## 状态\n- 在职\n- 身体还算健康\n- 心理非常健康\n- 价值观很正\n\n## 爱好\n- 主机游戏\n- 旅行\n- 🏀\n- 发呆\n\n## 其他\n- 小语种学习中\n\n","updated":"2019-08-30T10:04:12.263Z","path":"about/index.html","comments":1,"_id":"ckemh0dmk003z80oxeb4rbazd","content":"<blockquote>\n<p>在我一生的黄金时代，我有好多奢望。<br>我想爱，想吃，还想在一瞬间变成天上半明半暗的云。<br>后来我才知道，生活就是个缓慢受锤的过程。<br>人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。<br>我希望自己会永远生猛下去，什么也锤不了我。 </p>\n</blockquote>\n<h2 id=\"靓仔\"><a href=\"#靓仔\" class=\"headerlink\" title=\"靓仔\"></a>靓仔</h2><img src=\"https://github.com/huguobo/public/blob/master/avtar.jpg?raw=true\" width=\"25%\" style=\"margin: 0\">\n\n<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><ul>\n<li>男</li>\n<li>性格开朗</li>\n<li>1992 年生人</li>\n</ul>\n<h2 id=\"学习生涯\"><a href=\"#学习生涯\" class=\"headerlink\" title=\"学习生涯\"></a>学习生涯</h2><ul>\n<li>吉林大学</li>\n<li>软件工程</li>\n<li>硕士</li>\n</ul>\n<h2 id=\"职业信息\"><a href=\"#职业信息\" class=\"headerlink\" title=\"职业信息\"></a>职业信息</h2><ul>\n<li>前端工程师(全干工程师)</li>\n</ul>\n<h3 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h3><ul>\n<li>2017.7 ~ 2019.7 <a href=\"https://about.meituan.com/home\" target=\"_blank\" rel=\"noopener\">美团点评</a> </li>\n<li>2019.8 ~ 至今 <a href=\"https://www.tencent.com/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">腾讯科技</a></li>\n</ul>\n<h3 id=\"技能（别问，问就是‘熟悉’）\"><a href=\"#技能（别问，问就是‘熟悉’）\" class=\"headerlink\" title=\"技能（别问，问就是‘熟悉’）\"></a>技能（别问，问就是‘熟悉’）</h3><ul>\n<li>Javascript、Css 和 HTML 基础3件套</li>\n<li>基于 React、Vue 等的流行前端框架</li>\n<li>webpack、gulp 等前端工程化工具</li>\n<li>前端 CI/CD 流程，基础 devOps</li>\n<li>Node</li>\n<li>Koa、Express 等 node 前端框架</li>\n<li>Mysql curd</li>\n<li>git、shell、nginx 等基础工具</li>\n</ul>\n<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><ul>\n<li>在职</li>\n<li>身体还算健康</li>\n<li>心理非常健康</li>\n<li>价值观很正</li>\n</ul>\n<h2 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h2><ul>\n<li>主机游戏</li>\n<li>旅行</li>\n<li>🏀</li>\n<li>发呆</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>小语种学习中</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在我一生的黄金时代，我有好多奢望。<br>我想爱，想吃，还想在一瞬间变成天上半明半暗的云。<br>后来我才知道，生活就是个缓慢受锤的过程。<br>人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。<br>我希望自己会永远生猛下去，什么也锤不了我。 </p>\n</blockquote>\n<h2 id=\"靓仔\"><a href=\"#靓仔\" class=\"headerlink\" title=\"靓仔\"></a>靓仔</h2><img src=\"https://github.com/huguobo/public/blob/master/avtar.jpg?raw=true\" width=\"25%\" style=\"margin: 0\">\n\n<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><ul>\n<li>男</li>\n<li>性格开朗</li>\n<li>1992 年生人</li>\n</ul>\n<h2 id=\"学习生涯\"><a href=\"#学习生涯\" class=\"headerlink\" title=\"学习生涯\"></a>学习生涯</h2><ul>\n<li>吉林大学</li>\n<li>软件工程</li>\n<li>硕士</li>\n</ul>\n<h2 id=\"职业信息\"><a href=\"#职业信息\" class=\"headerlink\" title=\"职业信息\"></a>职业信息</h2><ul>\n<li>前端工程师(全干工程师)</li>\n</ul>\n<h3 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h3><ul>\n<li>2017.7 ~ 2019.7 <a href=\"https://about.meituan.com/home\" target=\"_blank\" rel=\"noopener\">美团点评</a> </li>\n<li>2019.8 ~ 至今 <a href=\"https://www.tencent.com/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">腾讯科技</a></li>\n</ul>\n<h3 id=\"技能（别问，问就是‘熟悉’）\"><a href=\"#技能（别问，问就是‘熟悉’）\" class=\"headerlink\" title=\"技能（别问，问就是‘熟悉’）\"></a>技能（别问，问就是‘熟悉’）</h3><ul>\n<li>Javascript、Css 和 HTML 基础3件套</li>\n<li>基于 React、Vue 等的流行前端框架</li>\n<li>webpack、gulp 等前端工程化工具</li>\n<li>前端 CI/CD 流程，基础 devOps</li>\n<li>Node</li>\n<li>Koa、Express 等 node 前端框架</li>\n<li>Mysql curd</li>\n<li>git、shell、nginx 等基础工具</li>\n</ul>\n<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><ul>\n<li>在职</li>\n<li>身体还算健康</li>\n<li>心理非常健康</li>\n<li>价值观很正</li>\n</ul>\n<h2 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h2><ul>\n<li>主机游戏</li>\n<li>旅行</li>\n<li>🏀</li>\n<li>发呆</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>小语种学习中</li>\n</ul>\n"}],"Post":[{"title":"关于双马谈话的感悟","date":"2019-09-07T13:53:38.000Z","_content":"\n刚看完双马对话的视频。\n马云跟马斯克的观点是基于未来跟现在、是唯心与唯物、是中国的中庸文化跟西方科学严谨的碰撞。\n每个人都是特定时代及环境的产物，就算牛如马云及马斯克也不例外。\n但是elon的一句话让我更为印象深刻，不以营利为目的的火星探索也印证了这句话的真正含义。 \n> 预测未来最好的方法是创造未来","source":"_posts/ElonAndJack.md","raw":"---\ntitle: 关于双马谈话的感悟\ndate: 2019-09-07 21:53:38\ncategories: \n- daily\ntags:\n- 日常\n- 思考\n---\n\n刚看完双马对话的视频。\n马云跟马斯克的观点是基于未来跟现在、是唯心与唯物、是中国的中庸文化跟西方科学严谨的碰撞。\n每个人都是特定时代及环境的产物，就算牛如马云及马斯克也不例外。\n但是elon的一句话让我更为印象深刻，不以营利为目的的火星探索也印证了这句话的真正含义。 \n> 预测未来最好的方法是创造未来","slug":"ElonAndJack","published":1,"updated":"2019-10-30T12:08:47.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dkh000080oxck1krcuz","content":"<p>刚看完双马对话的视频。<br>马云跟马斯克的观点是基于未来跟现在、是唯心与唯物、是中国的中庸文化跟西方科学严谨的碰撞。<br>每个人都是特定时代及环境的产物，就算牛如马云及马斯克也不例外。<br>但是elon的一句话让我更为印象深刻，不以营利为目的的火星探索也印证了这句话的真正含义。 </p>\n<blockquote>\n<p>预测未来最好的方法是创造未来</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>刚看完双马对话的视频。<br>马云跟马斯克的观点是基于未来跟现在、是唯心与唯物、是中国的中庸文化跟西方科学严谨的碰撞。<br>每个人都是特定时代及环境的产物，就算牛如马云及马斯克也不例外。<br>但是elon的一句话让我更为印象深刻，不以营利为目的的火星探索也印证了这句话的真正含义。 </p>\n<blockquote>\n<p>预测未来最好的方法是创造未来</p>\n</blockquote>\n"},{"title":"HHKB键盘","date":"2019-09-10T09:15:39.000Z","_content":"\n> 美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。\n\n我表示你说的有道理，开箱颜值还算可以，但我表示肉疼，还不是很习惯。。。\n![HHKB](/../images/HHKB.jpeg)\n\n\n","source":"_posts/HHKB.md","raw":"---\ntitle: HHKB键盘\ndate: 2019-09-10 17:15:39\ncategories: \n- daily\ntags:\n- HHKB\n- keyboard\n---\n\n> 美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。\n\n我表示你说的有道理，开箱颜值还算可以，但我表示肉疼，还不是很习惯。。。\n![HHKB](/../images/HHKB.jpeg)\n\n\n","slug":"HHKB","published":1,"updated":"2019-09-10T10:38:52.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dkl000180ox3227jai3","content":"<blockquote>\n<p>美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。</p>\n</blockquote>\n<p>我表示你说的有道理，开箱颜值还算可以，但我表示肉疼，还不是很习惯。。。<br><img src=\"/../images/HHKB.jpeg\" alt=\"HHKB\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。</p>\n</blockquote>\n<p>我表示你说的有道理，开箱颜值还算可以，但我表示肉疼，还不是很习惯。。。<br><img src=\"/../images/HHKB.jpeg\" alt=\"HHKB\"></p>\n"},{"title":"不懂就问系列-浏览器里到底有多少种缓存机制","date":"2019-11-25T09:07:44.000Z","_content":"\n> 对于Web应用来说，对于网络的的依赖性很公安，性能瓶颈一般都在于如果减少IO消耗，这时候一般都会想起使用缓存，但是听说过 cache-control，expires 还有 Etag等名词的缓存策略，他们又分别代表什么呢，抓紧时间总结一下\n\n可以为强缓存和协商缓存，优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。\n\n## 强缓存机制\n关键词： `Cache-Control` 和 `Expires`\n\n### Expires\n当服务器返回响应时，在 Response Headers 中将过期时间写入 expires 字段。\n```\nexpires: Mon, 11 Nov 2019 16:13:18 GMT\n```\n可以看到expires的值为一个时间戳，如果接下来的请求早于这个时间，浏览器不会再次跟服务器请求而是直接从缓存中返回，返回状态码是 200。\n\n但是由于expires涉及本地时间设置不同问题，可能造成机制的不准确。\n\n### Cache-Control\n因此 cache-control 就出现了\n```\ncache-control: max-age=31536000\n```\ncache-control的max-age使用一个相对时间（单位：秒）控制资源的有效期，它表示在收到该资源 31536000 秒内，会使用本地的强缓策略。\n\n### no-store与no-cache\nno-cache 忽视了浏览器：为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期，走到协商缓存的阶段。\n\nno-store 全部忽视，不适用任何缓存策略，每次都是重新请求。\n\n\n## 协商缓存\n协商缓存依赖于服务端与浏览器之间的通信。\n关键词： `Last-Modified` 和 `Etag`\n\n### Last-Modified\nLast-Modified的值为一个时间戳，会随着 Response Header 返回：\n```\nLast-Modified: Mon, 11 Nov 2019 16:13:18 GMT\n```\n之后的每次请求，Request Header  会带上一个 `If-Modified-Since` 的Header，他的值是上一次 response 返回的 last-modified 的值。\n```\nIf-Modified-Since: Mon, 11 Nov 2019 16:13:18 GMT\n```\n\n这样服务端可以对比时间和服务器上的最后修改时间是否一致，来决定是否需要重新返回资源，如果未更新，直接返回304，此时的返回头中也不会有 last-modified 字段。如果更新正常返回并更新返回last-modified 的值。\n\n这样一来就实现了协商缓存，但是使用时间戳还是会有一些问题，因为如果编辑了文件但是没有实际内容的更改，last-modified会更新，但是其实文件酶标幺和从新请求，所以我们需要一个能表明文件是否真实更新的字段，类似与内容摘要的东西。\n\n### Etag\n\nEtag 和 Last-Modified 类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，它可以是这样的：\n```\nETag: W/\"2s3s-2602480f239\"\n```\n\n那么下一次请求时，请求头里就会带上一个值相同的、名为 if-None-Match 的字符串供服务端比对了：\n```\nIf-None-Match: W/\"2s3s-2602480f239\"\n```\n但是 Etag 的生成需要额外的开销，会在一定程度上影响服务端的性能。所以Etag不能完全代替Last-Modified。\n\n## Memory Cache 和 Disk Cache\n\n从 network调试中发现命中浏览器缓存的资源有的是 from memory cache，有的是 from disk cache，甚至还有 from service worker.\n\n### memory cache\n指的是在内存中的缓存，读取速度应该是最快的，优先级也是最高的。\n\n### disk cache\n磁盘内存\n\n### service worker\n我们借助 Service worker 实现的离线缓存就称为 Service Worker Cache。需要注意的是 Server Worker 对协议是有要求的，必须以 https 协议为前提。\n","source":"_posts/http-cache.md","raw":"---\ntitle: 不懂就问系列-浏览器里到底有多少种缓存机制\ndate: 2019-11-25 17:07:44\ncategories: \n- HTTP\ntags:\n- cache\n- expires\n- cache-control\n- last-modified\n- etag\n- 不懂就问\n---\n\n> 对于Web应用来说，对于网络的的依赖性很公安，性能瓶颈一般都在于如果减少IO消耗，这时候一般都会想起使用缓存，但是听说过 cache-control，expires 还有 Etag等名词的缓存策略，他们又分别代表什么呢，抓紧时间总结一下\n\n可以为强缓存和协商缓存，优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。\n\n## 强缓存机制\n关键词： `Cache-Control` 和 `Expires`\n\n### Expires\n当服务器返回响应时，在 Response Headers 中将过期时间写入 expires 字段。\n```\nexpires: Mon, 11 Nov 2019 16:13:18 GMT\n```\n可以看到expires的值为一个时间戳，如果接下来的请求早于这个时间，浏览器不会再次跟服务器请求而是直接从缓存中返回，返回状态码是 200。\n\n但是由于expires涉及本地时间设置不同问题，可能造成机制的不准确。\n\n### Cache-Control\n因此 cache-control 就出现了\n```\ncache-control: max-age=31536000\n```\ncache-control的max-age使用一个相对时间（单位：秒）控制资源的有效期，它表示在收到该资源 31536000 秒内，会使用本地的强缓策略。\n\n### no-store与no-cache\nno-cache 忽视了浏览器：为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期，走到协商缓存的阶段。\n\nno-store 全部忽视，不适用任何缓存策略，每次都是重新请求。\n\n\n## 协商缓存\n协商缓存依赖于服务端与浏览器之间的通信。\n关键词： `Last-Modified` 和 `Etag`\n\n### Last-Modified\nLast-Modified的值为一个时间戳，会随着 Response Header 返回：\n```\nLast-Modified: Mon, 11 Nov 2019 16:13:18 GMT\n```\n之后的每次请求，Request Header  会带上一个 `If-Modified-Since` 的Header，他的值是上一次 response 返回的 last-modified 的值。\n```\nIf-Modified-Since: Mon, 11 Nov 2019 16:13:18 GMT\n```\n\n这样服务端可以对比时间和服务器上的最后修改时间是否一致，来决定是否需要重新返回资源，如果未更新，直接返回304，此时的返回头中也不会有 last-modified 字段。如果更新正常返回并更新返回last-modified 的值。\n\n这样一来就实现了协商缓存，但是使用时间戳还是会有一些问题，因为如果编辑了文件但是没有实际内容的更改，last-modified会更新，但是其实文件酶标幺和从新请求，所以我们需要一个能表明文件是否真实更新的字段，类似与内容摘要的东西。\n\n### Etag\n\nEtag 和 Last-Modified 类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，它可以是这样的：\n```\nETag: W/\"2s3s-2602480f239\"\n```\n\n那么下一次请求时，请求头里就会带上一个值相同的、名为 if-None-Match 的字符串供服务端比对了：\n```\nIf-None-Match: W/\"2s3s-2602480f239\"\n```\n但是 Etag 的生成需要额外的开销，会在一定程度上影响服务端的性能。所以Etag不能完全代替Last-Modified。\n\n## Memory Cache 和 Disk Cache\n\n从 network调试中发现命中浏览器缓存的资源有的是 from memory cache，有的是 from disk cache，甚至还有 from service worker.\n\n### memory cache\n指的是在内存中的缓存，读取速度应该是最快的，优先级也是最高的。\n\n### disk cache\n磁盘内存\n\n### service worker\n我们借助 Service worker 实现的离线缓存就称为 Service Worker Cache。需要注意的是 Server Worker 对协议是有要求的，必须以 https 协议为前提。\n","slug":"http-cache","published":1,"updated":"2019-11-25T09:44:18.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dkr000480ox2s29zkz8","content":"<blockquote>\n<p>对于Web应用来说，对于网络的的依赖性很公安，性能瓶颈一般都在于如果减少IO消耗，这时候一般都会想起使用缓存，但是听说过 cache-control，expires 还有 Etag等名词的缓存策略，他们又分别代表什么呢，抓紧时间总结一下</p>\n</blockquote>\n<p>可以为强缓存和协商缓存，优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。</p>\n<h2 id=\"强缓存机制\"><a href=\"#强缓存机制\" class=\"headerlink\" title=\"强缓存机制\"></a>强缓存机制</h2><p>关键词： <code>Cache-Control</code> 和 <code>Expires</code></p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h3><p>当服务器返回响应时，在 Response Headers 中将过期时间写入 expires 字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expires: Mon, 11 Nov 2019 16:13:18 GMT</span><br></pre></td></tr></table></figure>\n\n<p>可以看到expires的值为一个时间戳，如果接下来的请求早于这个时间，浏览器不会再次跟服务器请求而是直接从缓存中返回，返回状态码是 200。</p>\n<p>但是由于expires涉及本地时间设置不同问题，可能造成机制的不准确。</p>\n<h3 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h3><p>因此 cache-control 就出现了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache-control: max-age=31536000</span><br></pre></td></tr></table></figure>\n\n<p>cache-control的max-age使用一个相对时间（单位：秒）控制资源的有效期，它表示在收到该资源 31536000 秒内，会使用本地的强缓策略。</p>\n<h3 id=\"no-store与no-cache\"><a href=\"#no-store与no-cache\" class=\"headerlink\" title=\"no-store与no-cache\"></a>no-store与no-cache</h3><p>no-cache 忽视了浏览器：为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期，走到协商缓存的阶段。</p>\n<p>no-store 全部忽视，不适用任何缓存策略，每次都是重新请求。</p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>协商缓存依赖于服务端与浏览器之间的通信。<br>关键词： <code>Last-Modified</code> 和 <code>Etag</code></p>\n<h3 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h3><p>Last-Modified的值为一个时间戳，会随着 Response Header 返回：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Last-Modified: Mon, 11 Nov 2019 16:13:18 GMT</span><br></pre></td></tr></table></figure>\n\n<p>之后的每次请求，Request Header  会带上一个 <code>If-Modified-Since</code> 的Header，他的值是上一次 response 返回的 last-modified 的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If-Modified-Since: Mon, 11 Nov 2019 16:13:18 GMT</span><br></pre></td></tr></table></figure>\n\n<p>这样服务端可以对比时间和服务器上的最后修改时间是否一致，来决定是否需要重新返回资源，如果未更新，直接返回304，此时的返回头中也不会有 last-modified 字段。如果更新正常返回并更新返回last-modified 的值。</p>\n<p>这样一来就实现了协商缓存，但是使用时间戳还是会有一些问题，因为如果编辑了文件但是没有实际内容的更改，last-modified会更新，但是其实文件酶标幺和从新请求，所以我们需要一个能表明文件是否真实更新的字段，类似与内容摘要的东西。</p>\n<h3 id=\"Etag\"><a href=\"#Etag\" class=\"headerlink\" title=\"Etag\"></a>Etag</h3><p>Etag 和 Last-Modified 类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，它可以是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETag: W/&quot;2s3s-2602480f239&quot;</span><br></pre></td></tr></table></figure>\n\n<p>那么下一次请求时，请求头里就会带上一个值相同的、名为 if-None-Match 的字符串供服务端比对了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If-None-Match: W/&quot;2s3s-2602480f239&quot;</span><br></pre></td></tr></table></figure>\n\n<p>但是 Etag 的生成需要额外的开销，会在一定程度上影响服务端的性能。所以Etag不能完全代替Last-Modified。</p>\n<h2 id=\"Memory-Cache-和-Disk-Cache\"><a href=\"#Memory-Cache-和-Disk-Cache\" class=\"headerlink\" title=\"Memory Cache 和 Disk Cache\"></a>Memory Cache 和 Disk Cache</h2><p>从 network调试中发现命中浏览器缓存的资源有的是 from memory cache，有的是 from disk cache，甚至还有 from service worker.</p>\n<h3 id=\"memory-cache\"><a href=\"#memory-cache\" class=\"headerlink\" title=\"memory cache\"></a>memory cache</h3><p>指的是在内存中的缓存，读取速度应该是最快的，优先级也是最高的。</p>\n<h3 id=\"disk-cache\"><a href=\"#disk-cache\" class=\"headerlink\" title=\"disk cache\"></a>disk cache</h3><p>磁盘内存</p>\n<h3 id=\"service-worker\"><a href=\"#service-worker\" class=\"headerlink\" title=\"service worker\"></a>service worker</h3><p>我们借助 Service worker 实现的离线缓存就称为 Service Worker Cache。需要注意的是 Server Worker 对协议是有要求的，必须以 https 协议为前提。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>对于Web应用来说，对于网络的的依赖性很公安，性能瓶颈一般都在于如果减少IO消耗，这时候一般都会想起使用缓存，但是听说过 cache-control，expires 还有 Etag等名词的缓存策略，他们又分别代表什么呢，抓紧时间总结一下</p>\n</blockquote>\n<p>可以为强缓存和协商缓存，优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。</p>\n<h2 id=\"强缓存机制\"><a href=\"#强缓存机制\" class=\"headerlink\" title=\"强缓存机制\"></a>强缓存机制</h2><p>关键词： <code>Cache-Control</code> 和 <code>Expires</code></p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h3><p>当服务器返回响应时，在 Response Headers 中将过期时间写入 expires 字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expires: Mon, 11 Nov 2019 16:13:18 GMT</span><br></pre></td></tr></table></figure>\n\n<p>可以看到expires的值为一个时间戳，如果接下来的请求早于这个时间，浏览器不会再次跟服务器请求而是直接从缓存中返回，返回状态码是 200。</p>\n<p>但是由于expires涉及本地时间设置不同问题，可能造成机制的不准确。</p>\n<h3 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h3><p>因此 cache-control 就出现了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache-control: max-age=31536000</span><br></pre></td></tr></table></figure>\n\n<p>cache-control的max-age使用一个相对时间（单位：秒）控制资源的有效期，它表示在收到该资源 31536000 秒内，会使用本地的强缓策略。</p>\n<h3 id=\"no-store与no-cache\"><a href=\"#no-store与no-cache\" class=\"headerlink\" title=\"no-store与no-cache\"></a>no-store与no-cache</h3><p>no-cache 忽视了浏览器：为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期，走到协商缓存的阶段。</p>\n<p>no-store 全部忽视，不适用任何缓存策略，每次都是重新请求。</p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>协商缓存依赖于服务端与浏览器之间的通信。<br>关键词： <code>Last-Modified</code> 和 <code>Etag</code></p>\n<h3 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h3><p>Last-Modified的值为一个时间戳，会随着 Response Header 返回：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Last-Modified: Mon, 11 Nov 2019 16:13:18 GMT</span><br></pre></td></tr></table></figure>\n\n<p>之后的每次请求，Request Header  会带上一个 <code>If-Modified-Since</code> 的Header，他的值是上一次 response 返回的 last-modified 的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If-Modified-Since: Mon, 11 Nov 2019 16:13:18 GMT</span><br></pre></td></tr></table></figure>\n\n<p>这样服务端可以对比时间和服务器上的最后修改时间是否一致，来决定是否需要重新返回资源，如果未更新，直接返回304，此时的返回头中也不会有 last-modified 字段。如果更新正常返回并更新返回last-modified 的值。</p>\n<p>这样一来就实现了协商缓存，但是使用时间戳还是会有一些问题，因为如果编辑了文件但是没有实际内容的更改，last-modified会更新，但是其实文件酶标幺和从新请求，所以我们需要一个能表明文件是否真实更新的字段，类似与内容摘要的东西。</p>\n<h3 id=\"Etag\"><a href=\"#Etag\" class=\"headerlink\" title=\"Etag\"></a>Etag</h3><p>Etag 和 Last-Modified 类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，它可以是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETag: W/&quot;2s3s-2602480f239&quot;</span><br></pre></td></tr></table></figure>\n\n<p>那么下一次请求时，请求头里就会带上一个值相同的、名为 if-None-Match 的字符串供服务端比对了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If-None-Match: W/&quot;2s3s-2602480f239&quot;</span><br></pre></td></tr></table></figure>\n\n<p>但是 Etag 的生成需要额外的开销，会在一定程度上影响服务端的性能。所以Etag不能完全代替Last-Modified。</p>\n<h2 id=\"Memory-Cache-和-Disk-Cache\"><a href=\"#Memory-Cache-和-Disk-Cache\" class=\"headerlink\" title=\"Memory Cache 和 Disk Cache\"></a>Memory Cache 和 Disk Cache</h2><p>从 network调试中发现命中浏览器缓存的资源有的是 from memory cache，有的是 from disk cache，甚至还有 from service worker.</p>\n<h3 id=\"memory-cache\"><a href=\"#memory-cache\" class=\"headerlink\" title=\"memory cache\"></a>memory cache</h3><p>指的是在内存中的缓存，读取速度应该是最快的，优先级也是最高的。</p>\n<h3 id=\"disk-cache\"><a href=\"#disk-cache\" class=\"headerlink\" title=\"disk cache\"></a>disk cache</h3><p>磁盘内存</p>\n<h3 id=\"service-worker\"><a href=\"#service-worker\" class=\"headerlink\" title=\"service worker\"></a>service worker</h3><p>我们借助 Service worker 实现的离线缓存就称为 Service Worker Cache。需要注意的是 Server Worker 对协议是有要求的，必须以 https 协议为前提。</p>\n"},{"title":"不懂就问系列-JavaScript到底怎么判断数据类型","date":"2020-05-01T07:11:18.000Z","_content":"\n\n# typeof\n返回一个值的基本数据类型，但对于引用类型的数据都返回 object\ntypeof 可以判断除了 null 和 数组 以外的数据类型\n\n```javascript\ntypeof null // object\ntypeof [] // object\n```\n\n# instanceof \n\n说到 instanceof 需要先提一下 Object.constructor 属性，对象的 constructor 属性 指向 改对象的构造函数。\n\n```javascript\nfunction Person() {}\nconst p1 =  new Person(); // p1.constructor === Person  true\n```\n\n但是 constructor 的指向也是可以认为变更的，它不一定始终指向它的构造函数\n\n\n# Object.prototype.toString.call()\n\n通过这个方法能判断所有类型, 注意下返回 字符串的大小写就可以了\n\n```javascript\nObject.prototype.toString.call([]); // [object Array]\nObject.prototype.toString.call(null); // [object Null]\nObject.prototype.toString.call(123); // [object Number]\n\n```\n\n\n\n","source":"_posts/javascript-type-judgement.md","raw":"---\ntitle: 不懂就问系列-JavaScript到底怎么判断数据类型\ndate: 2020-05-01 15:11:18\ncategories: \n- javascript\ntags:\n- javascript\n- 不懂就问\n---\n\n\n# typeof\n返回一个值的基本数据类型，但对于引用类型的数据都返回 object\ntypeof 可以判断除了 null 和 数组 以外的数据类型\n\n```javascript\ntypeof null // object\ntypeof [] // object\n```\n\n# instanceof \n\n说到 instanceof 需要先提一下 Object.constructor 属性，对象的 constructor 属性 指向 改对象的构造函数。\n\n```javascript\nfunction Person() {}\nconst p1 =  new Person(); // p1.constructor === Person  true\n```\n\n但是 constructor 的指向也是可以认为变更的，它不一定始终指向它的构造函数\n\n\n# Object.prototype.toString.call()\n\n通过这个方法能判断所有类型, 注意下返回 字符串的大小写就可以了\n\n```javascript\nObject.prototype.toString.call([]); // [object Array]\nObject.prototype.toString.call(null); // [object Null]\nObject.prototype.toString.call(123); // [object Number]\n\n```\n\n\n\n","slug":"javascript-type-judgement","published":1,"updated":"2020-09-03T07:08:11.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dks000580ox59v3rao8","content":"<h1 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h1><p>返回一个值的基本数据类型，但对于引用类型的数据都返回 object<br>typeof 可以判断除了 null 和 数组 以外的数据类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h1><p>说到 instanceof 需要先提一下 Object.constructor 属性，对象的 constructor 属性 指向 改对象的构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 =  <span class=\"keyword\">new</span> Person(); <span class=\"comment\">// p1.constructor === Person  true</span></span><br></pre></td></tr></table></figure>\n\n<p>但是 constructor 的指向也是可以认为变更的，它不一定始终指向它的构造函数</p>\n<h1 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h1><p>通过这个方法能判断所有类型, 注意下返回 字符串的大小写就可以了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([]); <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>); <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">123</span>); <span class=\"comment\">// [object Number]</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h1><p>返回一个值的基本数据类型，但对于引用类型的数据都返回 object<br>typeof 可以判断除了 null 和 数组 以外的数据类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h1><p>说到 instanceof 需要先提一下 Object.constructor 属性，对象的 constructor 属性 指向 改对象的构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 =  <span class=\"keyword\">new</span> Person(); <span class=\"comment\">// p1.constructor === Person  true</span></span><br></pre></td></tr></table></figure>\n\n<p>但是 constructor 的指向也是可以认为变更的，它不一定始终指向它的构造函数</p>\n<h1 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h1><p>通过这个方法能判断所有类型, 注意下返回 字符串的大小写就可以了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([]); <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>); <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">123</span>); <span class=\"comment\">// [object Number]</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"日语基础学习1","date":"2020-06-29T15:54:59.000Z","_content":"\n> 由于众所周知的原因，好久没有到学习班进行系统学习了，之前学到的可怜的一点点日语基础也忘得差不多了，回顾一下最最最基础而且容易忘记的知识\n\n# 五十音图\n\n话不多说，先上50音图\n\n|                              n                              |                              w                              |                            r                            |                            y                            |                            m                            |                              h                               |                            n                            |                              t                               |                              s                               |                            k                            |                                                         |      |\n| :---------------------------------------------------------: | :---------------------------------------------------------: | :-----------------------------------------------------: | :-----------------------------------------------------: | :-----------------------------------------------------: | :----------------------------------------------------------: | :-----------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :-----------------------------------------------------: | :-----------------------------------------------------: | :--: |\n| [ん](https://res.wokanxing.info/jpgramma/hiragana.html) (n) |   [わ](https://res.wokanxing.info/jpgramma/hiragana.html)   | [ら](https://res.wokanxing.info/jpgramma/hiragana.html) | [や](https://res.wokanxing.info/jpgramma/hiragana.html) | [ま](https://res.wokanxing.info/jpgramma/hiragana.html) |   [は](https://res.wokanxing.info/jpgramma/hiragana.html)    | [な](https://res.wokanxing.info/jpgramma/hiragana.html) |   [た](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [さ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [か](https://res.wokanxing.info/jpgramma/hiragana.html) | [あ](https://res.wokanxing.info/jpgramma/hiragana.html) |  a   |\n|                                                             |                             ゐ*                             | [り](https://res.wokanxing.info/jpgramma/hiragana.html) |                                                         | [み](https://res.wokanxing.info/jpgramma/hiragana.html) |   [ひ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [に](https://res.wokanxing.info/jpgramma/hiragana.html) | [ち](https://res.wokanxing.info/jpgramma/hiragana.html) (chi) | [し](https://res.wokanxing.info/jpgramma/hiragana.html) (shi) | [き](https://res.wokanxing.info/jpgramma/hiragana.html) | [い](https://res.wokanxing.info/jpgramma/hiragana.html) |  i   |\n|                                                             |                                                             | [る](https://res.wokanxing.info/jpgramma/hiragana.html) | [ゆ](https://res.wokanxing.info/jpgramma/hiragana.html) | [む](https://res.wokanxing.info/jpgramma/hiragana.html) | [ふ](https://res.wokanxing.info/jpgramma/hiragana.html) (fu) | [ぬ](https://res.wokanxing.info/jpgramma/hiragana.html) | [つ](https://res.wokanxing.info/jpgramma/hiragana.html) (tsu) |   [す](https://res.wokanxing.info/jpgramma/hiragana.html)    | [く](https://res.wokanxing.info/jpgramma/hiragana.html) | [う](https://res.wokanxing.info/jpgramma/hiragana.html) |  u   |\n|                                                             |                             ゑ*                             | [れ](https://res.wokanxing.info/jpgramma/hiragana.html) |                                                         | [め](https://res.wokanxing.info/jpgramma/hiragana.html) |   [へ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [ね](https://res.wokanxing.info/jpgramma/hiragana.html) |   [て](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [せ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [け](https://res.wokanxing.info/jpgramma/hiragana.html) | [え](https://res.wokanxing.info/jpgramma/hiragana.html) |  e   |\n|                                                             | [を](https://res.wokanxing.info/jpgramma/hiragana.html) (o) | [ろ](https://res.wokanxing.info/jpgramma/hiragana.html) | [よ](https://res.wokanxing.info/jpgramma/hiragana.html) | [も](https://res.wokanxing.info/jpgramma/hiragana.html) |   [ほ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [の](https://res.wokanxing.info/jpgramma/hiragana.html) |   [と](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [そ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [こ](https://res.wokanxing.info/jpgramma/hiragana.html) | [お](https://res.wokanxing.info/jpgramma/hiragana.html) |  o   |\n\n\n\n# 浊音 & 半浊音\n\n以下五个辅音，在假名右上角加上类似双引号的两点（称为「浊点」）或一个小圆圈（称为「半浊点」）。这样就出现了新的浑浊的、或者说不大清晰的辅音（理论上叫做浊辅音，或「濁り」，字面意思就是不清楚）。\n\n|                            p                            |                            b                            |                              d                               |                              z                               |                            g                            |      |\n| :-----------------------------------------------------: | :-----------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :-----------------------------------------------------: | :--: |\n| [ぱ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ば](https://res.wokanxing.info/jpgramma/hiragana.html) |   [だ](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [ざ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [が](https://res.wokanxing.info/jpgramma/hiragana.html) |  a   |\n| [ぴ](https://res.wokanxing.info/jpgramma/hiragana.html) | [び](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぢ](https://res.wokanxing.info/jpgramma/hiragana.html) (ji) | [じ](https://res.wokanxing.info/jpgramma/hiragana.html) (ji) | [ぎ](https://res.wokanxing.info/jpgramma/hiragana.html) |  i   |\n| [ぷ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぶ](https://res.wokanxing.info/jpgramma/hiragana.html) | [づ](https://res.wokanxing.info/jpgramma/hiragana.html) (dzu) |   [ず](https://res.wokanxing.info/jpgramma/hiragana.html)    | [ぐ](https://res.wokanxing.info/jpgramma/hiragana.html) |  u   |\n| [ぺ](https://res.wokanxing.info/jpgramma/hiragana.html) | [べ](https://res.wokanxing.info/jpgramma/hiragana.html) |   [で](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [ぜ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [げ](https://res.wokanxing.info/jpgramma/hiragana.html) |  e   |\n| [ぽ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぼ](https://res.wokanxing.info/jpgramma/hiragana.html) |   [ど](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [ぞ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [ご](https://res.wokanxing.info/jpgramma/hiragana.html) |  o   |\n\n**注意： 注意「ぢ」的发音跟「じ」是一样的，都是 / ji /，而「づ」的发音类似 / dzu /。**\n\n\n\n# 小号的「や」、「ゆ」、和「よ」\n\n可以把辅音跟一个 / ya / yu / yo / 音连起来，做法就是把一个小号的「や」、「ゆ」、或者 「よ」放到每个元音的 / i / 列假名后面。\n\n\n\n平假名中所有小や、ゆ、和よ的组合\n\n|                             p                             |                             b                             |                             j                             |                             g                             |                             r                             |                             m                             |                             h                             |                             n                             |                             c                             |                             s                             |                             k                             |      |\n| :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :--: |\n| [ぴゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [びゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [じゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぎゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [りゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [みゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ひゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [にゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ちゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [しゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [きゃ](https://res.wokanxing.info/jpgramma/hiragana.html) |  ya  |\n| [ぴゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [びゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [じゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぎゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [りゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [みゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ひゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [にゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ちゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [しゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [きゅ](https://res.wokanxing.info/jpgramma/hiragana.html) |  yu  |\n| [ぴょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [びょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [じょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぎょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [りょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [みょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ひょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [にょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ちょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [しょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [きょ](https://res.wokanxing.info/jpgramma/hiragana.html) |  yo  |\n\n\n\n# 小号的「つ」\n\n小号的「つ」放在两个假名之间时，后一个的辅音就被复制到前一个假名的结尾，就像是中间顿了一下的感觉。例如，如果你把小号「つ」放到「び」和「く」中间组合出「びっく」，那么辅音 / k / 就被带到了「び」后面，发音变为 \"bikku\"。类似的，「はっぱ」念作 \"happa\"，而「ろっく」念作 \"rokku\"，以此类推。\n\n> 小号「つ」的作用是把后一个假名的辅音复制到前一个假名后面。\n>\n> 例如「がっき」 = 「ga*k*ki」。\n>\n> 顺便一提 gakki 是我的，拔刀吧\n\n\n\n# 长元音\n\n长元音就是拉长元音的发音，根据需要拉长的元音的不同，你可以在其后添加 「あ」、「い」或者「う」，如下表所述。\n\n|   元音    | 用于拉长的附加元音 |\n| :-------: | :----------------: |\n|   / a /   |         あ         |\n| / i / e / |         い         |\n| / u / o / |         う         |\n\n**注： 长元音一定要拉长，否则「こうこう」（中学）就成了「ここ」（这里），或者「おばあさん」（祖母）就成了「おばさん」（中年妇女）！**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/jp-learn1.md","raw":"---\ntitle: 日语基础学习1\ndate: 2020-06-29 23:54:59\ncategories: \n- 日语\ntags:\n- 日语\n- 浊音\n- 半浊音\n---\n\n> 由于众所周知的原因，好久没有到学习班进行系统学习了，之前学到的可怜的一点点日语基础也忘得差不多了，回顾一下最最最基础而且容易忘记的知识\n\n# 五十音图\n\n话不多说，先上50音图\n\n|                              n                              |                              w                              |                            r                            |                            y                            |                            m                            |                              h                               |                            n                            |                              t                               |                              s                               |                            k                            |                                                         |      |\n| :---------------------------------------------------------: | :---------------------------------------------------------: | :-----------------------------------------------------: | :-----------------------------------------------------: | :-----------------------------------------------------: | :----------------------------------------------------------: | :-----------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :-----------------------------------------------------: | :-----------------------------------------------------: | :--: |\n| [ん](https://res.wokanxing.info/jpgramma/hiragana.html) (n) |   [わ](https://res.wokanxing.info/jpgramma/hiragana.html)   | [ら](https://res.wokanxing.info/jpgramma/hiragana.html) | [や](https://res.wokanxing.info/jpgramma/hiragana.html) | [ま](https://res.wokanxing.info/jpgramma/hiragana.html) |   [は](https://res.wokanxing.info/jpgramma/hiragana.html)    | [な](https://res.wokanxing.info/jpgramma/hiragana.html) |   [た](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [さ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [か](https://res.wokanxing.info/jpgramma/hiragana.html) | [あ](https://res.wokanxing.info/jpgramma/hiragana.html) |  a   |\n|                                                             |                             ゐ*                             | [り](https://res.wokanxing.info/jpgramma/hiragana.html) |                                                         | [み](https://res.wokanxing.info/jpgramma/hiragana.html) |   [ひ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [に](https://res.wokanxing.info/jpgramma/hiragana.html) | [ち](https://res.wokanxing.info/jpgramma/hiragana.html) (chi) | [し](https://res.wokanxing.info/jpgramma/hiragana.html) (shi) | [き](https://res.wokanxing.info/jpgramma/hiragana.html) | [い](https://res.wokanxing.info/jpgramma/hiragana.html) |  i   |\n|                                                             |                                                             | [る](https://res.wokanxing.info/jpgramma/hiragana.html) | [ゆ](https://res.wokanxing.info/jpgramma/hiragana.html) | [む](https://res.wokanxing.info/jpgramma/hiragana.html) | [ふ](https://res.wokanxing.info/jpgramma/hiragana.html) (fu) | [ぬ](https://res.wokanxing.info/jpgramma/hiragana.html) | [つ](https://res.wokanxing.info/jpgramma/hiragana.html) (tsu) |   [す](https://res.wokanxing.info/jpgramma/hiragana.html)    | [く](https://res.wokanxing.info/jpgramma/hiragana.html) | [う](https://res.wokanxing.info/jpgramma/hiragana.html) |  u   |\n|                                                             |                             ゑ*                             | [れ](https://res.wokanxing.info/jpgramma/hiragana.html) |                                                         | [め](https://res.wokanxing.info/jpgramma/hiragana.html) |   [へ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [ね](https://res.wokanxing.info/jpgramma/hiragana.html) |   [て](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [せ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [け](https://res.wokanxing.info/jpgramma/hiragana.html) | [え](https://res.wokanxing.info/jpgramma/hiragana.html) |  e   |\n|                                                             | [を](https://res.wokanxing.info/jpgramma/hiragana.html) (o) | [ろ](https://res.wokanxing.info/jpgramma/hiragana.html) | [よ](https://res.wokanxing.info/jpgramma/hiragana.html) | [も](https://res.wokanxing.info/jpgramma/hiragana.html) |   [ほ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [の](https://res.wokanxing.info/jpgramma/hiragana.html) |   [と](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [そ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [こ](https://res.wokanxing.info/jpgramma/hiragana.html) | [お](https://res.wokanxing.info/jpgramma/hiragana.html) |  o   |\n\n\n\n# 浊音 & 半浊音\n\n以下五个辅音，在假名右上角加上类似双引号的两点（称为「浊点」）或一个小圆圈（称为「半浊点」）。这样就出现了新的浑浊的、或者说不大清晰的辅音（理论上叫做浊辅音，或「濁り」，字面意思就是不清楚）。\n\n|                            p                            |                            b                            |                              d                               |                              z                               |                            g                            |      |\n| :-----------------------------------------------------: | :-----------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :-----------------------------------------------------: | :--: |\n| [ぱ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ば](https://res.wokanxing.info/jpgramma/hiragana.html) |   [だ](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [ざ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [が](https://res.wokanxing.info/jpgramma/hiragana.html) |  a   |\n| [ぴ](https://res.wokanxing.info/jpgramma/hiragana.html) | [び](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぢ](https://res.wokanxing.info/jpgramma/hiragana.html) (ji) | [じ](https://res.wokanxing.info/jpgramma/hiragana.html) (ji) | [ぎ](https://res.wokanxing.info/jpgramma/hiragana.html) |  i   |\n| [ぷ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぶ](https://res.wokanxing.info/jpgramma/hiragana.html) | [づ](https://res.wokanxing.info/jpgramma/hiragana.html) (dzu) |   [ず](https://res.wokanxing.info/jpgramma/hiragana.html)    | [ぐ](https://res.wokanxing.info/jpgramma/hiragana.html) |  u   |\n| [ぺ](https://res.wokanxing.info/jpgramma/hiragana.html) | [べ](https://res.wokanxing.info/jpgramma/hiragana.html) |   [で](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [ぜ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [げ](https://res.wokanxing.info/jpgramma/hiragana.html) |  e   |\n| [ぽ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぼ](https://res.wokanxing.info/jpgramma/hiragana.html) |   [ど](https://res.wokanxing.info/jpgramma/hiragana.html)    |   [ぞ](https://res.wokanxing.info/jpgramma/hiragana.html)    | [ご](https://res.wokanxing.info/jpgramma/hiragana.html) |  o   |\n\n**注意： 注意「ぢ」的发音跟「じ」是一样的，都是 / ji /，而「づ」的发音类似 / dzu /。**\n\n\n\n# 小号的「や」、「ゆ」、和「よ」\n\n可以把辅音跟一个 / ya / yu / yo / 音连起来，做法就是把一个小号的「や」、「ゆ」、或者 「よ」放到每个元音的 / i / 列假名后面。\n\n\n\n平假名中所有小や、ゆ、和よ的组合\n\n|                             p                             |                             b                             |                             j                             |                             g                             |                             r                             |                             m                             |                             h                             |                             n                             |                             c                             |                             s                             |                             k                             |      |\n| :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :-------------------------------------------------------: | :--: |\n| [ぴゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [びゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [じゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぎゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [りゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [みゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ひゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [にゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ちゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [しゃ](https://res.wokanxing.info/jpgramma/hiragana.html) | [きゃ](https://res.wokanxing.info/jpgramma/hiragana.html) |  ya  |\n| [ぴゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [びゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [じゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぎゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [りゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [みゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ひゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [にゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ちゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [しゅ](https://res.wokanxing.info/jpgramma/hiragana.html) | [きゅ](https://res.wokanxing.info/jpgramma/hiragana.html) |  yu  |\n| [ぴょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [びょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [じょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ぎょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [りょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [みょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ひょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [にょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [ちょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [しょ](https://res.wokanxing.info/jpgramma/hiragana.html) | [きょ](https://res.wokanxing.info/jpgramma/hiragana.html) |  yo  |\n\n\n\n# 小号的「つ」\n\n小号的「つ」放在两个假名之间时，后一个的辅音就被复制到前一个假名的结尾，就像是中间顿了一下的感觉。例如，如果你把小号「つ」放到「び」和「く」中间组合出「びっく」，那么辅音 / k / 就被带到了「び」后面，发音变为 \"bikku\"。类似的，「はっぱ」念作 \"happa\"，而「ろっく」念作 \"rokku\"，以此类推。\n\n> 小号「つ」的作用是把后一个假名的辅音复制到前一个假名后面。\n>\n> 例如「がっき」 = 「ga*k*ki」。\n>\n> 顺便一提 gakki 是我的，拔刀吧\n\n\n\n# 长元音\n\n长元音就是拉长元音的发音，根据需要拉长的元音的不同，你可以在其后添加 「あ」、「い」或者「う」，如下表所述。\n\n|   元音    | 用于拉长的附加元音 |\n| :-------: | :----------------: |\n|   / a /   |         あ         |\n| / i / e / |         い         |\n| / u / o / |         う         |\n\n**注： 长元音一定要拉长，否则「こうこう」（中学）就成了「ここ」（这里），或者「おばあさん」（祖母）就成了「おばさん」（中年妇女）！**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"jp-learn1","published":1,"updated":"2020-09-03T07:08:11.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dkt000680oxr5a00ftx","content":"<blockquote>\n<p>由于众所周知的原因，好久没有到学习班进行系统学习了，之前学到的可怜的一点点日语基础也忘得差不多了，回顾一下最最最基础而且容易忘记的知识</p>\n</blockquote>\n<h1 id=\"五十音图\"><a href=\"#五十音图\" class=\"headerlink\" title=\"五十音图\"></a>五十音图</h1><p>话不多说，先上50音图</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">n</th>\n<th align=\"center\">w</th>\n<th align=\"center\">r</th>\n<th align=\"center\">y</th>\n<th align=\"center\">m</th>\n<th align=\"center\">h</th>\n<th align=\"center\">n</th>\n<th align=\"center\">t</th>\n<th align=\"center\">s</th>\n<th align=\"center\">k</th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ん</a> (n)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">わ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ら</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">や</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ま</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">は</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">な</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">た</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">さ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">か</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">あ</a></td>\n<td align=\"center\">a</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">ゐ*</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">り</a></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">み</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ひ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">に</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ち</a> (chi)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">し</a> (shi)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">き</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">い</a></td>\n<td align=\"center\">i</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">る</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ゆ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">む</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ふ</a> (fu)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぬ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">つ</a> (tsu)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">す</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">く</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">う</a></td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">ゑ*</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">れ</a></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">め</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">へ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ね</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">て</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">せ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">け</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">え</a></td>\n<td align=\"center\">e</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">を</a> (o)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ろ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">よ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">も</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ほ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">の</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">と</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">そ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">こ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">お</a></td>\n<td align=\"center\">o</td>\n</tr>\n</tbody></table>\n<h1 id=\"浊音-amp-半浊音\"><a href=\"#浊音-amp-半浊音\" class=\"headerlink\" title=\"浊音 &amp; 半浊音\"></a>浊音 &amp; 半浊音</h1><p>以下五个辅音，在假名右上角加上类似双引号的两点（称为「浊点」）或一个小圆圈（称为「半浊点」）。这样就出现了新的浑浊的、或者说不大清晰的辅音（理论上叫做浊辅音，或「濁り」，字面意思就是不清楚）。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">p</th>\n<th align=\"center\">b</th>\n<th align=\"center\">d</th>\n<th align=\"center\">z</th>\n<th align=\"center\">g</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぱ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ば</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">だ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ざ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">が</a></td>\n<td align=\"center\">a</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぴ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">び</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぢ</a> (ji)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">じ</a> (ji)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぎ</a></td>\n<td align=\"center\">i</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぷ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぶ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">づ</a> (dzu)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ず</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぐ</a></td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぺ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">べ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">で</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぜ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">げ</a></td>\n<td align=\"center\">e</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぽ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぼ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ど</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぞ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ご</a></td>\n<td align=\"center\">o</td>\n</tr>\n</tbody></table>\n<p><strong>注意： 注意「ぢ」的发音跟「じ」是一样的，都是 / ji /，而「づ」的发音类似 / dzu /。</strong></p>\n<h1 id=\"小号的「や」、「ゆ」、和「よ」\"><a href=\"#小号的「や」、「ゆ」、和「よ」\" class=\"headerlink\" title=\"小号的「や」、「ゆ」、和「よ」\"></a>小号的「や」、「ゆ」、和「よ」</h1><p>可以把辅音跟一个 / ya / yu / yo / 音连起来，做法就是把一个小号的「や」、「ゆ」、或者 「よ」放到每个元音的 / i / 列假名后面。</p>\n<p>平假名中所有小や、ゆ、和よ的组合</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">p</th>\n<th align=\"center\">b</th>\n<th align=\"center\">j</th>\n<th align=\"center\">g</th>\n<th align=\"center\">r</th>\n<th align=\"center\">m</th>\n<th align=\"center\">h</th>\n<th align=\"center\">n</th>\n<th align=\"center\">c</th>\n<th align=\"center\">s</th>\n<th align=\"center\">k</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぴゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">びゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">じゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぎゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">りゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">みゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ひゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">にゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ちゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">しゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">きゃ</a></td>\n<td align=\"center\">ya</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぴゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">びゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">じゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぎゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">りゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">みゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ひゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">にゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ちゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">しゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">きゅ</a></td>\n<td align=\"center\">yu</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぴょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">びょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">じょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぎょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">りょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">みょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ひょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">にょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ちょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">しょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">きょ</a></td>\n<td align=\"center\">yo</td>\n</tr>\n</tbody></table>\n<h1 id=\"小号的「つ」\"><a href=\"#小号的「つ」\" class=\"headerlink\" title=\"小号的「つ」\"></a>小号的「つ」</h1><p>小号的「つ」放在两个假名之间时，后一个的辅音就被复制到前一个假名的结尾，就像是中间顿了一下的感觉。例如，如果你把小号「つ」放到「び」和「く」中间组合出「びっく」，那么辅音 / k / 就被带到了「び」后面，发音变为 “bikku”。类似的，「はっぱ」念作 “happa”，而「ろっく」念作 “rokku”，以此类推。</p>\n<blockquote>\n<p>小号「つ」的作用是把后一个假名的辅音复制到前一个假名后面。</p>\n<p>例如「がっき」 = 「ga<em>k</em>ki」。</p>\n<p>顺便一提 gakki 是我的，拔刀吧</p>\n</blockquote>\n<h1 id=\"长元音\"><a href=\"#长元音\" class=\"headerlink\" title=\"长元音\"></a>长元音</h1><p>长元音就是拉长元音的发音，根据需要拉长的元音的不同，你可以在其后添加 「あ」、「い」或者「う」，如下表所述。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">元音</th>\n<th align=\"center\">用于拉长的附加元音</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">/ a /</td>\n<td align=\"center\">あ</td>\n</tr>\n<tr>\n<td align=\"center\">/ i / e /</td>\n<td align=\"center\">い</td>\n</tr>\n<tr>\n<td align=\"center\">/ u / o /</td>\n<td align=\"center\">う</td>\n</tr>\n</tbody></table>\n<p><strong>注： 长元音一定要拉长，否则「こうこう」（中学）就成了「ここ」（这里），或者「おばあさん」（祖母）就成了「おばさん」（中年妇女）！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>由于众所周知的原因，好久没有到学习班进行系统学习了，之前学到的可怜的一点点日语基础也忘得差不多了，回顾一下最最最基础而且容易忘记的知识</p>\n</blockquote>\n<h1 id=\"五十音图\"><a href=\"#五十音图\" class=\"headerlink\" title=\"五十音图\"></a>五十音图</h1><p>话不多说，先上50音图</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">n</th>\n<th align=\"center\">w</th>\n<th align=\"center\">r</th>\n<th align=\"center\">y</th>\n<th align=\"center\">m</th>\n<th align=\"center\">h</th>\n<th align=\"center\">n</th>\n<th align=\"center\">t</th>\n<th align=\"center\">s</th>\n<th align=\"center\">k</th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ん</a> (n)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">わ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ら</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">や</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ま</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">は</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">な</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">た</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">さ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">か</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">あ</a></td>\n<td align=\"center\">a</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">ゐ*</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">り</a></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">み</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ひ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">に</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ち</a> (chi)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">し</a> (shi)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">き</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">い</a></td>\n<td align=\"center\">i</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">る</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ゆ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">む</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ふ</a> (fu)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぬ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">つ</a> (tsu)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">す</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">く</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">う</a></td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">ゑ*</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">れ</a></td>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">め</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">へ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ね</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">て</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">せ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">け</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">え</a></td>\n<td align=\"center\">e</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">を</a> (o)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ろ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">よ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">も</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ほ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">の</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">と</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">そ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">こ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">お</a></td>\n<td align=\"center\">o</td>\n</tr>\n</tbody></table>\n<h1 id=\"浊音-amp-半浊音\"><a href=\"#浊音-amp-半浊音\" class=\"headerlink\" title=\"浊音 &amp; 半浊音\"></a>浊音 &amp; 半浊音</h1><p>以下五个辅音，在假名右上角加上类似双引号的两点（称为「浊点」）或一个小圆圈（称为「半浊点」）。这样就出现了新的浑浊的、或者说不大清晰的辅音（理论上叫做浊辅音，或「濁り」，字面意思就是不清楚）。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">p</th>\n<th align=\"center\">b</th>\n<th align=\"center\">d</th>\n<th align=\"center\">z</th>\n<th align=\"center\">g</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぱ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ば</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">だ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ざ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">が</a></td>\n<td align=\"center\">a</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぴ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">び</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぢ</a> (ji)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">じ</a> (ji)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぎ</a></td>\n<td align=\"center\">i</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぷ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぶ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">づ</a> (dzu)</td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ず</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぐ</a></td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぺ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">べ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">で</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぜ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">げ</a></td>\n<td align=\"center\">e</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぽ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぼ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ど</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぞ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ご</a></td>\n<td align=\"center\">o</td>\n</tr>\n</tbody></table>\n<p><strong>注意： 注意「ぢ」的发音跟「じ」是一样的，都是 / ji /，而「づ」的发音类似 / dzu /。</strong></p>\n<h1 id=\"小号的「や」、「ゆ」、和「よ」\"><a href=\"#小号的「や」、「ゆ」、和「よ」\" class=\"headerlink\" title=\"小号的「や」、「ゆ」、和「よ」\"></a>小号的「や」、「ゆ」、和「よ」</h1><p>可以把辅音跟一个 / ya / yu / yo / 音连起来，做法就是把一个小号的「や」、「ゆ」、或者 「よ」放到每个元音的 / i / 列假名后面。</p>\n<p>平假名中所有小や、ゆ、和よ的组合</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">p</th>\n<th align=\"center\">b</th>\n<th align=\"center\">j</th>\n<th align=\"center\">g</th>\n<th align=\"center\">r</th>\n<th align=\"center\">m</th>\n<th align=\"center\">h</th>\n<th align=\"center\">n</th>\n<th align=\"center\">c</th>\n<th align=\"center\">s</th>\n<th align=\"center\">k</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぴゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">びゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">じゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぎゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">りゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">みゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ひゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">にゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ちゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">しゃ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">きゃ</a></td>\n<td align=\"center\">ya</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぴゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">びゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">じゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぎゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">りゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">みゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ひゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">にゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ちゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">しゅ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">きゅ</a></td>\n<td align=\"center\">yu</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぴょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">びょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">じょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ぎょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">りょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">みょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ひょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">にょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">ちょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">しょ</a></td>\n<td align=\"center\"><a href=\"https://res.wokanxing.info/jpgramma/hiragana.html\" target=\"_blank\" rel=\"noopener\">きょ</a></td>\n<td align=\"center\">yo</td>\n</tr>\n</tbody></table>\n<h1 id=\"小号的「つ」\"><a href=\"#小号的「つ」\" class=\"headerlink\" title=\"小号的「つ」\"></a>小号的「つ」</h1><p>小号的「つ」放在两个假名之间时，后一个的辅音就被复制到前一个假名的结尾，就像是中间顿了一下的感觉。例如，如果你把小号「つ」放到「び」和「く」中间组合出「びっく」，那么辅音 / k / 就被带到了「び」后面，发音变为 “bikku”。类似的，「はっぱ」念作 “happa”，而「ろっく」念作 “rokku”，以此类推。</p>\n<blockquote>\n<p>小号「つ」的作用是把后一个假名的辅音复制到前一个假名后面。</p>\n<p>例如「がっき」 = 「ga<em>k</em>ki」。</p>\n<p>顺便一提 gakki 是我的，拔刀吧</p>\n</blockquote>\n<h1 id=\"长元音\"><a href=\"#长元音\" class=\"headerlink\" title=\"长元音\"></a>长元音</h1><p>长元音就是拉长元音的发音，根据需要拉长的元音的不同，你可以在其后添加 「あ」、「い」或者「う」，如下表所述。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">元音</th>\n<th align=\"center\">用于拉长的附加元音</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">/ a /</td>\n<td align=\"center\">あ</td>\n</tr>\n<tr>\n<td align=\"center\">/ i / e /</td>\n<td align=\"center\">い</td>\n</tr>\n<tr>\n<td align=\"center\">/ u / o /</td>\n<td align=\"center\">う</td>\n</tr>\n</tbody></table>\n<p><strong>注： 长元音一定要拉长，否则「こうこう」（中学）就成了「ここ」（这里），或者「おばあさん」（祖母）就成了「おばさん」（中年妇女）！</strong></p>\n"},{"title":"WEB开发中涉及的各种宽高","date":"2019-09-09T05:56:05.000Z","_content":"\n> web开发中经常涉及各种宽高和坐标的概念，相关的属性和概念较多，每次都得查一遍，故作此整理。\n\nJS中Document对象的宽高有3个种类：`client`, `offset` , `scroll` \n\n## Client\n\n### clientHeight 和 clientWidth\n该属性指的是元素可视部分的宽度和高度，即`padding+content`， 不包括滚动轴等。\n![](/../images/clientHeight.png)\n\n### clientTop 和 clientLeft\n该属性是读取元素 `border` 的宽度和高度的。\n\n- clientTop = border-top 的 broder-width\n- clientLeft = border-left 的 border-width\n\n\n## Offset\n\n### offsetHeight 和 offsetWidth\n这一对属性指的是元素的 `border+padding+content` 的宽度和高度。包括padding、border、水平滚动条，但不包括margin的元素的高度。\n该属性和其内部的内容是否超出元素大小无关，只和本来设置的border以及width和height有关。\n![](/../images/offsetHeight.png)\n\n### offsetTop 和 offsetLeft\n这个需要先了解下 `offsetParent`：第一个 position 不为  static 的 父元素，一层层向上，知道 body。\n当前元素顶部距离最近父元素`offsetParent`顶部的距离,和有没有滚动条没有关系。单位px，只读元素。 \n同理left\n\n## Scroll\n\n### scollHeight 和 scrollWidth\n因为子元素比父元素高，父元素不想被子元素撑的一样高就显示出了滚动条，在滚动的过程中本元素有部分被隐藏了，scrollHeight 代表包括当前不可见部分的元素的高度。而可见部分的高度其实就是clientHeight，也就是scrollHeight>=clientHeight恒成立。在有滚动条时讨论scrollHeight才有意义，在没有滚动条时scrollHeight==clientHeight恒成立。单位px，只读元素。 \n![](/../images/scollHeight.png)\n\n### scrollTop 和 scrollLeft\n代表在有滚动条时，滚动条向下滚动的距离也就是元素顶部被遮住部分的高度。在没有滚动条时scrollTop==0恒成立，单位px。\n![](/../images/scrollTop.png)\n\n","source":"_posts/JsWidthAndHeight.md","raw":"---\ntitle: WEB开发中涉及的各种宽高\ndate: 2019-09-09 13:56:05\ncategories: \n- JavaScript\ntags:\n- scorllTop\n- height\n- width\n---\n\n> web开发中经常涉及各种宽高和坐标的概念，相关的属性和概念较多，每次都得查一遍，故作此整理。\n\nJS中Document对象的宽高有3个种类：`client`, `offset` , `scroll` \n\n## Client\n\n### clientHeight 和 clientWidth\n该属性指的是元素可视部分的宽度和高度，即`padding+content`， 不包括滚动轴等。\n![](/../images/clientHeight.png)\n\n### clientTop 和 clientLeft\n该属性是读取元素 `border` 的宽度和高度的。\n\n- clientTop = border-top 的 broder-width\n- clientLeft = border-left 的 border-width\n\n\n## Offset\n\n### offsetHeight 和 offsetWidth\n这一对属性指的是元素的 `border+padding+content` 的宽度和高度。包括padding、border、水平滚动条，但不包括margin的元素的高度。\n该属性和其内部的内容是否超出元素大小无关，只和本来设置的border以及width和height有关。\n![](/../images/offsetHeight.png)\n\n### offsetTop 和 offsetLeft\n这个需要先了解下 `offsetParent`：第一个 position 不为  static 的 父元素，一层层向上，知道 body。\n当前元素顶部距离最近父元素`offsetParent`顶部的距离,和有没有滚动条没有关系。单位px，只读元素。 \n同理left\n\n## Scroll\n\n### scollHeight 和 scrollWidth\n因为子元素比父元素高，父元素不想被子元素撑的一样高就显示出了滚动条，在滚动的过程中本元素有部分被隐藏了，scrollHeight 代表包括当前不可见部分的元素的高度。而可见部分的高度其实就是clientHeight，也就是scrollHeight>=clientHeight恒成立。在有滚动条时讨论scrollHeight才有意义，在没有滚动条时scrollHeight==clientHeight恒成立。单位px，只读元素。 \n![](/../images/scollHeight.png)\n\n### scrollTop 和 scrollLeft\n代表在有滚动条时，滚动条向下滚动的距离也就是元素顶部被遮住部分的高度。在没有滚动条时scrollTop==0恒成立，单位px。\n![](/../images/scrollTop.png)\n\n","slug":"JsWidthAndHeight","published":1,"updated":"2019-09-09T06:57:15.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dkx000980ox5twodnlu","content":"<blockquote>\n<p>web开发中经常涉及各种宽高和坐标的概念，相关的属性和概念较多，每次都得查一遍，故作此整理。</p>\n</blockquote>\n<p>JS中Document对象的宽高有3个种类：<code>client</code>, <code>offset</code> , <code>scroll</code> </p>\n<h2 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h2><h3 id=\"clientHeight-和-clientWidth\"><a href=\"#clientHeight-和-clientWidth\" class=\"headerlink\" title=\"clientHeight 和 clientWidth\"></a>clientHeight 和 clientWidth</h3><p>该属性指的是元素可视部分的宽度和高度，即<code>padding+content</code>， 不包括滚动轴等。<br><img src=\"/../images/clientHeight.png\" alt></p>\n<h3 id=\"clientTop-和-clientLeft\"><a href=\"#clientTop-和-clientLeft\" class=\"headerlink\" title=\"clientTop 和 clientLeft\"></a>clientTop 和 clientLeft</h3><p>该属性是读取元素 <code>border</code> 的宽度和高度的。</p>\n<ul>\n<li>clientTop = border-top 的 broder-width</li>\n<li>clientLeft = border-left 的 border-width</li>\n</ul>\n<h2 id=\"Offset\"><a href=\"#Offset\" class=\"headerlink\" title=\"Offset\"></a>Offset</h2><h3 id=\"offsetHeight-和-offsetWidth\"><a href=\"#offsetHeight-和-offsetWidth\" class=\"headerlink\" title=\"offsetHeight 和 offsetWidth\"></a>offsetHeight 和 offsetWidth</h3><p>这一对属性指的是元素的 <code>border+padding+content</code> 的宽度和高度。包括padding、border、水平滚动条，但不包括margin的元素的高度。<br>该属性和其内部的内容是否超出元素大小无关，只和本来设置的border以及width和height有关。<br><img src=\"/../images/offsetHeight.png\" alt></p>\n<h3 id=\"offsetTop-和-offsetLeft\"><a href=\"#offsetTop-和-offsetLeft\" class=\"headerlink\" title=\"offsetTop 和 offsetLeft\"></a>offsetTop 和 offsetLeft</h3><p>这个需要先了解下 <code>offsetParent</code>：第一个 position 不为  static 的 父元素，一层层向上，知道 body。<br>当前元素顶部距离最近父元素<code>offsetParent</code>顶部的距离,和有没有滚动条没有关系。单位px，只读元素。<br>同理left</p>\n<h2 id=\"Scroll\"><a href=\"#Scroll\" class=\"headerlink\" title=\"Scroll\"></a>Scroll</h2><h3 id=\"scollHeight-和-scrollWidth\"><a href=\"#scollHeight-和-scrollWidth\" class=\"headerlink\" title=\"scollHeight 和 scrollWidth\"></a>scollHeight 和 scrollWidth</h3><p>因为子元素比父元素高，父元素不想被子元素撑的一样高就显示出了滚动条，在滚动的过程中本元素有部分被隐藏了，scrollHeight 代表包括当前不可见部分的元素的高度。而可见部分的高度其实就是clientHeight，也就是scrollHeight&gt;=clientHeight恒成立。在有滚动条时讨论scrollHeight才有意义，在没有滚动条时scrollHeight==clientHeight恒成立。单位px，只读元素。<br><img src=\"/../images/scollHeight.png\" alt></p>\n<h3 id=\"scrollTop-和-scrollLeft\"><a href=\"#scrollTop-和-scrollLeft\" class=\"headerlink\" title=\"scrollTop 和 scrollLeft\"></a>scrollTop 和 scrollLeft</h3><p>代表在有滚动条时，滚动条向下滚动的距离也就是元素顶部被遮住部分的高度。在没有滚动条时scrollTop==0恒成立，单位px。<br><img src=\"/../images/scrollTop.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>web开发中经常涉及各种宽高和坐标的概念，相关的属性和概念较多，每次都得查一遍，故作此整理。</p>\n</blockquote>\n<p>JS中Document对象的宽高有3个种类：<code>client</code>, <code>offset</code> , <code>scroll</code> </p>\n<h2 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h2><h3 id=\"clientHeight-和-clientWidth\"><a href=\"#clientHeight-和-clientWidth\" class=\"headerlink\" title=\"clientHeight 和 clientWidth\"></a>clientHeight 和 clientWidth</h3><p>该属性指的是元素可视部分的宽度和高度，即<code>padding+content</code>， 不包括滚动轴等。<br><img src=\"/../images/clientHeight.png\" alt></p>\n<h3 id=\"clientTop-和-clientLeft\"><a href=\"#clientTop-和-clientLeft\" class=\"headerlink\" title=\"clientTop 和 clientLeft\"></a>clientTop 和 clientLeft</h3><p>该属性是读取元素 <code>border</code> 的宽度和高度的。</p>\n<ul>\n<li>clientTop = border-top 的 broder-width</li>\n<li>clientLeft = border-left 的 border-width</li>\n</ul>\n<h2 id=\"Offset\"><a href=\"#Offset\" class=\"headerlink\" title=\"Offset\"></a>Offset</h2><h3 id=\"offsetHeight-和-offsetWidth\"><a href=\"#offsetHeight-和-offsetWidth\" class=\"headerlink\" title=\"offsetHeight 和 offsetWidth\"></a>offsetHeight 和 offsetWidth</h3><p>这一对属性指的是元素的 <code>border+padding+content</code> 的宽度和高度。包括padding、border、水平滚动条，但不包括margin的元素的高度。<br>该属性和其内部的内容是否超出元素大小无关，只和本来设置的border以及width和height有关。<br><img src=\"/../images/offsetHeight.png\" alt></p>\n<h3 id=\"offsetTop-和-offsetLeft\"><a href=\"#offsetTop-和-offsetLeft\" class=\"headerlink\" title=\"offsetTop 和 offsetLeft\"></a>offsetTop 和 offsetLeft</h3><p>这个需要先了解下 <code>offsetParent</code>：第一个 position 不为  static 的 父元素，一层层向上，知道 body。<br>当前元素顶部距离最近父元素<code>offsetParent</code>顶部的距离,和有没有滚动条没有关系。单位px，只读元素。<br>同理left</p>\n<h2 id=\"Scroll\"><a href=\"#Scroll\" class=\"headerlink\" title=\"Scroll\"></a>Scroll</h2><h3 id=\"scollHeight-和-scrollWidth\"><a href=\"#scollHeight-和-scrollWidth\" class=\"headerlink\" title=\"scollHeight 和 scrollWidth\"></a>scollHeight 和 scrollWidth</h3><p>因为子元素比父元素高，父元素不想被子元素撑的一样高就显示出了滚动条，在滚动的过程中本元素有部分被隐藏了，scrollHeight 代表包括当前不可见部分的元素的高度。而可见部分的高度其实就是clientHeight，也就是scrollHeight&gt;=clientHeight恒成立。在有滚动条时讨论scrollHeight才有意义，在没有滚动条时scrollHeight==clientHeight恒成立。单位px，只读元素。<br><img src=\"/../images/scollHeight.png\" alt></p>\n<h3 id=\"scrollTop-和-scrollLeft\"><a href=\"#scrollTop-和-scrollLeft\" class=\"headerlink\" title=\"scrollTop 和 scrollLeft\"></a>scrollTop 和 scrollLeft</h3><p>代表在有滚动条时，滚动条向下滚动的距离也就是元素顶部被遮住部分的高度。在没有滚动条时scrollTop==0恒成立，单位px。<br><img src=\"/../images/scrollTop.png\" alt></p>\n"},{"title":"日语基础学习2-数字","date":"2020-07-12T02:28:55.000Z","_content":"\n# 日语基础学习2-数字\n\n## 1-10 的数字\n\n| 1    | 2    | 3    | 4        | 5    |\n| ---- | ---- | ---- | -------- | ---- |\n| 一   | 二   | 三   | 四       | 五   |\n| いち | に   | さん | し／よん | ご   |\n\n| 6    | 7          | 8    | 9      | 10     |\n| ---- | ---------- | ---- | ------ | ------ |\n| 六   | 七         | 八   | 九     | 十     |\n| ろく | しち／なな | はち | きゅう | じゅう |\n\n如图所示，4 既可以是「し」也可以是「よん」，而 7 可以是「しち」或「なな」。十以内的话基本上怎么说都可以，不过十以后的话就要用「よん」和「なな」了。一般来说，「よん」和「なな」在大多数场合比「し」和「しち」常用。\n\n你可以用这十个数字从 1 数到 99。这方面日语比英语简单，因为你不用去记那些特殊的 \"twenty\" 或 \"fifty\"，只要说「二十」和「五十」就可以了\n\n1. 三十一 （さんじゅういち） = 31\n2. 五十四 （ごじゅうよん）= 54\n3. 七十七 （ななじゅうなな）= 77\n4. 二十 （にじゅう） = 20\n\n注意数字不是全用汉字写，就是全用阿拉伯数字写，因为写平假名的话会长到让你难以分辨。\n\n## 超过 99 的数字\n\n下面是更大的数字：\n\n|  数字  | 100    | 1,000 | 10,000 | 10^8 | 10^12  |\n| :----: | ------ | ----- | ------ | ---- | ------ |\n|  漢字  | 百     | 千    | 万     | 億   | 兆     |\n| 平假名 | ひゃく | せん  | まん   | おく | ちょう |\n\n注意到 10^4 和 10^8 之间，也就是万 和 億之间是空白的吗？这是因为日语里面数字是按万位分组的。超过 1万 (10,000) 以后，就要回头重来，直到 9,999 万，然后才到 1億 (100,000,000)。另外，百 是 100，千是 1,000，但再大就必须加个 1，于是剩下的单位就变成了一万 (10^4)、一億 (10^8)、一兆 (10^12)。\n\n现在你可以数到 9,999,999,999,999,999 了，把那些数字串起来就行。但问题才开始出现。你可以试着说一下「いちちょう」 、「ろくひゃく」或者「さんせん」，说快一点你就会发现很困难，因为老是要重复那些相似的元音。所以日本人决定简化，发音成「いっちょう」、 「ろっぴゃく」和「さんぜん」。不幸的是这让大家的学习变得更难了。以下是所有的细微变化。\n\n| 数字  | 漢字 |  ひらがな  |\n| :---: | :--: | :--------: |\n|  300  | 三百 | さんびゃく |\n|  600  | 六百 | ろっぴゃく |\n|  800  | 八百 | はっぴゃく |\n| 3000  | 三千 |  さんぜん  |\n| 8000  | 八千 |  はっせん  |\n| 10^12 | 一兆 | いっちょう |\n\n1. 四万三千七十六 （よんまんさんぜんななじゅうろく）\n   43,076\n2. 七億六百二十四万九千二百二十二 （ななおくろっぴゃくにじゅうよんまんきゅうせんにひゃくにじゅうに）\n   706,249,222\n3. 五百兆二万一 （ごひゃくちょうにまんいち）\n   500,000,000,020,001\n\n注意要么写成阿拉伯数字，要么写成汉字，否则（平假名）很难分割。\n\n### 比 1 小的数\n\n1. 零 【れい】 - 零\n2. ゼロ - 零\n3. マル - 圆圈；零\n4. 点 【てん】 - 点\n5. マイナス - 减\n\n日语里面的零是「零」，不过「ゼロ」或「マル」在现代日语里面更常用。小数点说「点」就可以，然后后面的数字挨个念。下面是例子：\n\n- 0.0021 = ゼロ、点、ゼロ、ゼロ、二、一。\n\n负数跟正数一样，只不过要先说一个「マイナス」。\n\n- マイナス二十九 = -29\n\n\n\n","source":"_posts/jp-learn2.md","raw":"---\ntitle: 日语基础学习2-数字\ndate: 2020-07-12 10:28:55\ncategories: \n- 日语\ntags:\n- 日语\n- 数字\n---\n\n# 日语基础学习2-数字\n\n## 1-10 的数字\n\n| 1    | 2    | 3    | 4        | 5    |\n| ---- | ---- | ---- | -------- | ---- |\n| 一   | 二   | 三   | 四       | 五   |\n| いち | に   | さん | し／よん | ご   |\n\n| 6    | 7          | 8    | 9      | 10     |\n| ---- | ---------- | ---- | ------ | ------ |\n| 六   | 七         | 八   | 九     | 十     |\n| ろく | しち／なな | はち | きゅう | じゅう |\n\n如图所示，4 既可以是「し」也可以是「よん」，而 7 可以是「しち」或「なな」。十以内的话基本上怎么说都可以，不过十以后的话就要用「よん」和「なな」了。一般来说，「よん」和「なな」在大多数场合比「し」和「しち」常用。\n\n你可以用这十个数字从 1 数到 99。这方面日语比英语简单，因为你不用去记那些特殊的 \"twenty\" 或 \"fifty\"，只要说「二十」和「五十」就可以了\n\n1. 三十一 （さんじゅういち） = 31\n2. 五十四 （ごじゅうよん）= 54\n3. 七十七 （ななじゅうなな）= 77\n4. 二十 （にじゅう） = 20\n\n注意数字不是全用汉字写，就是全用阿拉伯数字写，因为写平假名的话会长到让你难以分辨。\n\n## 超过 99 的数字\n\n下面是更大的数字：\n\n|  数字  | 100    | 1,000 | 10,000 | 10^8 | 10^12  |\n| :----: | ------ | ----- | ------ | ---- | ------ |\n|  漢字  | 百     | 千    | 万     | 億   | 兆     |\n| 平假名 | ひゃく | せん  | まん   | おく | ちょう |\n\n注意到 10^4 和 10^8 之间，也就是万 和 億之间是空白的吗？这是因为日语里面数字是按万位分组的。超过 1万 (10,000) 以后，就要回头重来，直到 9,999 万，然后才到 1億 (100,000,000)。另外，百 是 100，千是 1,000，但再大就必须加个 1，于是剩下的单位就变成了一万 (10^4)、一億 (10^8)、一兆 (10^12)。\n\n现在你可以数到 9,999,999,999,999,999 了，把那些数字串起来就行。但问题才开始出现。你可以试着说一下「いちちょう」 、「ろくひゃく」或者「さんせん」，说快一点你就会发现很困难，因为老是要重复那些相似的元音。所以日本人决定简化，发音成「いっちょう」、 「ろっぴゃく」和「さんぜん」。不幸的是这让大家的学习变得更难了。以下是所有的细微变化。\n\n| 数字  | 漢字 |  ひらがな  |\n| :---: | :--: | :--------: |\n|  300  | 三百 | さんびゃく |\n|  600  | 六百 | ろっぴゃく |\n|  800  | 八百 | はっぴゃく |\n| 3000  | 三千 |  さんぜん  |\n| 8000  | 八千 |  はっせん  |\n| 10^12 | 一兆 | いっちょう |\n\n1. 四万三千七十六 （よんまんさんぜんななじゅうろく）\n   43,076\n2. 七億六百二十四万九千二百二十二 （ななおくろっぴゃくにじゅうよんまんきゅうせんにひゃくにじゅうに）\n   706,249,222\n3. 五百兆二万一 （ごひゃくちょうにまんいち）\n   500,000,000,020,001\n\n注意要么写成阿拉伯数字，要么写成汉字，否则（平假名）很难分割。\n\n### 比 1 小的数\n\n1. 零 【れい】 - 零\n2. ゼロ - 零\n3. マル - 圆圈；零\n4. 点 【てん】 - 点\n5. マイナス - 减\n\n日语里面的零是「零」，不过「ゼロ」或「マル」在现代日语里面更常用。小数点说「点」就可以，然后后面的数字挨个念。下面是例子：\n\n- 0.0021 = ゼロ、点、ゼロ、ゼロ、二、一。\n\n负数跟正数一样，只不过要先说一个「マイナス」。\n\n- マイナス二十九 = -29\n\n\n\n","slug":"jp-learn2","published":1,"updated":"2020-09-03T07:08:11.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dky000a80oxxx9gr3g9","content":"<h1 id=\"日语基础学习2-数字\"><a href=\"#日语基础学习2-数字\" class=\"headerlink\" title=\"日语基础学习2-数字\"></a>日语基础学习2-数字</h1><h2 id=\"1-10-的数字\"><a href=\"#1-10-的数字\" class=\"headerlink\" title=\"1-10 的数字\"></a>1-10 的数字</h2><table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一</td>\n<td>二</td>\n<td>三</td>\n<td>四</td>\n<td>五</td>\n</tr>\n<tr>\n<td>いち</td>\n<td>に</td>\n<td>さん</td>\n<td>し／よん</td>\n<td>ご</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>六</td>\n<td>七</td>\n<td>八</td>\n<td>九</td>\n<td>十</td>\n</tr>\n<tr>\n<td>ろく</td>\n<td>しち／なな</td>\n<td>はち</td>\n<td>きゅう</td>\n<td>じゅう</td>\n</tr>\n</tbody></table>\n<p>如图所示，4 既可以是「し」也可以是「よん」，而 7 可以是「しち」或「なな」。十以内的话基本上怎么说都可以，不过十以后的话就要用「よん」和「なな」了。一般来说，「よん」和「なな」在大多数场合比「し」和「しち」常用。</p>\n<p>你可以用这十个数字从 1 数到 99。这方面日语比英语简单，因为你不用去记那些特殊的 “twenty” 或 “fifty”，只要说「二十」和「五十」就可以了</p>\n<ol>\n<li>三十一 （さんじゅういち） = 31</li>\n<li>五十四 （ごじゅうよん）= 54</li>\n<li>七十七 （ななじゅうなな）= 77</li>\n<li>二十 （にじゅう） = 20</li>\n</ol>\n<p>注意数字不是全用汉字写，就是全用阿拉伯数字写，因为写平假名的话会长到让你难以分辨。</p>\n<h2 id=\"超过-99-的数字\"><a href=\"#超过-99-的数字\" class=\"headerlink\" title=\"超过 99 的数字\"></a>超过 99 的数字</h2><p>下面是更大的数字：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数字</th>\n<th>100</th>\n<th>1,000</th>\n<th>10,000</th>\n<th>10^8</th>\n<th>10^12</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">漢字</td>\n<td>百</td>\n<td>千</td>\n<td>万</td>\n<td>億</td>\n<td>兆</td>\n</tr>\n<tr>\n<td align=\"center\">平假名</td>\n<td>ひゃく</td>\n<td>せん</td>\n<td>まん</td>\n<td>おく</td>\n<td>ちょう</td>\n</tr>\n</tbody></table>\n<p>注意到 10^4 和 10^8 之间，也就是万 和 億之间是空白的吗？这是因为日语里面数字是按万位分组的。超过 1万 (10,000) 以后，就要回头重来，直到 9,999 万，然后才到 1億 (100,000,000)。另外，百 是 100，千是 1,000，但再大就必须加个 1，于是剩下的单位就变成了一万 (10^4)、一億 (10^8)、一兆 (10^12)。</p>\n<p>现在你可以数到 9,999,999,999,999,999 了，把那些数字串起来就行。但问题才开始出现。你可以试着说一下「いちちょう」 、「ろくひゃく」或者「さんせん」，说快一点你就会发现很困难，因为老是要重复那些相似的元音。所以日本人决定简化，发音成「いっちょう」、 「ろっぴゃく」和「さんぜん」。不幸的是这让大家的学习变得更难了。以下是所有的细微变化。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数字</th>\n<th align=\"center\">漢字</th>\n<th align=\"center\">ひらがな</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">300</td>\n<td align=\"center\">三百</td>\n<td align=\"center\">さんびゃく</td>\n</tr>\n<tr>\n<td align=\"center\">600</td>\n<td align=\"center\">六百</td>\n<td align=\"center\">ろっぴゃく</td>\n</tr>\n<tr>\n<td align=\"center\">800</td>\n<td align=\"center\">八百</td>\n<td align=\"center\">はっぴゃく</td>\n</tr>\n<tr>\n<td align=\"center\">3000</td>\n<td align=\"center\">三千</td>\n<td align=\"center\">さんぜん</td>\n</tr>\n<tr>\n<td align=\"center\">8000</td>\n<td align=\"center\">八千</td>\n<td align=\"center\">はっせん</td>\n</tr>\n<tr>\n<td align=\"center\">10^12</td>\n<td align=\"center\">一兆</td>\n<td align=\"center\">いっちょう</td>\n</tr>\n</tbody></table>\n<ol>\n<li>四万三千七十六 （よんまんさんぜんななじゅうろく）<br>43,076</li>\n<li>七億六百二十四万九千二百二十二 （ななおくろっぴゃくにじゅうよんまんきゅうせんにひゃくにじゅうに）<br>706,249,222</li>\n<li>五百兆二万一 （ごひゃくちょうにまんいち）<br>500,000,000,020,001</li>\n</ol>\n<p>注意要么写成阿拉伯数字，要么写成汉字，否则（平假名）很难分割。</p>\n<h3 id=\"比-1-小的数\"><a href=\"#比-1-小的数\" class=\"headerlink\" title=\"比 1 小的数\"></a>比 1 小的数</h3><ol>\n<li>零 【れい】 - 零</li>\n<li>ゼロ - 零</li>\n<li>マル - 圆圈；零</li>\n<li>点 【てん】 - 点</li>\n<li>マイナス - 减</li>\n</ol>\n<p>日语里面的零是「零」，不过「ゼロ」或「マル」在现代日语里面更常用。小数点说「点」就可以，然后后面的数字挨个念。下面是例子：</p>\n<ul>\n<li>0.0021 = ゼロ、点、ゼロ、ゼロ、二、一。</li>\n</ul>\n<p>负数跟正数一样，只不过要先说一个「マイナス」。</p>\n<ul>\n<li>マイナス二十九 = -29</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"日语基础学习2-数字\"><a href=\"#日语基础学习2-数字\" class=\"headerlink\" title=\"日语基础学习2-数字\"></a>日语基础学习2-数字</h1><h2 id=\"1-10-的数字\"><a href=\"#1-10-的数字\" class=\"headerlink\" title=\"1-10 的数字\"></a>1-10 的数字</h2><table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一</td>\n<td>二</td>\n<td>三</td>\n<td>四</td>\n<td>五</td>\n</tr>\n<tr>\n<td>いち</td>\n<td>に</td>\n<td>さん</td>\n<td>し／よん</td>\n<td>ご</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>六</td>\n<td>七</td>\n<td>八</td>\n<td>九</td>\n<td>十</td>\n</tr>\n<tr>\n<td>ろく</td>\n<td>しち／なな</td>\n<td>はち</td>\n<td>きゅう</td>\n<td>じゅう</td>\n</tr>\n</tbody></table>\n<p>如图所示，4 既可以是「し」也可以是「よん」，而 7 可以是「しち」或「なな」。十以内的话基本上怎么说都可以，不过十以后的话就要用「よん」和「なな」了。一般来说，「よん」和「なな」在大多数场合比「し」和「しち」常用。</p>\n<p>你可以用这十个数字从 1 数到 99。这方面日语比英语简单，因为你不用去记那些特殊的 “twenty” 或 “fifty”，只要说「二十」和「五十」就可以了</p>\n<ol>\n<li>三十一 （さんじゅういち） = 31</li>\n<li>五十四 （ごじゅうよん）= 54</li>\n<li>七十七 （ななじゅうなな）= 77</li>\n<li>二十 （にじゅう） = 20</li>\n</ol>\n<p>注意数字不是全用汉字写，就是全用阿拉伯数字写，因为写平假名的话会长到让你难以分辨。</p>\n<h2 id=\"超过-99-的数字\"><a href=\"#超过-99-的数字\" class=\"headerlink\" title=\"超过 99 的数字\"></a>超过 99 的数字</h2><p>下面是更大的数字：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数字</th>\n<th>100</th>\n<th>1,000</th>\n<th>10,000</th>\n<th>10^8</th>\n<th>10^12</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">漢字</td>\n<td>百</td>\n<td>千</td>\n<td>万</td>\n<td>億</td>\n<td>兆</td>\n</tr>\n<tr>\n<td align=\"center\">平假名</td>\n<td>ひゃく</td>\n<td>せん</td>\n<td>まん</td>\n<td>おく</td>\n<td>ちょう</td>\n</tr>\n</tbody></table>\n<p>注意到 10^4 和 10^8 之间，也就是万 和 億之间是空白的吗？这是因为日语里面数字是按万位分组的。超过 1万 (10,000) 以后，就要回头重来，直到 9,999 万，然后才到 1億 (100,000,000)。另外，百 是 100，千是 1,000，但再大就必须加个 1，于是剩下的单位就变成了一万 (10^4)、一億 (10^8)、一兆 (10^12)。</p>\n<p>现在你可以数到 9,999,999,999,999,999 了，把那些数字串起来就行。但问题才开始出现。你可以试着说一下「いちちょう」 、「ろくひゃく」或者「さんせん」，说快一点你就会发现很困难，因为老是要重复那些相似的元音。所以日本人决定简化，发音成「いっちょう」、 「ろっぴゃく」和「さんぜん」。不幸的是这让大家的学习变得更难了。以下是所有的细微变化。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数字</th>\n<th align=\"center\">漢字</th>\n<th align=\"center\">ひらがな</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">300</td>\n<td align=\"center\">三百</td>\n<td align=\"center\">さんびゃく</td>\n</tr>\n<tr>\n<td align=\"center\">600</td>\n<td align=\"center\">六百</td>\n<td align=\"center\">ろっぴゃく</td>\n</tr>\n<tr>\n<td align=\"center\">800</td>\n<td align=\"center\">八百</td>\n<td align=\"center\">はっぴゃく</td>\n</tr>\n<tr>\n<td align=\"center\">3000</td>\n<td align=\"center\">三千</td>\n<td align=\"center\">さんぜん</td>\n</tr>\n<tr>\n<td align=\"center\">8000</td>\n<td align=\"center\">八千</td>\n<td align=\"center\">はっせん</td>\n</tr>\n<tr>\n<td align=\"center\">10^12</td>\n<td align=\"center\">一兆</td>\n<td align=\"center\">いっちょう</td>\n</tr>\n</tbody></table>\n<ol>\n<li>四万三千七十六 （よんまんさんぜんななじゅうろく）<br>43,076</li>\n<li>七億六百二十四万九千二百二十二 （ななおくろっぴゃくにじゅうよんまんきゅうせんにひゃくにじゅうに）<br>706,249,222</li>\n<li>五百兆二万一 （ごひゃくちょうにまんいち）<br>500,000,000,020,001</li>\n</ol>\n<p>注意要么写成阿拉伯数字，要么写成汉字，否则（平假名）很难分割。</p>\n<h3 id=\"比-1-小的数\"><a href=\"#比-1-小的数\" class=\"headerlink\" title=\"比 1 小的数\"></a>比 1 小的数</h3><ol>\n<li>零 【れい】 - 零</li>\n<li>ゼロ - 零</li>\n<li>マル - 圆圈；零</li>\n<li>点 【てん】 - 点</li>\n<li>マイナス - 减</li>\n</ol>\n<p>日语里面的零是「零」，不过「ゼロ」或「マル」在现代日语里面更常用。小数点说「点」就可以，然后后面的数字挨个念。下面是例子：</p>\n<ul>\n<li>0.0021 = ゼロ、点、ゼロ、ゼロ、二、一。</li>\n</ul>\n<p>负数跟正数一样，只不过要先说一个「マイナス」。</p>\n<ul>\n<li>マイナス二十九 = -29</li>\n</ul>\n"},{"title":"Travis-CI 持续集成 hexo 到云服务器","date":"2019-09-01T10:35:40.000Z","_content":"\n> 烦：每次本地提交代码到 GitHub 上后还要自己手动同步文件到云服务器，完成所谓的部署工作有点麻烦和脱节。\n> 懒：程序员等所有自称工程师进步的先决动力，想实现一个我每次提交代码后，后面的构建，打包和部署都自动进行的流程。\n> 因为本身代码托管在 Github 上，所以就开始折腾 Travis-CI了。\n\n\n## 什么是CI\n持续集成服务（Continuous Integration，简称 CI）。\n一般指的是提供一个运行环境，自动化执行单元测试，规范检查，基于环境的构建，服务部署等流水线作业。\n持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。\n另外，这个是工程化实践，如果你觉得自己手动操作比整这些繁琐的流程方便多了，我觉得也是没问题的。\n\n## Travis CI \n[Travis CI](https://travis-ci.com/) 对 Github 上的开源项目提供免费服务，这要求必须有 Github 账号。界面也很赞~，让我想起了前东家的 PLUS 发布系统。 \n![travis](/images/travis.png)\n可以使用 github 账号直接登录， public 的仓库也直接同步到 Travis 上了， 选择想开启 Travis CI 的仓库，打开开关即可。详细配置不细说了，图形化界面，进去就知道了。\n\n### .travis.yml\nTravis-CI配置文件，存放在项目根目录下。\n支持多种语言，在配置文件中 `language: node_js`\n一个比较完整的生命周期\n\n```bash\nbefore_install\ninstall\nbefore_script\nscript\naftersuccess or afterfailure\n[OPTIONAL] before_deploy\n[OPTIONAL] deploy\n[OPTIONAL] after_deploy\nafter_script\n```\n详细配置参考 [官方文档](https://docs.travis-ci.com)\n\n## 一些准备工作\n由于后面的免密登录和部署流程会涉及一些环境和配置类的操作，这个部分介绍下前置条件。\n\n### SCP命令\nscp 命令用于linux下的跨主机之间的文件和目录复制\n在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，\n可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。\n\n```bash\nscp [可选参数] file_source file_target\n#将public目录下的所有文件复制到$DEPLOY_IP下的/path/to/blog目录中。不检查key，\nscp -o StrictHostKeyChecking=no -r public/*  user@$DEPLOY_IP:/path/to/blog/\n#可用-i指定私钥。\nscp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder\n#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录\n#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码\ncd ~/.ssh\ncat id_rsa.pub >> authorized_keys\n```\n\n### rsync 命令\n最终采用了 rsync 命令，我觉得都行，主要是这个同步成功了。\n```bash\nrsync -e \"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\" -r --delete-after --quiet $TRAVIS_BUILD_DIR/public/* root@$DEPLOY_IP:/opt/hexoBlog\n```\n\n### centOS使用gem\n因为后面要使用 `gem install travis` ,所以可能会需要 升级 ruby 和 切换 gem 源（亲测 ruby 版本低会安装报错，gem 用官方源真的是动都不动啊，太难了）\n\n\n#### 切换gem源\n```bash\n$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n$ gem sources -l\nhttps://gems.ruby-china.com\n# 确保只有 gems.ruby-china.com\n$ gem update --system \n$ gem -v\n2.6.3\n```\n#### 升级Ruby\n安装[RAM](https://rvm.io/), 一款ruby版本管理工具，类似 node 的 nvm。\n```bash\ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\ncurl -sSL https://get.rvm.io | bash -s stable\nsource /etc/profile.d/rvm.sh\nrvm -v\n```\n\n安装新版 ruby\n```bash\nrvm install 2.6\n```\n\n## 自动部署到远程服务器\n对于项目的构建来说都是 执行配置文件中写好的脚本，这个项目可能 就是 `npm install && hexo clean && hexo g`, 那么怎么执行最后一步，把文件同步传输到 云服务器上呢。 我们使用CI就是手动过程太繁琐，重复没有意义，怎么实现 `免密` 部署呢。\n\n登录到 `云服务器(centOS 7.x)`,进行如下操作\n### gem install travis 并登录\n```bash\ngem install travis #  这步失败的话请看上面关于升级ruby和切换gem源的部分\ntravis login\n```\n登录 github 账号密码，这个安全直接连接的 github 服务\n![login](/images/login.png)\n\n### 生成 ssh key 并输出对应加密的私钥到 travis \n进到云服务器对应的 git 仓库目录里\n```bash\nssh-keygen -t rsa -b 4096 -C 'build@travis-ci.org' -f ./deploy_rsa\ntravis encrypt-file deploy_rsa --add\nssh-copy-id -i deploy_rsa.pub <ssh-user>@<deploy-host>\n\nrm -f deploy_rsa deploy_rsa.pub\ngit add deploy_rsa.enc .travis.yml\n```\n项目根目录下的 `deploy_rsa.enc` 文件就是我们加密的私钥文件， `.travis.yml` 是我们的配置文件。\n$encrypted_XXXXXX_key 和 $encrypted_XXXXXXXX_iv 是travis 帮忙生成的环境变量，已经同步到 huguobo/hexo-blog 这个项目上了。\n![iv](/images/iv.png)\n\n还有一点可能会用上，因为 travis 第一次登录远程服务器会出现 SSH 主机验证，这边会有一个主机信任问题。官方给出的方案是添加 addons 配置，然后修改 .travis.yml 的相关配置\n```bash\naddons:\n  ssh_known_hosts: your-ip\n\nbefore_deploy:\n- openssl aes-256-cbc -K $encrypted_<...>_key -iv $encrypted_<...>_iv -in deploy_rsa.enc -out /tmp/deploy_rsa -d\n- eval \"$(ssh-agent -s)\"\n- chmod 600 /tmp/deploy_rsa\n- ssh-add /tmp/deploy_rsa\n```\n\n最终的部署配置, 我的是静态页面，部署就是同步文件到服务器固定目录，用的是 `rsync`，其中 -e \"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\" 参数可以跳过第一次登录的验证。\n```bash\ndeploy:\n  provider: script\n  skip_cleanup: true\n  script: rsync -e \"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\" -r --delete-after --quiet $TRAVIS_BUILD_DIR/public/* root@$DEPLOY_IP:/opt/hexoBlog\n  on:\n    branch: master\n```\n其他的 yml 配置需要自己根据情况配置了~\n\n## 我最终的 .travis.yml 配置\n\n```bash\nlanguage: node_js\n\nnode_js:\n  - \"10\"\n\ncache:\n  apt: true\n  directories:\n    - node_modules\n\naddons:\n  ssh_known_hosts: $DEPLOY_IP\n\ninstall:\n  - npm install hexo-cli@2.0.0 -g\n  - npm install\n\nscript:\n  - hexo clean \n  - hexo g\n\nbefore_deploy:\n- openssl aes-256-cbc -K $encrypted_25ad2a76f550_key -iv $encrypted_25ad2a76f550_iv -in deploy_rsa.enc -out deploy_rsa -d\n- eval \"$(ssh-agent -s)\"\n- chmod 600 deploy_rsa\n- ssh-add deploy_rsa\n\ndeploy:\n  provider: script\n  skip_cleanup: true\n  script: rsync -e \"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\" -r --delete-after --quiet $TRAVIS_BUILD_DIR/public/* root@$DEPLOY_IP:/opt/hexoBlog\n  on:\n    branch: master\n\n# deploy:\n#   provider: script\n#   skip_cleanup: true\n#   script: scp -o StrictHostKeyChecking=no -r public/*  root@$DEPLOY_IP:/opt/hexoBlog/\n#   on:\n#      branch: master\n\nbranches:\n  only:\n    - master\n\nnotifications:\n  email:\n    - huguobo2010@126.com\n  on_success: change\n  on_failure: always\n```\n\n## 总结\n折腾了大半天，终于看到了 CI-Success 的邮件, 网站也是成功的状态，云主机对应目录的文件也确实更新了。\n以后写博客 终于 只用 git push ，其他的等邮件通知了~~\n另外 文中的 id_rsa.enc 文件一开始我直接 vim 复制的都是乱码，一开始一直报错 `bad decrypt` ，后来上主机 git clone 仓库直接仓库内生成并添加的，这可能是个坑点。\n还有最后用 `rsync` 代替了 `scp`\n最后也把 openssl 放在了 before_deploy 阶段，放在 before_install也是没问题的，这些都是因人而异啦。\n![success](/images/success.png)\n\n## 参考文章\n- https://oncletom.io/2016/travis-ssh-deploy/\n- http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\n- https://gems.ruby-china.com/","source":"_posts/Travis-CI持续集成Hexo到云服务器.md","raw":"---\ntitle: Travis-CI 持续集成 hexo 到云服务器\ndate: 2019-09-01 18:35:40\ncategories: \n- devOps\ntags:\n- travis\n- CI\n- hexo\n- gem\n---\n\n> 烦：每次本地提交代码到 GitHub 上后还要自己手动同步文件到云服务器，完成所谓的部署工作有点麻烦和脱节。\n> 懒：程序员等所有自称工程师进步的先决动力，想实现一个我每次提交代码后，后面的构建，打包和部署都自动进行的流程。\n> 因为本身代码托管在 Github 上，所以就开始折腾 Travis-CI了。\n\n\n## 什么是CI\n持续集成服务（Continuous Integration，简称 CI）。\n一般指的是提供一个运行环境，自动化执行单元测试，规范检查，基于环境的构建，服务部署等流水线作业。\n持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。\n另外，这个是工程化实践，如果你觉得自己手动操作比整这些繁琐的流程方便多了，我觉得也是没问题的。\n\n## Travis CI \n[Travis CI](https://travis-ci.com/) 对 Github 上的开源项目提供免费服务，这要求必须有 Github 账号。界面也很赞~，让我想起了前东家的 PLUS 发布系统。 \n![travis](/images/travis.png)\n可以使用 github 账号直接登录， public 的仓库也直接同步到 Travis 上了， 选择想开启 Travis CI 的仓库，打开开关即可。详细配置不细说了，图形化界面，进去就知道了。\n\n### .travis.yml\nTravis-CI配置文件，存放在项目根目录下。\n支持多种语言，在配置文件中 `language: node_js`\n一个比较完整的生命周期\n\n```bash\nbefore_install\ninstall\nbefore_script\nscript\naftersuccess or afterfailure\n[OPTIONAL] before_deploy\n[OPTIONAL] deploy\n[OPTIONAL] after_deploy\nafter_script\n```\n详细配置参考 [官方文档](https://docs.travis-ci.com)\n\n## 一些准备工作\n由于后面的免密登录和部署流程会涉及一些环境和配置类的操作，这个部分介绍下前置条件。\n\n### SCP命令\nscp 命令用于linux下的跨主机之间的文件和目录复制\n在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，\n可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。\n\n```bash\nscp [可选参数] file_source file_target\n#将public目录下的所有文件复制到$DEPLOY_IP下的/path/to/blog目录中。不检查key，\nscp -o StrictHostKeyChecking=no -r public/*  user@$DEPLOY_IP:/path/to/blog/\n#可用-i指定私钥。\nscp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder\n#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录\n#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码\ncd ~/.ssh\ncat id_rsa.pub >> authorized_keys\n```\n\n### rsync 命令\n最终采用了 rsync 命令，我觉得都行，主要是这个同步成功了。\n```bash\nrsync -e \"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\" -r --delete-after --quiet $TRAVIS_BUILD_DIR/public/* root@$DEPLOY_IP:/opt/hexoBlog\n```\n\n### centOS使用gem\n因为后面要使用 `gem install travis` ,所以可能会需要 升级 ruby 和 切换 gem 源（亲测 ruby 版本低会安装报错，gem 用官方源真的是动都不动啊，太难了）\n\n\n#### 切换gem源\n```bash\n$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n$ gem sources -l\nhttps://gems.ruby-china.com\n# 确保只有 gems.ruby-china.com\n$ gem update --system \n$ gem -v\n2.6.3\n```\n#### 升级Ruby\n安装[RAM](https://rvm.io/), 一款ruby版本管理工具，类似 node 的 nvm。\n```bash\ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\ncurl -sSL https://get.rvm.io | bash -s stable\nsource /etc/profile.d/rvm.sh\nrvm -v\n```\n\n安装新版 ruby\n```bash\nrvm install 2.6\n```\n\n## 自动部署到远程服务器\n对于项目的构建来说都是 执行配置文件中写好的脚本，这个项目可能 就是 `npm install && hexo clean && hexo g`, 那么怎么执行最后一步，把文件同步传输到 云服务器上呢。 我们使用CI就是手动过程太繁琐，重复没有意义，怎么实现 `免密` 部署呢。\n\n登录到 `云服务器(centOS 7.x)`,进行如下操作\n### gem install travis 并登录\n```bash\ngem install travis #  这步失败的话请看上面关于升级ruby和切换gem源的部分\ntravis login\n```\n登录 github 账号密码，这个安全直接连接的 github 服务\n![login](/images/login.png)\n\n### 生成 ssh key 并输出对应加密的私钥到 travis \n进到云服务器对应的 git 仓库目录里\n```bash\nssh-keygen -t rsa -b 4096 -C 'build@travis-ci.org' -f ./deploy_rsa\ntravis encrypt-file deploy_rsa --add\nssh-copy-id -i deploy_rsa.pub <ssh-user>@<deploy-host>\n\nrm -f deploy_rsa deploy_rsa.pub\ngit add deploy_rsa.enc .travis.yml\n```\n项目根目录下的 `deploy_rsa.enc` 文件就是我们加密的私钥文件， `.travis.yml` 是我们的配置文件。\n$encrypted_XXXXXX_key 和 $encrypted_XXXXXXXX_iv 是travis 帮忙生成的环境变量，已经同步到 huguobo/hexo-blog 这个项目上了。\n![iv](/images/iv.png)\n\n还有一点可能会用上，因为 travis 第一次登录远程服务器会出现 SSH 主机验证，这边会有一个主机信任问题。官方给出的方案是添加 addons 配置，然后修改 .travis.yml 的相关配置\n```bash\naddons:\n  ssh_known_hosts: your-ip\n\nbefore_deploy:\n- openssl aes-256-cbc -K $encrypted_<...>_key -iv $encrypted_<...>_iv -in deploy_rsa.enc -out /tmp/deploy_rsa -d\n- eval \"$(ssh-agent -s)\"\n- chmod 600 /tmp/deploy_rsa\n- ssh-add /tmp/deploy_rsa\n```\n\n最终的部署配置, 我的是静态页面，部署就是同步文件到服务器固定目录，用的是 `rsync`，其中 -e \"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\" 参数可以跳过第一次登录的验证。\n```bash\ndeploy:\n  provider: script\n  skip_cleanup: true\n  script: rsync -e \"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\" -r --delete-after --quiet $TRAVIS_BUILD_DIR/public/* root@$DEPLOY_IP:/opt/hexoBlog\n  on:\n    branch: master\n```\n其他的 yml 配置需要自己根据情况配置了~\n\n## 我最终的 .travis.yml 配置\n\n```bash\nlanguage: node_js\n\nnode_js:\n  - \"10\"\n\ncache:\n  apt: true\n  directories:\n    - node_modules\n\naddons:\n  ssh_known_hosts: $DEPLOY_IP\n\ninstall:\n  - npm install hexo-cli@2.0.0 -g\n  - npm install\n\nscript:\n  - hexo clean \n  - hexo g\n\nbefore_deploy:\n- openssl aes-256-cbc -K $encrypted_25ad2a76f550_key -iv $encrypted_25ad2a76f550_iv -in deploy_rsa.enc -out deploy_rsa -d\n- eval \"$(ssh-agent -s)\"\n- chmod 600 deploy_rsa\n- ssh-add deploy_rsa\n\ndeploy:\n  provider: script\n  skip_cleanup: true\n  script: rsync -e \"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\" -r --delete-after --quiet $TRAVIS_BUILD_DIR/public/* root@$DEPLOY_IP:/opt/hexoBlog\n  on:\n    branch: master\n\n# deploy:\n#   provider: script\n#   skip_cleanup: true\n#   script: scp -o StrictHostKeyChecking=no -r public/*  root@$DEPLOY_IP:/opt/hexoBlog/\n#   on:\n#      branch: master\n\nbranches:\n  only:\n    - master\n\nnotifications:\n  email:\n    - huguobo2010@126.com\n  on_success: change\n  on_failure: always\n```\n\n## 总结\n折腾了大半天，终于看到了 CI-Success 的邮件, 网站也是成功的状态，云主机对应目录的文件也确实更新了。\n以后写博客 终于 只用 git push ，其他的等邮件通知了~~\n另外 文中的 id_rsa.enc 文件一开始我直接 vim 复制的都是乱码，一开始一直报错 `bad decrypt` ，后来上主机 git clone 仓库直接仓库内生成并添加的，这可能是个坑点。\n还有最后用 `rsync` 代替了 `scp`\n最后也把 openssl 放在了 before_deploy 阶段，放在 before_install也是没问题的，这些都是因人而异啦。\n![success](/images/success.png)\n\n## 参考文章\n- https://oncletom.io/2016/travis-ssh-deploy/\n- http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\n- https://gems.ruby-china.com/","slug":"Travis-CI持续集成Hexo到云服务器","published":1,"updated":"2019-09-08T02:27:03.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dl0000e80oxf0dow7q1","content":"<blockquote>\n<p>烦：每次本地提交代码到 GitHub 上后还要自己手动同步文件到云服务器，完成所谓的部署工作有点麻烦和脱节。<br>懒：程序员等所有自称工程师进步的先决动力，想实现一个我每次提交代码后，后面的构建，打包和部署都自动进行的流程。<br>因为本身代码托管在 Github 上，所以就开始折腾 Travis-CI了。</p>\n</blockquote>\n<h2 id=\"什么是CI\"><a href=\"#什么是CI\" class=\"headerlink\" title=\"什么是CI\"></a>什么是CI</h2><p>持续集成服务（Continuous Integration，简称 CI）。<br>一般指的是提供一个运行环境，自动化执行单元测试，规范检查，基于环境的构建，服务部署等流水线作业。<br>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。<br>另外，这个是工程化实践，如果你觉得自己手动操作比整这些繁琐的流程方便多了，我觉得也是没问题的。</p>\n<h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p><a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 对 Github 上的开源项目提供免费服务，这要求必须有 Github 账号。界面也很赞~，让我想起了前东家的 PLUS 发布系统。<br><img src=\"/images/travis.png\" alt=\"travis\"><br>可以使用 github 账号直接登录， public 的仓库也直接同步到 Travis 上了， 选择想开启 Travis CI 的仓库，打开开关即可。详细配置不细说了，图形化界面，进去就知道了。</p>\n<h3 id=\"travis-yml\"><a href=\"#travis-yml\" class=\"headerlink\" title=\".travis.yml\"></a>.travis.yml</h3><p>Travis-CI配置文件，存放在项目根目录下。<br>支持多种语言，在配置文件中 <code>language: node_js</code><br>一个比较完整的生命周期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install</span><br><span class=\"line\">install</span><br><span class=\"line\">before_script</span><br><span class=\"line\">script</span><br><span class=\"line\">aftersuccess or afterfailure</span><br><span class=\"line\">[OPTIONAL] before_deploy</span><br><span class=\"line\">[OPTIONAL] deploy</span><br><span class=\"line\">[OPTIONAL] after_deploy</span><br><span class=\"line\">after_script</span><br></pre></td></tr></table></figure>\n\n<p>详细配置参考 <a href=\"https://docs.travis-ci.com\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"一些准备工作\"><a href=\"#一些准备工作\" class=\"headerlink\" title=\"一些准备工作\"></a>一些准备工作</h2><p>由于后面的免密登录和部署流程会涉及一些环境和配置类的操作，这个部分介绍下前置条件。</p>\n<h3 id=\"SCP命令\"><a href=\"#SCP命令\" class=\"headerlink\" title=\"SCP命令\"></a>SCP命令</h3><p>scp 命令用于linux下的跨主机之间的文件和目录复制<br>在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，<br>可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [可选参数] file_source file_target</span><br><span class=\"line\"><span class=\"comment\">#将public目录下的所有文件复制到$DEPLOY_IP下的/path/to/blog目录中。不检查key，</span></span><br><span class=\"line\">scp -o StrictHostKeyChecking=no -r public/*  user@<span class=\"variable\">$DEPLOY_IP</span>:/path/to/blog/</span><br><span class=\"line\"><span class=\"comment\">#可用-i指定私钥。</span></span><br><span class=\"line\">scp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder</span><br><span class=\"line\"><span class=\"comment\">#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录</span></span><br><span class=\"line\"><span class=\"comment\">#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rsync-命令\"><a href=\"#rsync-命令\" class=\"headerlink\" title=\"rsync 命令\"></a>rsync 命令</h3><p>最终采用了 rsync 命令，我觉得都行，主要是这个同步成功了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -e <span class=\"string\">\"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\"</span> -r --delete-after --quiet <span class=\"variable\">$TRAVIS_BUILD_DIR</span>/public/* root@<span class=\"variable\">$DEPLOY_IP</span>:/opt/hexoBlog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"centOS使用gem\"><a href=\"#centOS使用gem\" class=\"headerlink\" title=\"centOS使用gem\"></a>centOS使用gem</h3><p>因为后面要使用 <code>gem install travis</code> ,所以可能会需要 升级 ruby 和 切换 gem 源（亲测 ruby 版本低会安装报错，gem 用官方源真的是动都不动啊，太难了）</p>\n<h4 id=\"切换gem源\"><a href=\"#切换gem源\" class=\"headerlink\" title=\"切换gem源\"></a>切换gem源</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">https://gems.ruby-china.com</span><br><span class=\"line\"><span class=\"comment\"># 确保只有 gems.ruby-china.com</span></span><br><span class=\"line\">$ gem update --system </span><br><span class=\"line\">$ gem -v</span><br><span class=\"line\">2.6.3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"升级Ruby\"><a href=\"#升级Ruby\" class=\"headerlink\" title=\"升级Ruby\"></a>升级Ruby</h4><p>安装<a href=\"https://rvm.io/\" target=\"_blank\" rel=\"noopener\">RAM</a>, 一款ruby版本管理工具，类似 node 的 nvm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class=\"line\">curl -sSL https://get.rvm.io | bash -s stable</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/rvm.sh</span><br><span class=\"line\">rvm -v</span><br></pre></td></tr></table></figure>\n\n<p>安装新版 ruby</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动部署到远程服务器\"><a href=\"#自动部署到远程服务器\" class=\"headerlink\" title=\"自动部署到远程服务器\"></a>自动部署到远程服务器</h2><p>对于项目的构建来说都是 执行配置文件中写好的脚本，这个项目可能 就是 <code>npm install &amp;&amp; hexo clean &amp;&amp; hexo g</code>, 那么怎么执行最后一步，把文件同步传输到 云服务器上呢。 我们使用CI就是手动过程太繁琐，重复没有意义，怎么实现 <code>免密</code> 部署呢。</p>\n<p>登录到 <code>云服务器(centOS 7.x)</code>,进行如下操作</p>\n<h3 id=\"gem-install-travis-并登录\"><a href=\"#gem-install-travis-并登录\" class=\"headerlink\" title=\"gem install travis 并登录\"></a>gem install travis 并登录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install travis <span class=\"comment\">#  这步失败的话请看上面关于升级ruby和切换gem源的部分</span></span><br><span class=\"line\">travis login</span><br></pre></td></tr></table></figure>\n\n<p>登录 github 账号密码，这个安全直接连接的 github 服务<br><img src=\"/images/login.png\" alt=\"login\"></p>\n<h3 id=\"生成-ssh-key-并输出对应加密的私钥到-travis\"><a href=\"#生成-ssh-key-并输出对应加密的私钥到-travis\" class=\"headerlink\" title=\"生成 ssh key 并输出对应加密的私钥到 travis\"></a>生成 ssh key 并输出对应加密的私钥到 travis</h3><p>进到云服务器对应的 git 仓库目录里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C <span class=\"string\">'build@travis-ci.org'</span> -f ./deploy_rsa</span><br><span class=\"line\">travis encrypt-file deploy_rsa --add</span><br><span class=\"line\">ssh-copy-id -i deploy_rsa.pub &lt;ssh-user&gt;@&lt;deploy-host&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -f deploy_rsa deploy_rsa.pub</span><br><span class=\"line\">git add deploy_rsa.enc .travis.yml</span><br></pre></td></tr></table></figure>\n\n<p>项目根目录下的 <code>deploy_rsa.enc</code> 文件就是我们加密的私钥文件， <code>.travis.yml</code> 是我们的配置文件。<br>$encrypted_XXXXXX_key 和 $encrypted_XXXXXXXX_iv 是travis 帮忙生成的环境变量，已经同步到 huguobo/hexo-blog 这个项目上了。<br><img src=\"/images/iv.png\" alt=\"iv\"></p>\n<p>还有一点可能会用上，因为 travis 第一次登录远程服务器会出现 SSH 主机验证，这边会有一个主机信任问题。官方给出的方案是添加 addons 配置，然后修改 .travis.yml 的相关配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: your-ip</span><br><span class=\"line\"></span><br><span class=\"line\">before_deploy:</span><br><span class=\"line\">- openssl aes-256-cbc -K <span class=\"variable\">$encrypted_</span>&lt;...&gt;_key -iv <span class=\"variable\">$encrypted_</span>&lt;...&gt;_iv -<span class=\"keyword\">in</span> deploy_rsa.enc -out /tmp/deploy_rsa -d</span><br><span class=\"line\">- <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">- chmod 600 /tmp/deploy_rsa</span><br><span class=\"line\">- ssh-add /tmp/deploy_rsa</span><br></pre></td></tr></table></figure>\n\n<p>最终的部署配置, 我的是静态页面，部署就是同步文件到服务器固定目录，用的是 <code>rsync</code>，其中 -e “ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no” 参数可以跳过第一次登录的验证。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: script</span><br><span class=\"line\">  skip_cleanup: <span class=\"literal\">true</span></span><br><span class=\"line\">  script: rsync -e <span class=\"string\">\"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\"</span> -r --delete-after --quiet <span class=\"variable\">$TRAVIS_BUILD_DIR</span>/public/* root@<span class=\"variable\">$DEPLOY_IP</span>:/opt/hexoBlog</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n\n<p>其他的 yml 配置需要自己根据情况配置了~</p>\n<h2 id=\"我最终的-travis-yml-配置\"><a href=\"#我最终的-travis-yml-配置\" class=\"headerlink\" title=\"我最终的 .travis.yml 配置\"></a>我最终的 .travis.yml 配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\"></span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - <span class=\"string\">\"10\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">cache:</span><br><span class=\"line\">  apt: <span class=\"literal\">true</span></span><br><span class=\"line\">  directories:</span><br><span class=\"line\">    - node_modules</span><br><span class=\"line\"></span><br><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: <span class=\"variable\">$DEPLOY_IP</span></span><br><span class=\"line\"></span><br><span class=\"line\">install:</span><br><span class=\"line\">  - npm install hexo-cli@2.0.0 -g</span><br><span class=\"line\">  - npm install</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo clean </span><br><span class=\"line\">  - hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">before_deploy:</span><br><span class=\"line\">- openssl aes-256-cbc -K <span class=\"variable\">$encrypted_25ad2a76f550_key</span> -iv <span class=\"variable\">$encrypted_25ad2a76f550_iv</span> -<span class=\"keyword\">in</span> deploy_rsa.enc -out deploy_rsa -d</span><br><span class=\"line\">- <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">- chmod 600 deploy_rsa</span><br><span class=\"line\">- ssh-add deploy_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: script</span><br><span class=\"line\">  skip_cleanup: <span class=\"literal\">true</span></span><br><span class=\"line\">  script: rsync -e <span class=\"string\">\"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\"</span> -r --delete-after --quiet <span class=\"variable\">$TRAVIS_BUILD_DIR</span>/public/* root@<span class=\"variable\">$DEPLOY_IP</span>:/opt/hexoBlog</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># deploy:</span></span><br><span class=\"line\"><span class=\"comment\">#   provider: script</span></span><br><span class=\"line\"><span class=\"comment\">#   skip_cleanup: true</span></span><br><span class=\"line\"><span class=\"comment\">#   script: scp -o StrictHostKeyChecking=no -r public/*  root@$DEPLOY_IP:/opt/hexoBlog/</span></span><br><span class=\"line\"><span class=\"comment\">#   on:</span></span><br><span class=\"line\"><span class=\"comment\">#      branch: master</span></span><br><span class=\"line\"></span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\"></span><br><span class=\"line\">notifications:</span><br><span class=\"line\">  email:</span><br><span class=\"line\">    - huguobo2010@126.com</span><br><span class=\"line\">  on_success: change</span><br><span class=\"line\">  on_failure: always</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>折腾了大半天，终于看到了 CI-Success 的邮件, 网站也是成功的状态，云主机对应目录的文件也确实更新了。<br>以后写博客 终于 只用 git push ，其他的等邮件通知了~~<br>另外 文中的 id_rsa.enc 文件一开始我直接 vim 复制的都是乱码，一开始一直报错 <code>bad decrypt</code> ，后来上主机 git clone 仓库直接仓库内生成并添加的，这可能是个坑点。<br>还有最后用 <code>rsync</code> 代替了 <code>scp</code><br>最后也把 openssl 放在了 before_deploy 阶段，放在 before_install也是没问题的，这些都是因人而异啦。<br><img src=\"/images/success.png\" alt=\"success\"></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://oncletom.io/2016/travis-ssh-deploy/\" target=\"_blank\" rel=\"noopener\">https://oncletom.io/2016/travis-ssh-deploy/</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html</a></li>\n<li><a href=\"https://gems.ruby-china.com/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.com/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>烦：每次本地提交代码到 GitHub 上后还要自己手动同步文件到云服务器，完成所谓的部署工作有点麻烦和脱节。<br>懒：程序员等所有自称工程师进步的先决动力，想实现一个我每次提交代码后，后面的构建，打包和部署都自动进行的流程。<br>因为本身代码托管在 Github 上，所以就开始折腾 Travis-CI了。</p>\n</blockquote>\n<h2 id=\"什么是CI\"><a href=\"#什么是CI\" class=\"headerlink\" title=\"什么是CI\"></a>什么是CI</h2><p>持续集成服务（Continuous Integration，简称 CI）。<br>一般指的是提供一个运行环境，自动化执行单元测试，规范检查，基于环境的构建，服务部署等流水线作业。<br>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。<br>另外，这个是工程化实践，如果你觉得自己手动操作比整这些繁琐的流程方便多了，我觉得也是没问题的。</p>\n<h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p><a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"noopener\">Travis CI</a> 对 Github 上的开源项目提供免费服务，这要求必须有 Github 账号。界面也很赞~，让我想起了前东家的 PLUS 发布系统。<br><img src=\"/images/travis.png\" alt=\"travis\"><br>可以使用 github 账号直接登录， public 的仓库也直接同步到 Travis 上了， 选择想开启 Travis CI 的仓库，打开开关即可。详细配置不细说了，图形化界面，进去就知道了。</p>\n<h3 id=\"travis-yml\"><a href=\"#travis-yml\" class=\"headerlink\" title=\".travis.yml\"></a>.travis.yml</h3><p>Travis-CI配置文件，存放在项目根目录下。<br>支持多种语言，在配置文件中 <code>language: node_js</code><br>一个比较完整的生命周期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install</span><br><span class=\"line\">install</span><br><span class=\"line\">before_script</span><br><span class=\"line\">script</span><br><span class=\"line\">aftersuccess or afterfailure</span><br><span class=\"line\">[OPTIONAL] before_deploy</span><br><span class=\"line\">[OPTIONAL] deploy</span><br><span class=\"line\">[OPTIONAL] after_deploy</span><br><span class=\"line\">after_script</span><br></pre></td></tr></table></figure>\n\n<p>详细配置参考 <a href=\"https://docs.travis-ci.com\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"一些准备工作\"><a href=\"#一些准备工作\" class=\"headerlink\" title=\"一些准备工作\"></a>一些准备工作</h2><p>由于后面的免密登录和部署流程会涉及一些环境和配置类的操作，这个部分介绍下前置条件。</p>\n<h3 id=\"SCP命令\"><a href=\"#SCP命令\" class=\"headerlink\" title=\"SCP命令\"></a>SCP命令</h3><p>scp 命令用于linux下的跨主机之间的文件和目录复制<br>在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，<br>可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [可选参数] file_source file_target</span><br><span class=\"line\"><span class=\"comment\">#将public目录下的所有文件复制到$DEPLOY_IP下的/path/to/blog目录中。不检查key，</span></span><br><span class=\"line\">scp -o StrictHostKeyChecking=no -r public/*  user@<span class=\"variable\">$DEPLOY_IP</span>:/path/to/blog/</span><br><span class=\"line\"><span class=\"comment\">#可用-i指定私钥。</span></span><br><span class=\"line\">scp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder</span><br><span class=\"line\"><span class=\"comment\">#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录</span></span><br><span class=\"line\"><span class=\"comment\">#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rsync-命令\"><a href=\"#rsync-命令\" class=\"headerlink\" title=\"rsync 命令\"></a>rsync 命令</h3><p>最终采用了 rsync 命令，我觉得都行，主要是这个同步成功了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -e <span class=\"string\">\"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\"</span> -r --delete-after --quiet <span class=\"variable\">$TRAVIS_BUILD_DIR</span>/public/* root@<span class=\"variable\">$DEPLOY_IP</span>:/opt/hexoBlog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"centOS使用gem\"><a href=\"#centOS使用gem\" class=\"headerlink\" title=\"centOS使用gem\"></a>centOS使用gem</h3><p>因为后面要使用 <code>gem install travis</code> ,所以可能会需要 升级 ruby 和 切换 gem 源（亲测 ruby 版本低会安装报错，gem 用官方源真的是动都不动啊，太难了）</p>\n<h4 id=\"切换gem源\"><a href=\"#切换gem源\" class=\"headerlink\" title=\"切换gem源\"></a>切换gem源</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">https://gems.ruby-china.com</span><br><span class=\"line\"><span class=\"comment\"># 确保只有 gems.ruby-china.com</span></span><br><span class=\"line\">$ gem update --system </span><br><span class=\"line\">$ gem -v</span><br><span class=\"line\">2.6.3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"升级Ruby\"><a href=\"#升级Ruby\" class=\"headerlink\" title=\"升级Ruby\"></a>升级Ruby</h4><p>安装<a href=\"https://rvm.io/\" target=\"_blank\" rel=\"noopener\">RAM</a>, 一款ruby版本管理工具，类似 node 的 nvm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class=\"line\">curl -sSL https://get.rvm.io | bash -s stable</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/rvm.sh</span><br><span class=\"line\">rvm -v</span><br></pre></td></tr></table></figure>\n\n<p>安装新版 ruby</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动部署到远程服务器\"><a href=\"#自动部署到远程服务器\" class=\"headerlink\" title=\"自动部署到远程服务器\"></a>自动部署到远程服务器</h2><p>对于项目的构建来说都是 执行配置文件中写好的脚本，这个项目可能 就是 <code>npm install &amp;&amp; hexo clean &amp;&amp; hexo g</code>, 那么怎么执行最后一步，把文件同步传输到 云服务器上呢。 我们使用CI就是手动过程太繁琐，重复没有意义，怎么实现 <code>免密</code> 部署呢。</p>\n<p>登录到 <code>云服务器(centOS 7.x)</code>,进行如下操作</p>\n<h3 id=\"gem-install-travis-并登录\"><a href=\"#gem-install-travis-并登录\" class=\"headerlink\" title=\"gem install travis 并登录\"></a>gem install travis 并登录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install travis <span class=\"comment\">#  这步失败的话请看上面关于升级ruby和切换gem源的部分</span></span><br><span class=\"line\">travis login</span><br></pre></td></tr></table></figure>\n\n<p>登录 github 账号密码，这个安全直接连接的 github 服务<br><img src=\"/images/login.png\" alt=\"login\"></p>\n<h3 id=\"生成-ssh-key-并输出对应加密的私钥到-travis\"><a href=\"#生成-ssh-key-并输出对应加密的私钥到-travis\" class=\"headerlink\" title=\"生成 ssh key 并输出对应加密的私钥到 travis\"></a>生成 ssh key 并输出对应加密的私钥到 travis</h3><p>进到云服务器对应的 git 仓库目录里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C <span class=\"string\">'build@travis-ci.org'</span> -f ./deploy_rsa</span><br><span class=\"line\">travis encrypt-file deploy_rsa --add</span><br><span class=\"line\">ssh-copy-id -i deploy_rsa.pub &lt;ssh-user&gt;@&lt;deploy-host&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -f deploy_rsa deploy_rsa.pub</span><br><span class=\"line\">git add deploy_rsa.enc .travis.yml</span><br></pre></td></tr></table></figure>\n\n<p>项目根目录下的 <code>deploy_rsa.enc</code> 文件就是我们加密的私钥文件， <code>.travis.yml</code> 是我们的配置文件。<br>$encrypted_XXXXXX_key 和 $encrypted_XXXXXXXX_iv 是travis 帮忙生成的环境变量，已经同步到 huguobo/hexo-blog 这个项目上了。<br><img src=\"/images/iv.png\" alt=\"iv\"></p>\n<p>还有一点可能会用上，因为 travis 第一次登录远程服务器会出现 SSH 主机验证，这边会有一个主机信任问题。官方给出的方案是添加 addons 配置，然后修改 .travis.yml 的相关配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: your-ip</span><br><span class=\"line\"></span><br><span class=\"line\">before_deploy:</span><br><span class=\"line\">- openssl aes-256-cbc -K <span class=\"variable\">$encrypted_</span>&lt;...&gt;_key -iv <span class=\"variable\">$encrypted_</span>&lt;...&gt;_iv -<span class=\"keyword\">in</span> deploy_rsa.enc -out /tmp/deploy_rsa -d</span><br><span class=\"line\">- <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">- chmod 600 /tmp/deploy_rsa</span><br><span class=\"line\">- ssh-add /tmp/deploy_rsa</span><br></pre></td></tr></table></figure>\n\n<p>最终的部署配置, 我的是静态页面，部署就是同步文件到服务器固定目录，用的是 <code>rsync</code>，其中 -e “ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no” 参数可以跳过第一次登录的验证。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: script</span><br><span class=\"line\">  skip_cleanup: <span class=\"literal\">true</span></span><br><span class=\"line\">  script: rsync -e <span class=\"string\">\"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\"</span> -r --delete-after --quiet <span class=\"variable\">$TRAVIS_BUILD_DIR</span>/public/* root@<span class=\"variable\">$DEPLOY_IP</span>:/opt/hexoBlog</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n\n<p>其他的 yml 配置需要自己根据情况配置了~</p>\n<h2 id=\"我最终的-travis-yml-配置\"><a href=\"#我最终的-travis-yml-配置\" class=\"headerlink\" title=\"我最终的 .travis.yml 配置\"></a>我最终的 .travis.yml 配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\"></span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - <span class=\"string\">\"10\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">cache:</span><br><span class=\"line\">  apt: <span class=\"literal\">true</span></span><br><span class=\"line\">  directories:</span><br><span class=\"line\">    - node_modules</span><br><span class=\"line\"></span><br><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: <span class=\"variable\">$DEPLOY_IP</span></span><br><span class=\"line\"></span><br><span class=\"line\">install:</span><br><span class=\"line\">  - npm install hexo-cli@2.0.0 -g</span><br><span class=\"line\">  - npm install</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo clean </span><br><span class=\"line\">  - hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">before_deploy:</span><br><span class=\"line\">- openssl aes-256-cbc -K <span class=\"variable\">$encrypted_25ad2a76f550_key</span> -iv <span class=\"variable\">$encrypted_25ad2a76f550_iv</span> -<span class=\"keyword\">in</span> deploy_rsa.enc -out deploy_rsa -d</span><br><span class=\"line\">- <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">- chmod 600 deploy_rsa</span><br><span class=\"line\">- ssh-add deploy_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  provider: script</span><br><span class=\"line\">  skip_cleanup: <span class=\"literal\">true</span></span><br><span class=\"line\">  script: rsync -e <span class=\"string\">\"ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\"</span> -r --delete-after --quiet <span class=\"variable\">$TRAVIS_BUILD_DIR</span>/public/* root@<span class=\"variable\">$DEPLOY_IP</span>:/opt/hexoBlog</span><br><span class=\"line\">  on:</span><br><span class=\"line\">    branch: master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># deploy:</span></span><br><span class=\"line\"><span class=\"comment\">#   provider: script</span></span><br><span class=\"line\"><span class=\"comment\">#   skip_cleanup: true</span></span><br><span class=\"line\"><span class=\"comment\">#   script: scp -o StrictHostKeyChecking=no -r public/*  root@$DEPLOY_IP:/opt/hexoBlog/</span></span><br><span class=\"line\"><span class=\"comment\">#   on:</span></span><br><span class=\"line\"><span class=\"comment\">#      branch: master</span></span><br><span class=\"line\"></span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\"></span><br><span class=\"line\">notifications:</span><br><span class=\"line\">  email:</span><br><span class=\"line\">    - huguobo2010@126.com</span><br><span class=\"line\">  on_success: change</span><br><span class=\"line\">  on_failure: always</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>折腾了大半天，终于看到了 CI-Success 的邮件, 网站也是成功的状态，云主机对应目录的文件也确实更新了。<br>以后写博客 终于 只用 git push ，其他的等邮件通知了~~<br>另外 文中的 id_rsa.enc 文件一开始我直接 vim 复制的都是乱码，一开始一直报错 <code>bad decrypt</code> ，后来上主机 git clone 仓库直接仓库内生成并添加的，这可能是个坑点。<br>还有最后用 <code>rsync</code> 代替了 <code>scp</code><br>最后也把 openssl 放在了 before_deploy 阶段，放在 before_install也是没问题的，这些都是因人而异啦。<br><img src=\"/images/success.png\" alt=\"success\"></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://oncletom.io/2016/travis-ssh-deploy/\" target=\"_blank\" rel=\"noopener\">https://oncletom.io/2016/travis-ssh-deploy/</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html</a></li>\n<li><a href=\"https://gems.ruby-china.com/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.com/</a></li>\n</ul>\n"},{"title":"日语基础学习3-状态表示","date":"2020-08-04T13:55:30.000Z","_content":"\n> 在名词或者な类形容词后面增加一些后缀来表示肯定、否定、过去以及过去否定等状态。\n\n\n\n##  肯定（陈述）状态\n\n*用「だ」表示某物的状态*\n\n### 示例\n\n- 人だ (是人)\n- 学生だ （是学生）\n- 元気だ　（是挺好）\n\n注意：**表示状态的时候可以把「だ」都省去！**\n\n那用「だ」还有什么意义吗？主要区别是陈述句看起来语气更重，这样显得……更陈述一点，所以生活里你会发现男性更倾向于在句末加上「だ」。\n  \n## 否定状态\n\n我们可以把一个名词或形容词活用为它的否定式或过去形来表示它不是什么，或曾经是什么。这就不像陈述句追加「だ」那么直接了，一开始可能觉得难掌握。后面我们会学到如何通过在句末添加「だ」来陈述这些状态。\n\n*把「じゃない」或者 「ではない」加在名词或者な形容词后面来表示否定*\n\n### 示例\n\n- 学生じゃない　（不是学生）\n- 友達じゃない    （不是朋友）\n- 元気じゃない    （不好）\n\n\n## 过去状态\n\n*要想表达某物曾经是什么，就把「だった」加在名词或者な形容词后面。*\n\n### 示例\n\n- 学生だった  (曾经是学生)\n- 友達だった （曾经是朋友）\n- 元気だった  （之前很好）\n\n\n## 过去否定状态\n\n*要想表达否定过去形（曾经不是），把「じゃない」或 「ではない」 里面的「い」去掉，然后再加上「かった」。*\n\n### 示例\n\n- 学生*じゃなかった*  (曾经不是学生)\n- 友達*じゃなかった* （曾经不是朋友）\n- 元気*じゃなかった*  （之前不好）\n\n\n## 总结\n\n|        |    肯定    | 否定       |                  |              |\n| :----: | :--------: | ---------- | ---------------- | ------------ |\n| 非过去 | 学生（だ） | 是学生     | 学生じゃない     | 不是学生     |\n|  过去  | 学生だった | 以前是学生 | 学生じゃなかった | 以前不是学生 |\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/jp-learn3.md","raw":"---\ntitle: 日语基础学习3-状态表示\ndate: 2020-08-04 21:55:30\ncategories: \n- 日语\ntags:\n- 日语\n- 状态\n---\n\n> 在名词或者な类形容词后面增加一些后缀来表示肯定、否定、过去以及过去否定等状态。\n\n\n\n##  肯定（陈述）状态\n\n*用「だ」表示某物的状态*\n\n### 示例\n\n- 人だ (是人)\n- 学生だ （是学生）\n- 元気だ　（是挺好）\n\n注意：**表示状态的时候可以把「だ」都省去！**\n\n那用「だ」还有什么意义吗？主要区别是陈述句看起来语气更重，这样显得……更陈述一点，所以生活里你会发现男性更倾向于在句末加上「だ」。\n  \n## 否定状态\n\n我们可以把一个名词或形容词活用为它的否定式或过去形来表示它不是什么，或曾经是什么。这就不像陈述句追加「だ」那么直接了，一开始可能觉得难掌握。后面我们会学到如何通过在句末添加「だ」来陈述这些状态。\n\n*把「じゃない」或者 「ではない」加在名词或者な形容词后面来表示否定*\n\n### 示例\n\n- 学生じゃない　（不是学生）\n- 友達じゃない    （不是朋友）\n- 元気じゃない    （不好）\n\n\n## 过去状态\n\n*要想表达某物曾经是什么，就把「だった」加在名词或者な形容词后面。*\n\n### 示例\n\n- 学生だった  (曾经是学生)\n- 友達だった （曾经是朋友）\n- 元気だった  （之前很好）\n\n\n## 过去否定状态\n\n*要想表达否定过去形（曾经不是），把「じゃない」或 「ではない」 里面的「い」去掉，然后再加上「かった」。*\n\n### 示例\n\n- 学生*じゃなかった*  (曾经不是学生)\n- 友達*じゃなかった* （曾经不是朋友）\n- 元気*じゃなかった*  （之前不好）\n\n\n## 总结\n\n|        |    肯定    | 否定       |                  |              |\n| :----: | :--------: | ---------- | ---------------- | ------------ |\n| 非过去 | 学生（だ） | 是学生     | 学生じゃない     | 不是学生     |\n|  过去  | 学生だった | 以前是学生 | 学生じゃなかった | 以前不是学生 |\n\n\n\n\n\n\n\n\n\n\n\n","slug":"jp-learn3","published":1,"updated":"2020-09-03T07:08:11.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dl2000g80oxoxbdjm6d","content":"<blockquote>\n<p>在名词或者な类形容词后面增加一些后缀来表示肯定、否定、过去以及过去否定等状态。</p>\n</blockquote>\n<h2 id=\"肯定（陈述）状态\"><a href=\"#肯定（陈述）状态\" class=\"headerlink\" title=\"肯定（陈述）状态\"></a>肯定（陈述）状态</h2><p><em>用「だ」表示某物的状态</em></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>人だ (是人)</li>\n<li>学生だ （是学生）</li>\n<li>元気だ　（是挺好）</li>\n</ul>\n<p>注意：<strong>表示状态的时候可以把「だ」都省去！</strong></p>\n<p>那用「だ」还有什么意义吗？主要区别是陈述句看起来语气更重，这样显得……更陈述一点，所以生活里你会发现男性更倾向于在句末加上「だ」。</p>\n<h2 id=\"否定状态\"><a href=\"#否定状态\" class=\"headerlink\" title=\"否定状态\"></a>否定状态</h2><p>我们可以把一个名词或形容词活用为它的否定式或过去形来表示它不是什么，或曾经是什么。这就不像陈述句追加「だ」那么直接了，一开始可能觉得难掌握。后面我们会学到如何通过在句末添加「だ」来陈述这些状态。</p>\n<p><em>把「じゃない」或者 「ではない」加在名词或者な形容词后面来表示否定</em></p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>学生じゃない　（不是学生）</li>\n<li>友達じゃない    （不是朋友）</li>\n<li>元気じゃない    （不好）</li>\n</ul>\n<h2 id=\"过去状态\"><a href=\"#过去状态\" class=\"headerlink\" title=\"过去状态\"></a>过去状态</h2><p><em>要想表达某物曾经是什么，就把「だった」加在名词或者な形容词后面。</em></p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>学生だった  (曾经是学生)</li>\n<li>友達だった （曾经是朋友）</li>\n<li>元気だった  （之前很好）</li>\n</ul>\n<h2 id=\"过去否定状态\"><a href=\"#过去否定状态\" class=\"headerlink\" title=\"过去否定状态\"></a>过去否定状态</h2><p><em>要想表达否定过去形（曾经不是），把「じゃない」或 「ではない」 里面的「い」去掉，然后再加上「かった」。</em></p>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>学生<em>じゃなかった</em>  (曾经不是学生)</li>\n<li>友達<em>じゃなかった</em> （曾经不是朋友）</li>\n<li>元気<em>じゃなかった</em>  （之前不好）</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">肯定</th>\n<th>否定</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">非过去</td>\n<td align=\"center\">学生（だ）</td>\n<td>是学生</td>\n<td>学生じゃない</td>\n<td>不是学生</td>\n</tr>\n<tr>\n<td align=\"center\">过去</td>\n<td align=\"center\">学生だった</td>\n<td>以前是学生</td>\n<td>学生じゃなかった</td>\n<td>以前不是学生</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在名词或者な类形容词后面增加一些后缀来表示肯定、否定、过去以及过去否定等状态。</p>\n</blockquote>\n<h2 id=\"肯定（陈述）状态\"><a href=\"#肯定（陈述）状态\" class=\"headerlink\" title=\"肯定（陈述）状态\"></a>肯定（陈述）状态</h2><p><em>用「だ」表示某物的状态</em></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>人だ (是人)</li>\n<li>学生だ （是学生）</li>\n<li>元気だ　（是挺好）</li>\n</ul>\n<p>注意：<strong>表示状态的时候可以把「だ」都省去！</strong></p>\n<p>那用「だ」还有什么意义吗？主要区别是陈述句看起来语气更重，这样显得……更陈述一点，所以生活里你会发现男性更倾向于在句末加上「だ」。</p>\n<h2 id=\"否定状态\"><a href=\"#否定状态\" class=\"headerlink\" title=\"否定状态\"></a>否定状态</h2><p>我们可以把一个名词或形容词活用为它的否定式或过去形来表示它不是什么，或曾经是什么。这就不像陈述句追加「だ」那么直接了，一开始可能觉得难掌握。后面我们会学到如何通过在句末添加「だ」来陈述这些状态。</p>\n<p><em>把「じゃない」或者 「ではない」加在名词或者な形容词后面来表示否定</em></p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>学生じゃない　（不是学生）</li>\n<li>友達じゃない    （不是朋友）</li>\n<li>元気じゃない    （不好）</li>\n</ul>\n<h2 id=\"过去状态\"><a href=\"#过去状态\" class=\"headerlink\" title=\"过去状态\"></a>过去状态</h2><p><em>要想表达某物曾经是什么，就把「だった」加在名词或者な形容词后面。</em></p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>学生だった  (曾经是学生)</li>\n<li>友達だった （曾经是朋友）</li>\n<li>元気だった  （之前很好）</li>\n</ul>\n<h2 id=\"过去否定状态\"><a href=\"#过去否定状态\" class=\"headerlink\" title=\"过去否定状态\"></a>过去否定状态</h2><p><em>要想表达否定过去形（曾经不是），把「じゃない」或 「ではない」 里面的「い」去掉，然后再加上「かった」。</em></p>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>学生<em>じゃなかった</em>  (曾经不是学生)</li>\n<li>友達<em>じゃなかった</em> （曾经不是朋友）</li>\n<li>元気<em>じゃなかった</em>  （之前不好）</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">肯定</th>\n<th>否定</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">非过去</td>\n<td align=\"center\">学生（だ）</td>\n<td>是学生</td>\n<td>学生じゃない</td>\n<td>不是学生</td>\n</tr>\n<tr>\n<td align=\"center\">过去</td>\n<td align=\"center\">学生だった</td>\n<td>以前是学生</td>\n<td>学生じゃなかった</td>\n<td>以前不是学生</td>\n</tr>\n</tbody></table>\n"},{"title":"不懂就问系列-Canvas和WebGL是啥关系？","date":"2019-10-15T02:52:14.000Z","_content":"\n> 一直以来我都有一个很大的弱点，就是很多东西不会，但是不敢问，怕别人觉得问题太可笑，结果就是不会的的东西大部分都还不会。如何解决呢，我认为作为一个程序员，不懂就问，厚脸皮的提出来，这是一项很基本的能力，故开启这个“不懂就问系列”，希望对自己甚至对别人有所帮助。\n\n最近学习制作 [《一镜到底》](https://github.com/huguobo/One-Take) 的h5页面，用到了PIXI.JS，发现它对于自己的描述是这样的：\n> PixiJS is a rendering library that will allow you to create rich, interactive graphics, cross platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.PixiJS has full WebGL support and seamlessly falls back to HTML5's canvas if needed. \n\nPIXI全面支持 WebGL 但是作为兜底会使用 Canvas，就是说他们两是一个层面的东西，有点晕了，查查资料，问问大佬搞清楚一点吧LOL\n\n## Canvas\n先说下Canvas，Canvas（翻译为画布）是HTML5的一个标签，Canvas提供了给JavaScript在浏览器内绘制的能力。\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Canvas</title>\n</head>\n<body onload=\"main()\">\n    <canvas id=\"container\" width=\"1280px\" height=\"720px\"></canvas>\n</body>\n</html>\n<script type=\"text/javascript\" src=\"main.js\"></script>\n```\n\n```JavaScript\nfunction main() {\n    var canvas = document.getElementById(\"container\");\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = \"rgba(0, 0, 255, 1.0)\";\n    context.fillRect(120, 10, 150, 150);\n}\n```\n\nCanvas只支持一些简单的2D绘制，不支持3D，更重要的是性能有限，WebGL弥补了这两方便的不足。\n\n## WebGL\n说 `WEBGL` 之前需要先了解下 [OpenGL](https://zh.wikipedia.org/wiki/OpenGL), 既然涉及到绘图能力，底层方面来说实际上是与显卡的交互，OpenGL是 底层的驱动级的图形接口（是显卡有直接关系的，类似于DirectX（玩PC游戏应该都接触过这个）。\n但是我们想在浏览器里用JS使用这方面的图形渲染能力呢？这时候出现了WebGL，WebGL（全写Web Graphics Library）是一种3D绘图标准，WebGL允许工程师使用JS去调用部分封装过的 OpenGL ES2.0 标准接口去提供硬件级别的3D图形加速功能\n\n最简单的webgl使用方法，\n```JavaScript\nfunction main() {\n    var canvas = document.getElementById(\"container\");\n    var gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);// 指定清空canvas的颜色\n    gl.clear(gl.COLOR_BUFFER_BIT);// 清空canvas\n}\n```\n## 关系总结\nCanvas就是画布，只要浏览器支持，可以在canvas上获取2D上下文和3D上下文，其中3D上下文一般就是WebGL，当然WebGL也能用于2D绘制，并且WebGL提供硬件渲染加速，性能更好。\n但是 WEBGL 的支持性[caniuse](https://caniuse.com/#search=webgl)还不是特别好，所以在不支持 WebGL 的情况下，只能使用 Canvas 2D api，注意这里的降级不是降到 Canvas，它只是一个画布元素，而是降级使用 浏览器提供的 **Canvas 2D Api**，这就是很多库的兜底策略，如 Three.js, PIXI 等\n\n\n\n\n\n\n\n","source":"_posts/canvas.md","raw":"---\ntitle: 不懂就问系列-Canvas和WebGL是啥关系？\ndate: 2019-10-15 10:52:14\ncategories: \n- WebGL\ntags:\n- Canvas\n- WebGL\n- 不懂就问\n---\n\n> 一直以来我都有一个很大的弱点，就是很多东西不会，但是不敢问，怕别人觉得问题太可笑，结果就是不会的的东西大部分都还不会。如何解决呢，我认为作为一个程序员，不懂就问，厚脸皮的提出来，这是一项很基本的能力，故开启这个“不懂就问系列”，希望对自己甚至对别人有所帮助。\n\n最近学习制作 [《一镜到底》](https://github.com/huguobo/One-Take) 的h5页面，用到了PIXI.JS，发现它对于自己的描述是这样的：\n> PixiJS is a rendering library that will allow you to create rich, interactive graphics, cross platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.PixiJS has full WebGL support and seamlessly falls back to HTML5's canvas if needed. \n\nPIXI全面支持 WebGL 但是作为兜底会使用 Canvas，就是说他们两是一个层面的东西，有点晕了，查查资料，问问大佬搞清楚一点吧LOL\n\n## Canvas\n先说下Canvas，Canvas（翻译为画布）是HTML5的一个标签，Canvas提供了给JavaScript在浏览器内绘制的能力。\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Canvas</title>\n</head>\n<body onload=\"main()\">\n    <canvas id=\"container\" width=\"1280px\" height=\"720px\"></canvas>\n</body>\n</html>\n<script type=\"text/javascript\" src=\"main.js\"></script>\n```\n\n```JavaScript\nfunction main() {\n    var canvas = document.getElementById(\"container\");\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = \"rgba(0, 0, 255, 1.0)\";\n    context.fillRect(120, 10, 150, 150);\n}\n```\n\nCanvas只支持一些简单的2D绘制，不支持3D，更重要的是性能有限，WebGL弥补了这两方便的不足。\n\n## WebGL\n说 `WEBGL` 之前需要先了解下 [OpenGL](https://zh.wikipedia.org/wiki/OpenGL), 既然涉及到绘图能力，底层方面来说实际上是与显卡的交互，OpenGL是 底层的驱动级的图形接口（是显卡有直接关系的，类似于DirectX（玩PC游戏应该都接触过这个）。\n但是我们想在浏览器里用JS使用这方面的图形渲染能力呢？这时候出现了WebGL，WebGL（全写Web Graphics Library）是一种3D绘图标准，WebGL允许工程师使用JS去调用部分封装过的 OpenGL ES2.0 标准接口去提供硬件级别的3D图形加速功能\n\n最简单的webgl使用方法，\n```JavaScript\nfunction main() {\n    var canvas = document.getElementById(\"container\");\n    var gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);// 指定清空canvas的颜色\n    gl.clear(gl.COLOR_BUFFER_BIT);// 清空canvas\n}\n```\n## 关系总结\nCanvas就是画布，只要浏览器支持，可以在canvas上获取2D上下文和3D上下文，其中3D上下文一般就是WebGL，当然WebGL也能用于2D绘制，并且WebGL提供硬件渲染加速，性能更好。\n但是 WEBGL 的支持性[caniuse](https://caniuse.com/#search=webgl)还不是特别好，所以在不支持 WebGL 的情况下，只能使用 Canvas 2D api，注意这里的降级不是降到 Canvas，它只是一个画布元素，而是降级使用 浏览器提供的 **Canvas 2D Api**，这就是很多库的兜底策略，如 Three.js, PIXI 等\n\n\n\n\n\n\n\n","slug":"canvas","published":1,"updated":"2019-10-15T03:41:22.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dl6000l80oxefq5r0dx","content":"<blockquote>\n<p>一直以来我都有一个很大的弱点，就是很多东西不会，但是不敢问，怕别人觉得问题太可笑，结果就是不会的的东西大部分都还不会。如何解决呢，我认为作为一个程序员，不懂就问，厚脸皮的提出来，这是一项很基本的能力，故开启这个“不懂就问系列”，希望对自己甚至对别人有所帮助。</p>\n</blockquote>\n<p>最近学习制作 <a href=\"https://github.com/huguobo/One-Take\" target=\"_blank\" rel=\"noopener\">《一镜到底》</a> 的h5页面，用到了PIXI.JS，发现它对于自己的描述是这样的：</p>\n<blockquote>\n<p>PixiJS is a rendering library that will allow you to create rich, interactive graphics, cross platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.PixiJS has full WebGL support and seamlessly falls back to HTML5’s canvas if needed. </p>\n</blockquote>\n<p>PIXI全面支持 WebGL 但是作为兜底会使用 Canvas，就是说他们两是一个层面的东西，有点晕了，查查资料，问问大佬搞清楚一点吧LOL</p>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><p>先说下Canvas，Canvas（翻译为画布）是HTML5的一个标签，Canvas提供了给JavaScript在浏览器内绘制的能力。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Canvas<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"main()\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1280px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"720px\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"main.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">    context.fillStyle = <span class=\"string\">\"rgba(0, 0, 255, 1.0)\"</span>;</span><br><span class=\"line\">    context.fillRect(<span class=\"number\">120</span>, <span class=\"number\">10</span>, <span class=\"number\">150</span>, <span class=\"number\">150</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Canvas只支持一些简单的2D绘制，不支持3D，更重要的是性能有限，WebGL弥补了这两方便的不足。</p>\n<h2 id=\"WebGL\"><a href=\"#WebGL\" class=\"headerlink\" title=\"WebGL\"></a>WebGL</h2><p>说 <code>WEBGL</code> 之前需要先了解下 <a href=\"https://zh.wikipedia.org/wiki/OpenGL\" target=\"_blank\" rel=\"noopener\">OpenGL</a>, 既然涉及到绘图能力，底层方面来说实际上是与显卡的交互，OpenGL是 底层的驱动级的图形接口（是显卡有直接关系的，类似于DirectX（玩PC游戏应该都接触过这个）。<br>但是我们想在浏览器里用JS使用这方面的图形渲染能力呢？这时候出现了WebGL，WebGL（全写Web Graphics Library）是一种3D绘图标准，WebGL允许工程师使用JS去调用部分封装过的 OpenGL ES2.0 标准接口去提供硬件级别的3D图形加速功能</p>\n<p>最简单的webgl使用方法，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gl = canvas.getContext(<span class=\"string\">\"webgl\"</span>) || canvas.getContext(<span class=\"string\">\"experimental-webgl\"</span>);</span><br><span class=\"line\">    gl.clearColor(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);<span class=\"comment\">// 指定清空canvas的颜色</span></span><br><span class=\"line\">    gl.clear(gl.COLOR_BUFFER_BIT);<span class=\"comment\">// 清空canvas</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关系总结\"><a href=\"#关系总结\" class=\"headerlink\" title=\"关系总结\"></a>关系总结</h2><p>Canvas就是画布，只要浏览器支持，可以在canvas上获取2D上下文和3D上下文，其中3D上下文一般就是WebGL，当然WebGL也能用于2D绘制，并且WebGL提供硬件渲染加速，性能更好。<br>但是 WEBGL 的支持性<a href=\"https://caniuse.com/#search=webgl\" target=\"_blank\" rel=\"noopener\">caniuse</a>还不是特别好，所以在不支持 WebGL 的情况下，只能使用 Canvas 2D api，注意这里的降级不是降到 Canvas，它只是一个画布元素，而是降级使用 浏览器提供的 <strong>Canvas 2D Api</strong>，这就是很多库的兜底策略，如 Three.js, PIXI 等</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一直以来我都有一个很大的弱点，就是很多东西不会，但是不敢问，怕别人觉得问题太可笑，结果就是不会的的东西大部分都还不会。如何解决呢，我认为作为一个程序员，不懂就问，厚脸皮的提出来，这是一项很基本的能力，故开启这个“不懂就问系列”，希望对自己甚至对别人有所帮助。</p>\n</blockquote>\n<p>最近学习制作 <a href=\"https://github.com/huguobo/One-Take\" target=\"_blank\" rel=\"noopener\">《一镜到底》</a> 的h5页面，用到了PIXI.JS，发现它对于自己的描述是这样的：</p>\n<blockquote>\n<p>PixiJS is a rendering library that will allow you to create rich, interactive graphics, cross platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.PixiJS has full WebGL support and seamlessly falls back to HTML5’s canvas if needed. </p>\n</blockquote>\n<p>PIXI全面支持 WebGL 但是作为兜底会使用 Canvas，就是说他们两是一个层面的东西，有点晕了，查查资料，问问大佬搞清楚一点吧LOL</p>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><p>先说下Canvas，Canvas（翻译为画布）是HTML5的一个标签，Canvas提供了给JavaScript在浏览器内绘制的能力。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Canvas<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"main()\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1280px\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"720px\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"main.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">    context.fillStyle = <span class=\"string\">\"rgba(0, 0, 255, 1.0)\"</span>;</span><br><span class=\"line\">    context.fillRect(<span class=\"number\">120</span>, <span class=\"number\">10</span>, <span class=\"number\">150</span>, <span class=\"number\">150</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Canvas只支持一些简单的2D绘制，不支持3D，更重要的是性能有限，WebGL弥补了这两方便的不足。</p>\n<h2 id=\"WebGL\"><a href=\"#WebGL\" class=\"headerlink\" title=\"WebGL\"></a>WebGL</h2><p>说 <code>WEBGL</code> 之前需要先了解下 <a href=\"https://zh.wikipedia.org/wiki/OpenGL\" target=\"_blank\" rel=\"noopener\">OpenGL</a>, 既然涉及到绘图能力，底层方面来说实际上是与显卡的交互，OpenGL是 底层的驱动级的图形接口（是显卡有直接关系的，类似于DirectX（玩PC游戏应该都接触过这个）。<br>但是我们想在浏览器里用JS使用这方面的图形渲染能力呢？这时候出现了WebGL，WebGL（全写Web Graphics Library）是一种3D绘图标准，WebGL允许工程师使用JS去调用部分封装过的 OpenGL ES2.0 标准接口去提供硬件级别的3D图形加速功能</p>\n<p>最简单的webgl使用方法，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gl = canvas.getContext(<span class=\"string\">\"webgl\"</span>) || canvas.getContext(<span class=\"string\">\"experimental-webgl\"</span>);</span><br><span class=\"line\">    gl.clearColor(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);<span class=\"comment\">// 指定清空canvas的颜色</span></span><br><span class=\"line\">    gl.clear(gl.COLOR_BUFFER_BIT);<span class=\"comment\">// 清空canvas</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关系总结\"><a href=\"#关系总结\" class=\"headerlink\" title=\"关系总结\"></a>关系总结</h2><p>Canvas就是画布，只要浏览器支持，可以在canvas上获取2D上下文和3D上下文，其中3D上下文一般就是WebGL，当然WebGL也能用于2D绘制，并且WebGL提供硬件渲染加速，性能更好。<br>但是 WEBGL 的支持性<a href=\"https://caniuse.com/#search=webgl\" target=\"_blank\" rel=\"noopener\">caniuse</a>还不是特别好，所以在不支持 WebGL 的情况下，只能使用 Canvas 2D api，注意这里的降级不是降到 Canvas，它只是一个画布元素，而是降级使用 浏览器提供的 <strong>Canvas 2D Api</strong>，这就是很多库的兜底策略，如 Three.js, PIXI 等</p>\n"},{"title":"JavaScript 中的正则表达式","date":"2020-07-10T15:03:46.000Z","_content":"\n> 在JavaScript中，正则表达式是一个对象。相关的一些方法是  `RegExp` 的 `exec` 和 `test` ，以及`String`的`match`、`matchAll`、`replace`、`search`和`split`。\n\n# 字符分类\n\n字符分为转义字符和非转义字符。\n\n## 转义字符\n\n左斜杠 \\ ,再任意字符前面加上它，即是一个转义字符，包括它自己。\n\neg： \\n 表示 换行符， \\r 表示回车符\n\n## 非转义字符\n\n转义字符之外的字符\n\n### 普通字符\n\n平时所用的英文字母，数字标点等，没有特殊含义\n\n### 元字符\n\n有些字符有自己的特殊含义，如 ^ $ 等位置限定符，还有 * + 等数量限定符\n\n# 正则表达式\n\n## 字面量字符\n\n即匹配的是一个固定字符，这时候其实也可以用  `includes` 或者  `indexOf` 方法解决。\n\n```javascript\nlet reg = /cooperhu/;\nlet str = 'cooperhu great';\nreg.test(str); // true\n```\n\n## 字符组\n\n如果需求不是匹配一个固定字符串，而是匹配组合的情况，在方括号里的内容是或的关系。\n\n```javascript\nlet reg = /[abc]/;\nreg.test('a'); // true\nreg.test('b'); //true\nreg.test('c'); // true\nreg.test('abc'); // true\n```\n\n但是要是匹配任一英文字母总不能[abcdefghijklmnopqrstuvwxyz]吧，这样也太长了，也不美观。\n\n这时候可以使用范围表示法 `-` \n\n- [a-z]表示 a-z任一个小写字母\n- [A-Z]表示任一大写字母\n- [0-9]表示0到9中的任一数字\n\n如果要表示一个字符是否是 数字，字母或者下划线就可以写为：\n\n```javascript\nlet reg = /[a-zA-Z0-9_]/;\n```\n\n但是这样写有时候也很麻烦，正则提供了更简单的写法，可以直接写为 `\\w`。\n\n**排除字符组： /\\[^abc\\]/ 指目标字符串不能包含a或b或c，这个^不用在字符组里是开始定位符，需要特殊记一下。**\n\n## 量词\n\n量词是对字符出现次数进行限定，例如长度和重复次数等。\n\n| 符号   | 功能             |      |\n| ------ | ---------------- | ---- |\n| *      | 0次或者多次      |      |\n| +      | 1次或者多次      |      |\n| ？     | 0次或者1次       |      |\n| {n}    | 指定n次          |      |\n| {n,}   | 至少n次          |      |\n| {n, m} | 至少n次，最多m次 |      |\n| {, m}  | 最多m次          |      |\n\n\n\n### 贪婪量词和惰性量词\n\n```javascript\nlet reg = /\\d{1,3}/;\nlet regLazy = /\\d{1,3}?/\n'12 123 1234'.match(reg); // [\"12\", index: 0, input: \"12 123 1234\", groups: undefined]\n'12 123 1234'.match(regLazy); // [\"1\", index: 0, input: \"12 123 1234\", groups: undefined]\n\n```\n\n正常的量词匹配时贪婪的，能多匹配尽量多匹配，相反地如果想实现惰性匹配需要在后面增加一个`?`\n\n\n\n## 位置匹配\n\n常见的几种位置限定符号\n\n| 符号  | 功能                                         |\n| ----- | -------------------------------------------- |\n| ^     | 以什么开头                                   |\n| $     | 以什么结尾                                   |\n| \\b    | 匹配一个单词边界，即字与空格的位置           |\n| \\B    | 非单词边界匹配                               |\n| (?=p) | 字符p前面的位置，或者当前位置后面必须是字符p |\n| (?!p) | 与(?=p)相反                                  |\n\n## 分组\n\n分组通过括号来实现，一个括号内的表达式就是一个子表达式，我们可以自字符串中直接引用分组。\n\n```javascript\n//yyyy-mm-dd要变成 yyyy/mm/dd的格式\ndate.replace(/(\\d{4})-(\\d{2})-(\\d{2})/g, '$1/$2/$3')\n```\n\n生成的分组除了在字符串中引用，我们还可以在正则表达式中引用，且只能引用前面的分组。\n\n```javascript\nvar string1 = \"2017-06-12\";\nvar string2 = \"2017/06/12\";\nvar string3 = \"2017.06.12\";\nvar string4 = \"2016-06/12\";\nlet reg = /\\d{4}-|\\/|\\.\\d{2}-|\\/|\\.\\d{2}/\nconsole.log(reg.test(string1));//true\nconsole.log(reg.test(string2));//true\nconsole.log(reg.test(string3));//true\nconsole.log(reg.test(string4));//true\n// 以上方法只是在每个位置都把- 或者/或者. 这三种情况用分支选择列出来，这样可以满足我们目前的需求，但是如果要求前后连接符必须一致呢？\nlet reg = /\\d{4}(-|\\/|\\.)\\d{2}\\1\\d{2}/\nconsole.log(reg.test(string1));//true\nconsole.log(reg.test(string2));//true\nconsole.log(reg.test(string3));//true\nconsole.log(reg.test(string4));//false\n```\n\n\n\n# 正则表达式特殊字符表格（MDN）\n\n| 字符                                                         | 含义                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [`\\`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backslash) | 依照下列规则匹配：在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 \"\\\" 的 \"b\" 通常匹配小写字母 \"b\"，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 \"\\\"，它将不再匹配任何字符，而是表示一个[字符边界](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#note)。在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 \"转义（Escaping）\" 部分。如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。`/[a-z]\\s/i` 和 `new RegExp(\"[a-z]\\\\s\", \"i\")` 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（`\\s` 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和正则表达式级别都对它进行转义。例如 `/[a-z]:\\\\/i` 和 `new RegExp(\"[a-z]:\\\\\\\\\",\"i\")` 会创建相同的表达式，即匹配类似 \"C:\\\" 字符串。 |\n| [`^`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-caret) | 匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。例如，`/^A/` 并不会匹配 \"an A\" 中的 'A'，但是会匹配 \"An E\" 中的 'A'。当 '`^`' 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。[反向字符集合](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set) 一节有详细介绍和示例。 |\n| [`$`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dollar) | 匹配输入的结束。如果多行标志被设置为 true，那么也匹配换行符前的位置。例如，`/t$/` 并不会匹配 \"eater\" 中的 't'，但是会匹配 \"eat\" 中的 't'。 |\n| [`*`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-asterisk) | 匹配前一个表达式 0 次或多次。等价于 `{0,}`。例如，`/bo*/` 会匹配 \"A ghost boooooed\" 中的 'booooo' 和 \"A bird warbled\" 中的 'b'，但是在 \"A goat grunted\" 中不会匹配任何内容。 |\n| [`+`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-plus) | 匹配前面一个表达式 1 次或者多次。等价于 `{1,}`。例如，`/a+/` 会匹配 \"candy\" 中的 'a' 和 \"caaaaaaandy\" 中所有的 'a'，但是在 \"cndy\" 中不会匹配任何内容。 |\n| [`?`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-questionmark) | 匹配前面一个表达式 0 次或者 1 次。等价于 `{0,1}`。例如，`/e?le?/` 匹配 \"angel\" 中的 'el'、\"angle\" 中的 'le' 以及 \"oslo' 中的 'l'。如果**紧跟在任何量词 \\*、 +、? 或 {} 的后面**，将会使量词变为**非贪婪**（匹配尽量少的字符），和缺省使用的**贪婪模式**（匹配尽可能多的字符）正好相反。例如，对 \"123abc\" 使用 `/\\d+/` 将会匹配 \"123\"，而使用 `/\\d+?/` 则只会匹配到 \"1\"。还用于先行断言中，如本表的 `x(?=y)` 和 `x(?!y)` 条目所述。 |\n| [`.`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dot) | （小数点）默认匹配除换行符之外的任何单个字符。例如，`/.n/` 将会匹配 \"nay, an apple is on the tree\" 中的 'an' 和 'on'，但是不会匹配 'nay'。如果 `s` (\"dotAll\") 标志位被设为 true，它也会匹配换行符。 |\n| [`(x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-capturing-parentheses) | 像下面的例子展示的那样，它会匹配 'x' 并且记住匹配项。其中括号被称为*捕获括号*。模式 `/(foo) (bar) \\1 \\2/` 中的 '`(foo)`' 和 '`(bar)`' 匹配并记住字符串 \"foo bar foo bar\" 中前两个单词。模式中的 `\\1` 和 `\\2` 表示第一个和第二个被捕获括号匹配的子字符串，即 `foo` 和 `bar`，匹配了原字符串中的后两个单词。注意 `\\1`、`\\2`、...、`\\n` 是用在正则表达式的匹配环节，详情可以参阅后文的 [\\n](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions$edit#special-backreference) 条目。而在正则表达式的替换环节，则要使用像 `$1`、`$2`、...、`$n` 这样的语法，例如，`'bar foo'.replace(/(...) (...)/, '$2 $1')`。`$&` 表示整个用于匹配的原字符串。 |\n| [`(?:x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses) | 匹配 'x' 但是不记住匹配项。这种括号叫作*非捕获括号*，使得你能够定义与正则表达式运算符一起使用的子表达式。看看这个例子 `/(?:foo){1,2}/`。如果表达式是 `/foo{1,2}/`，`{1,2}` 将只应用于 'foo' 的最后一个字符 'o'。如果使用非捕获括号，则 `{1,2}` 会应用于整个 'foo' 单词。更多信息，可以参阅下文的 [Using parentheses](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_parentheses) 条目. |\n| [`x(?=y)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead) | 匹配'x'仅仅当'x'后面跟着'y'.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到'Jack'仅当它后面跟着'Sprat'。/Jack(?=Sprat\\|Frost)/匹配‘Jack’仅当它后面跟着'Sprat'或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。 |\n| [`(?<=y)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead)x | 匹配'x'仅当'x'前面是'y'.这种叫做后行断言。例如，/(?<=Jack)Sprat/会匹配到' Sprat '仅仅当它前面是' Jack '。/(?<=Jack\\|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是'Jack'或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。 |\n| [`x(?!y)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-look-ahead) | 仅仅当'x'后面不跟着'y'时匹配'x'，这被称为正向否定查找。例如，仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!\\.)/ 匹配一个数字。正则表达式/\\d+(?!\\.)/.exec(\"3.141\")匹配‘141’而不是‘3.141’ |\n| `(?<!*y*)*x*`                                                | 仅仅当'x'前面不是'y'时匹配'x'，这被称为反向否定查找。例如, 仅仅当这个数字前面没有负号的时候，`/(?<!-)\\d+/` 匹配一个数字。 `/(?<!-)\\d+/.exec('3')` 匹配到 \"3\". `/(?<!-)\\d+/.exec('-3')` 因为这个数字前有负号，所以没有匹配到。 |\n| [`x|y`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-or) | 匹配‘x’或者‘y’。例如，/green\\|red/匹配“green apple”中的‘green’和“red apple”中的‘red’ |\n| [`{n}`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier) | n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。 比如， /a{2}/ 不会匹配“candy”中的'a',但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个'a'。 |\n| [`{n,}`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier) | n是一个正整数，匹配前一个字符至少出现了n次。例如, /a{2,}/ 匹配 \"aa\", \"aaaa\" 和 \"aaaaa\" 但是不匹配 \"a\"。 |\n| [`{n,m}`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier-range) | n 和 m 都是整数。匹配前面的字符至少n次，最多m次。如果 n 或者 m 的值是0， 这个值被忽略。例如，/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。 |\n| [`[xyz\\]`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-character-set) | 一个字符集合。匹配方括号中的任意字符，包括[转义序列](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types)。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。 例如，[abcd] 和[a-d]是一样的。他们都匹配\"brisket\"中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。 |\n| [`[^xyz\\]`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set) | 一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。例如，[^abc] 和 [^a-c] 是一样的。他们匹配\"brisket\"中的‘r’，也匹配“chop”中的‘h’。 |\n| [`[\\b\\]`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backspace) | 匹配一个退格(U+0008)。（不要和\\b混淆了。）                   |\n| [`\\b`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word-boundary) | 匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\\b]混淆了）使用\"moon\"举例： /\\bm/匹配“moon”中的‘m’； /oo\\b/并不匹配\"moon\"中的'oo'，因为'oo'被一个“字”字符'n'紧跟着。 /oon\\b/匹配\"moon\"中的'oon'，因为'oon'是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。 /\\w\\b\\w/将不能匹配任何字符串，因为在一个单词中间的字符永远也不可能同时满足没有“字”字符跟随和有“字”字符跟随两种情况。**注意:** JavaScript的正则表达式引擎将[特定的字符集](http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6)定义为“字”字符。不在该集合中的任何字符都被认为是一个断词。这组字符相当有限：它只包括大写和小写的罗马字母，十进制数字和下划线字符。不幸的是，重要的字符，例如“é”或“ü”，被视为断词。 |\n| [`\\B`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word-boundary) | 匹配一个非单词边界。匹配如下几种情况：字符串第一个字符为非“字”字符字符串最后一个字符为非“字”字符两个单词字符之间两个非单词字符之间空字符串例如，/\\B../匹配\"noonday\"中的'oo', 而/y\\B../匹配\"possibly yesterday\"中的’yes‘ |\n| [`\\c*X*`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-control) | 当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。例如，`/\\cM/` 匹配字符串中的 control-M (U+000D)。 |\n| [`\\d`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-digit) | 匹配一个数字`。``等价于[0-9]`。例如， `/\\d/` 或者 `/[0-9]/` 匹配\"B2 is the suite number.\"中的'2'。 |\n| [`\\D`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-digit) | 匹配一个非数字字符`。``等价于[^0-9]`。例如， `/\\D/` 或者 `/[^0-9]/` 匹配\"B2 is the suite number.\"中的'B' 。 |\n| [`\\f`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-form-feed) | 匹配一个换页符 (U+000C)。                                    |\n| [`\\n`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-line-feed) | 匹配一个换行符 (U+000A)。                                    |\n| [`\\r`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-carriage-return) | 匹配一个回车符 (U+000D)。                                    |\n| [`\\s`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space) | 匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。例如, `/\\s\\w*/` 匹配\"foo bar.\"中的' bar'。经测试，\\s不匹配\"[\\u180e](https://unicode-table.com/cn/180E/)\"，在当前版本Chrome(v80.0.3987.122)和Firefox(76.0.1)控制台输入/\\s/.test(\"\\u180e\")均返回false。 |\n| [`\\S`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-white-space) | 匹配一个非空白字符。等价于 `[^ `\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff`]`。例如，`/\\S\\w*/` 匹配\"foo bar.\"中的'foo'。 |\n| [`\\t`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-tab) | 匹配一个水平制表符 (U+0009)。                                |\n| [`\\v`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-vertical-tab) | 匹配一个垂直制表符 (U+000B)。                                |\n| [`\\w`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word) | 匹配一个单字字符（字母、数字或者下划线）。等价于 `[A-Za-z0-9_]`。例如, `/\\w/` 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3'。 |\n| [`\\W`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word) | 匹配一个非单字字符。等价于 `[^A-Za-z0-9_]`。例如, `/\\W/` 或者 `/[^A-Za-z0-9_]/` 匹配 \"50%.\" 中的 '%'。 |\n| [`\\*n*`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backreference) | 在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。比如 `/apple(,)\\sorange\\1/` 匹配\"apple, orange, cherry, peach.\"中的'apple, orange,' 。 |\n| [`\\0`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-null) | 匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 `\\0<digits>` 是一个八进制转义序列。 |\n| [`\\xhh`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-hex-escape) | 匹配一个两位十六进制数（\\x00-\\xFF）表示的字符。              |\n| [`\\uhhhh`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-unicode-escape) | 匹配一个四位十六进制数表示的 UTF-16 代码单元。               |\n| `\\u{hhhh}或\\u{hhhhh}`                                        | （仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。 |\n\n\n\n\n\n","source":"_posts/js-regexp.md","raw":"---\ntitle: JavaScript 中的正则表达式\ndate: 2020-07-10 23:03:46\ncategories: \n- JavaScript\ntags:\n- JavaScript\n- JS\n- 正则\n---\n\n> 在JavaScript中，正则表达式是一个对象。相关的一些方法是  `RegExp` 的 `exec` 和 `test` ，以及`String`的`match`、`matchAll`、`replace`、`search`和`split`。\n\n# 字符分类\n\n字符分为转义字符和非转义字符。\n\n## 转义字符\n\n左斜杠 \\ ,再任意字符前面加上它，即是一个转义字符，包括它自己。\n\neg： \\n 表示 换行符， \\r 表示回车符\n\n## 非转义字符\n\n转义字符之外的字符\n\n### 普通字符\n\n平时所用的英文字母，数字标点等，没有特殊含义\n\n### 元字符\n\n有些字符有自己的特殊含义，如 ^ $ 等位置限定符，还有 * + 等数量限定符\n\n# 正则表达式\n\n## 字面量字符\n\n即匹配的是一个固定字符，这时候其实也可以用  `includes` 或者  `indexOf` 方法解决。\n\n```javascript\nlet reg = /cooperhu/;\nlet str = 'cooperhu great';\nreg.test(str); // true\n```\n\n## 字符组\n\n如果需求不是匹配一个固定字符串，而是匹配组合的情况，在方括号里的内容是或的关系。\n\n```javascript\nlet reg = /[abc]/;\nreg.test('a'); // true\nreg.test('b'); //true\nreg.test('c'); // true\nreg.test('abc'); // true\n```\n\n但是要是匹配任一英文字母总不能[abcdefghijklmnopqrstuvwxyz]吧，这样也太长了，也不美观。\n\n这时候可以使用范围表示法 `-` \n\n- [a-z]表示 a-z任一个小写字母\n- [A-Z]表示任一大写字母\n- [0-9]表示0到9中的任一数字\n\n如果要表示一个字符是否是 数字，字母或者下划线就可以写为：\n\n```javascript\nlet reg = /[a-zA-Z0-9_]/;\n```\n\n但是这样写有时候也很麻烦，正则提供了更简单的写法，可以直接写为 `\\w`。\n\n**排除字符组： /\\[^abc\\]/ 指目标字符串不能包含a或b或c，这个^不用在字符组里是开始定位符，需要特殊记一下。**\n\n## 量词\n\n量词是对字符出现次数进行限定，例如长度和重复次数等。\n\n| 符号   | 功能             |      |\n| ------ | ---------------- | ---- |\n| *      | 0次或者多次      |      |\n| +      | 1次或者多次      |      |\n| ？     | 0次或者1次       |      |\n| {n}    | 指定n次          |      |\n| {n,}   | 至少n次          |      |\n| {n, m} | 至少n次，最多m次 |      |\n| {, m}  | 最多m次          |      |\n\n\n\n### 贪婪量词和惰性量词\n\n```javascript\nlet reg = /\\d{1,3}/;\nlet regLazy = /\\d{1,3}?/\n'12 123 1234'.match(reg); // [\"12\", index: 0, input: \"12 123 1234\", groups: undefined]\n'12 123 1234'.match(regLazy); // [\"1\", index: 0, input: \"12 123 1234\", groups: undefined]\n\n```\n\n正常的量词匹配时贪婪的，能多匹配尽量多匹配，相反地如果想实现惰性匹配需要在后面增加一个`?`\n\n\n\n## 位置匹配\n\n常见的几种位置限定符号\n\n| 符号  | 功能                                         |\n| ----- | -------------------------------------------- |\n| ^     | 以什么开头                                   |\n| $     | 以什么结尾                                   |\n| \\b    | 匹配一个单词边界，即字与空格的位置           |\n| \\B    | 非单词边界匹配                               |\n| (?=p) | 字符p前面的位置，或者当前位置后面必须是字符p |\n| (?!p) | 与(?=p)相反                                  |\n\n## 分组\n\n分组通过括号来实现，一个括号内的表达式就是一个子表达式，我们可以自字符串中直接引用分组。\n\n```javascript\n//yyyy-mm-dd要变成 yyyy/mm/dd的格式\ndate.replace(/(\\d{4})-(\\d{2})-(\\d{2})/g, '$1/$2/$3')\n```\n\n生成的分组除了在字符串中引用，我们还可以在正则表达式中引用，且只能引用前面的分组。\n\n```javascript\nvar string1 = \"2017-06-12\";\nvar string2 = \"2017/06/12\";\nvar string3 = \"2017.06.12\";\nvar string4 = \"2016-06/12\";\nlet reg = /\\d{4}-|\\/|\\.\\d{2}-|\\/|\\.\\d{2}/\nconsole.log(reg.test(string1));//true\nconsole.log(reg.test(string2));//true\nconsole.log(reg.test(string3));//true\nconsole.log(reg.test(string4));//true\n// 以上方法只是在每个位置都把- 或者/或者. 这三种情况用分支选择列出来，这样可以满足我们目前的需求，但是如果要求前后连接符必须一致呢？\nlet reg = /\\d{4}(-|\\/|\\.)\\d{2}\\1\\d{2}/\nconsole.log(reg.test(string1));//true\nconsole.log(reg.test(string2));//true\nconsole.log(reg.test(string3));//true\nconsole.log(reg.test(string4));//false\n```\n\n\n\n# 正则表达式特殊字符表格（MDN）\n\n| 字符                                                         | 含义                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [`\\`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backslash) | 依照下列规则匹配：在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 \"\\\" 的 \"b\" 通常匹配小写字母 \"b\"，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 \"\\\"，它将不再匹配任何字符，而是表示一个[字符边界](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#note)。在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 \"转义（Escaping）\" 部分。如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。`/[a-z]\\s/i` 和 `new RegExp(\"[a-z]\\\\s\", \"i\")` 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（`\\s` 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和正则表达式级别都对它进行转义。例如 `/[a-z]:\\\\/i` 和 `new RegExp(\"[a-z]:\\\\\\\\\",\"i\")` 会创建相同的表达式，即匹配类似 \"C:\\\" 字符串。 |\n| [`^`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-caret) | 匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。例如，`/^A/` 并不会匹配 \"an A\" 中的 'A'，但是会匹配 \"An E\" 中的 'A'。当 '`^`' 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。[反向字符集合](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set) 一节有详细介绍和示例。 |\n| [`$`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dollar) | 匹配输入的结束。如果多行标志被设置为 true，那么也匹配换行符前的位置。例如，`/t$/` 并不会匹配 \"eater\" 中的 't'，但是会匹配 \"eat\" 中的 't'。 |\n| [`*`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-asterisk) | 匹配前一个表达式 0 次或多次。等价于 `{0,}`。例如，`/bo*/` 会匹配 \"A ghost boooooed\" 中的 'booooo' 和 \"A bird warbled\" 中的 'b'，但是在 \"A goat grunted\" 中不会匹配任何内容。 |\n| [`+`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-plus) | 匹配前面一个表达式 1 次或者多次。等价于 `{1,}`。例如，`/a+/` 会匹配 \"candy\" 中的 'a' 和 \"caaaaaaandy\" 中所有的 'a'，但是在 \"cndy\" 中不会匹配任何内容。 |\n| [`?`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-questionmark) | 匹配前面一个表达式 0 次或者 1 次。等价于 `{0,1}`。例如，`/e?le?/` 匹配 \"angel\" 中的 'el'、\"angle\" 中的 'le' 以及 \"oslo' 中的 'l'。如果**紧跟在任何量词 \\*、 +、? 或 {} 的后面**，将会使量词变为**非贪婪**（匹配尽量少的字符），和缺省使用的**贪婪模式**（匹配尽可能多的字符）正好相反。例如，对 \"123abc\" 使用 `/\\d+/` 将会匹配 \"123\"，而使用 `/\\d+?/` 则只会匹配到 \"1\"。还用于先行断言中，如本表的 `x(?=y)` 和 `x(?!y)` 条目所述。 |\n| [`.`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dot) | （小数点）默认匹配除换行符之外的任何单个字符。例如，`/.n/` 将会匹配 \"nay, an apple is on the tree\" 中的 'an' 和 'on'，但是不会匹配 'nay'。如果 `s` (\"dotAll\") 标志位被设为 true，它也会匹配换行符。 |\n| [`(x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-capturing-parentheses) | 像下面的例子展示的那样，它会匹配 'x' 并且记住匹配项。其中括号被称为*捕获括号*。模式 `/(foo) (bar) \\1 \\2/` 中的 '`(foo)`' 和 '`(bar)`' 匹配并记住字符串 \"foo bar foo bar\" 中前两个单词。模式中的 `\\1` 和 `\\2` 表示第一个和第二个被捕获括号匹配的子字符串，即 `foo` 和 `bar`，匹配了原字符串中的后两个单词。注意 `\\1`、`\\2`、...、`\\n` 是用在正则表达式的匹配环节，详情可以参阅后文的 [\\n](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions$edit#special-backreference) 条目。而在正则表达式的替换环节，则要使用像 `$1`、`$2`、...、`$n` 这样的语法，例如，`'bar foo'.replace(/(...) (...)/, '$2 $1')`。`$&` 表示整个用于匹配的原字符串。 |\n| [`(?:x)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses) | 匹配 'x' 但是不记住匹配项。这种括号叫作*非捕获括号*，使得你能够定义与正则表达式运算符一起使用的子表达式。看看这个例子 `/(?:foo){1,2}/`。如果表达式是 `/foo{1,2}/`，`{1,2}` 将只应用于 'foo' 的最后一个字符 'o'。如果使用非捕获括号，则 `{1,2}` 会应用于整个 'foo' 单词。更多信息，可以参阅下文的 [Using parentheses](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_parentheses) 条目. |\n| [`x(?=y)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead) | 匹配'x'仅仅当'x'后面跟着'y'.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到'Jack'仅当它后面跟着'Sprat'。/Jack(?=Sprat\\|Frost)/匹配‘Jack’仅当它后面跟着'Sprat'或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。 |\n| [`(?<=y)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead)x | 匹配'x'仅当'x'前面是'y'.这种叫做后行断言。例如，/(?<=Jack)Sprat/会匹配到' Sprat '仅仅当它前面是' Jack '。/(?<=Jack\\|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是'Jack'或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。 |\n| [`x(?!y)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-look-ahead) | 仅仅当'x'后面不跟着'y'时匹配'x'，这被称为正向否定查找。例如，仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!\\.)/ 匹配一个数字。正则表达式/\\d+(?!\\.)/.exec(\"3.141\")匹配‘141’而不是‘3.141’ |\n| `(?<!*y*)*x*`                                                | 仅仅当'x'前面不是'y'时匹配'x'，这被称为反向否定查找。例如, 仅仅当这个数字前面没有负号的时候，`/(?<!-)\\d+/` 匹配一个数字。 `/(?<!-)\\d+/.exec('3')` 匹配到 \"3\". `/(?<!-)\\d+/.exec('-3')` 因为这个数字前有负号，所以没有匹配到。 |\n| [`x|y`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-or) | 匹配‘x’或者‘y’。例如，/green\\|red/匹配“green apple”中的‘green’和“red apple”中的‘red’ |\n| [`{n}`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier) | n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。 比如， /a{2}/ 不会匹配“candy”中的'a',但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个'a'。 |\n| [`{n,}`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier) | n是一个正整数，匹配前一个字符至少出现了n次。例如, /a{2,}/ 匹配 \"aa\", \"aaaa\" 和 \"aaaaa\" 但是不匹配 \"a\"。 |\n| [`{n,m}`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier-range) | n 和 m 都是整数。匹配前面的字符至少n次，最多m次。如果 n 或者 m 的值是0， 这个值被忽略。例如，/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。 |\n| [`[xyz\\]`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-character-set) | 一个字符集合。匹配方括号中的任意字符，包括[转义序列](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types)。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。 例如，[abcd] 和[a-d]是一样的。他们都匹配\"brisket\"中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。 |\n| [`[^xyz\\]`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set) | 一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。例如，[^abc] 和 [^a-c] 是一样的。他们匹配\"brisket\"中的‘r’，也匹配“chop”中的‘h’。 |\n| [`[\\b\\]`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backspace) | 匹配一个退格(U+0008)。（不要和\\b混淆了。）                   |\n| [`\\b`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word-boundary) | 匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\\b]混淆了）使用\"moon\"举例： /\\bm/匹配“moon”中的‘m’； /oo\\b/并不匹配\"moon\"中的'oo'，因为'oo'被一个“字”字符'n'紧跟着。 /oon\\b/匹配\"moon\"中的'oon'，因为'oon'是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。 /\\w\\b\\w/将不能匹配任何字符串，因为在一个单词中间的字符永远也不可能同时满足没有“字”字符跟随和有“字”字符跟随两种情况。**注意:** JavaScript的正则表达式引擎将[特定的字符集](http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6)定义为“字”字符。不在该集合中的任何字符都被认为是一个断词。这组字符相当有限：它只包括大写和小写的罗马字母，十进制数字和下划线字符。不幸的是，重要的字符，例如“é”或“ü”，被视为断词。 |\n| [`\\B`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word-boundary) | 匹配一个非单词边界。匹配如下几种情况：字符串第一个字符为非“字”字符字符串最后一个字符为非“字”字符两个单词字符之间两个非单词字符之间空字符串例如，/\\B../匹配\"noonday\"中的'oo', 而/y\\B../匹配\"possibly yesterday\"中的’yes‘ |\n| [`\\c*X*`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-control) | 当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。例如，`/\\cM/` 匹配字符串中的 control-M (U+000D)。 |\n| [`\\d`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-digit) | 匹配一个数字`。``等价于[0-9]`。例如， `/\\d/` 或者 `/[0-9]/` 匹配\"B2 is the suite number.\"中的'2'。 |\n| [`\\D`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-digit) | 匹配一个非数字字符`。``等价于[^0-9]`。例如， `/\\D/` 或者 `/[^0-9]/` 匹配\"B2 is the suite number.\"中的'B' 。 |\n| [`\\f`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-form-feed) | 匹配一个换页符 (U+000C)。                                    |\n| [`\\n`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-line-feed) | 匹配一个换行符 (U+000A)。                                    |\n| [`\\r`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-carriage-return) | 匹配一个回车符 (U+000D)。                                    |\n| [`\\s`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space) | 匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。例如, `/\\s\\w*/` 匹配\"foo bar.\"中的' bar'。经测试，\\s不匹配\"[\\u180e](https://unicode-table.com/cn/180E/)\"，在当前版本Chrome(v80.0.3987.122)和Firefox(76.0.1)控制台输入/\\s/.test(\"\\u180e\")均返回false。 |\n| [`\\S`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-white-space) | 匹配一个非空白字符。等价于 `[^ `\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff`]`。例如，`/\\S\\w*/` 匹配\"foo bar.\"中的'foo'。 |\n| [`\\t`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-tab) | 匹配一个水平制表符 (U+0009)。                                |\n| [`\\v`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-vertical-tab) | 匹配一个垂直制表符 (U+000B)。                                |\n| [`\\w`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word) | 匹配一个单字字符（字母、数字或者下划线）。等价于 `[A-Za-z0-9_]`。例如, `/\\w/` 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3'。 |\n| [`\\W`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word) | 匹配一个非单字字符。等价于 `[^A-Za-z0-9_]`。例如, `/\\W/` 或者 `/[^A-Za-z0-9_]/` 匹配 \"50%.\" 中的 '%'。 |\n| [`\\*n*`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backreference) | 在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。比如 `/apple(,)\\sorange\\1/` 匹配\"apple, orange, cherry, peach.\"中的'apple, orange,' 。 |\n| [`\\0`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-null) | 匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 `\\0<digits>` 是一个八进制转义序列。 |\n| [`\\xhh`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-hex-escape) | 匹配一个两位十六进制数（\\x00-\\xFF）表示的字符。              |\n| [`\\uhhhh`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-unicode-escape) | 匹配一个四位十六进制数表示的 UTF-16 代码单元。               |\n| `\\u{hhhh}或\\u{hhhhh}`                                        | （仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。 |\n\n\n\n\n\n","slug":"js-regexp","published":1,"updated":"2020-09-03T07:08:11.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dl7000m80oxc8ijgmoh","content":"<blockquote>\n<p>在JavaScript中，正则表达式是一个对象。相关的一些方法是  <code>RegExp</code> 的 <code>exec</code> 和 <code>test</code> ，以及<code>String</code>的<code>match</code>、<code>matchAll</code>、<code>replace</code>、<code>search</code>和<code>split</code>。</p>\n</blockquote>\n<h1 id=\"字符分类\"><a href=\"#字符分类\" class=\"headerlink\" title=\"字符分类\"></a>字符分类</h1><p>字符分为转义字符和非转义字符。</p>\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>左斜杠 \\ ,再任意字符前面加上它，即是一个转义字符，包括它自己。</p>\n<p>eg： \\n 表示 换行符， \\r 表示回车符</p>\n<h2 id=\"非转义字符\"><a href=\"#非转义字符\" class=\"headerlink\" title=\"非转义字符\"></a>非转义字符</h2><p>转义字符之外的字符</p>\n<h3 id=\"普通字符\"><a href=\"#普通字符\" class=\"headerlink\" title=\"普通字符\"></a>普通字符</h3><p>平时所用的英文字母，数字标点等，没有特殊含义</p>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>有些字符有自己的特殊含义，如 ^ $ 等位置限定符，还有 * + 等数量限定符</p>\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><h2 id=\"字面量字符\"><a href=\"#字面量字符\" class=\"headerlink\" title=\"字面量字符\"></a>字面量字符</h2><p>即匹配的是一个固定字符，这时候其实也可以用  <code>includes</code> 或者  <code>indexOf</code> 方法解决。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/cooperhu/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'cooperhu great'</span>;</span><br><span class=\"line\">reg.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符组\"><a href=\"#字符组\" class=\"headerlink\" title=\"字符组\"></a>字符组</h2><p>如果需求不是匹配一个固定字符串，而是匹配组合的情况，在方括号里的内容是或的关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[abc]/</span>;</span><br><span class=\"line\">reg.test(<span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'b'</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'c'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'abc'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>但是要是匹配任一英文字母总不能[abcdefghijklmnopqrstuvwxyz]吧，这样也太长了，也不美观。</p>\n<p>这时候可以使用范围表示法 <code>-</code> </p>\n<ul>\n<li>[a-z]表示 a-z任一个小写字母</li>\n<li>[A-Z]表示任一大写字母</li>\n<li>[0-9]表示0到9中的任一数字</li>\n</ul>\n<p>如果要表示一个字符是否是 数字，字母或者下划线就可以写为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[a-zA-Z0-9_]/</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样写有时候也很麻烦，正则提供了更简单的写法，可以直接写为 <code>\\w</code>。</p>\n<p><strong>排除字符组： /[^abc]/ 指目标字符串不能包含a或b或c，这个^不用在字符组里是开始定位符，需要特殊记一下。</strong></p>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><p>量词是对字符出现次数进行限定，例如长度和重复次数等。</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>功能</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>0次或者多次</td>\n<td></td>\n</tr>\n<tr>\n<td>+</td>\n<td>1次或者多次</td>\n<td></td>\n</tr>\n<tr>\n<td>？</td>\n<td>0次或者1次</td>\n<td></td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>指定n次</td>\n<td></td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>至少n次</td>\n<td></td>\n</tr>\n<tr>\n<td>{n, m}</td>\n<td>至少n次，最多m次</td>\n<td></td>\n</tr>\n<tr>\n<td>{, m}</td>\n<td>最多m次</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"贪婪量词和惰性量词\"><a href=\"#贪婪量词和惰性量词\" class=\"headerlink\" title=\"贪婪量词和惰性量词\"></a>贪婪量词和惰性量词</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\d&#123;1,3&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regLazy = <span class=\"regexp\">/\\d&#123;1,3&#125;?/</span></span><br><span class=\"line\"><span class=\"string\">'12 123 1234'</span>.match(reg); <span class=\"comment\">// [\"12\", index: 0, input: \"12 123 1234\", groups: undefined]</span></span><br><span class=\"line\"><span class=\"string\">'12 123 1234'</span>.match(regLazy); <span class=\"comment\">// [\"1\", index: 0, input: \"12 123 1234\", groups: undefined]</span></span><br></pre></td></tr></table></figure>\n\n<p>正常的量词匹配时贪婪的，能多匹配尽量多匹配，相反地如果想实现惰性匹配需要在后面增加一个<code>?</code></p>\n<h2 id=\"位置匹配\"><a href=\"#位置匹配\" class=\"headerlink\" title=\"位置匹配\"></a>位置匹配</h2><p>常见的几种位置限定符号</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>以什么开头</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以什么结尾</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界，即字与空格的位置</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界匹配</td>\n</tr>\n<tr>\n<td>(?=p)</td>\n<td>字符p前面的位置，或者当前位置后面必须是字符p</td>\n</tr>\n<tr>\n<td>(?!p)</td>\n<td>与(?=p)相反</td>\n</tr>\n</tbody></table>\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><p>分组通过括号来实现，一个括号内的表达式就是一个子表达式，我们可以自字符串中直接引用分组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//yyyy-mm-dd要变成 yyyy/mm/dd的格式</span></span><br><span class=\"line\">date.replace(<span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g</span>, <span class=\"string\">'$1/$2/$3'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>生成的分组除了在字符串中引用，我们还可以在正则表达式中引用，且只能引用前面的分组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string1 = <span class=\"string\">\"2017-06-12\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string2 = <span class=\"string\">\"2017/06/12\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string3 = <span class=\"string\">\"2017.06.12\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string4 = <span class=\"string\">\"2016-06/12\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\d&#123;4&#125;-|\\/|\\.\\d&#123;2&#125;-|\\/|\\.\\d&#123;2&#125;/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string1));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string2));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string3));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string4));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">// 以上方法只是在每个位置都把- 或者/或者. 这三种情况用分支选择列出来，这样可以满足我们目前的需求，但是如果要求前后连接符必须一致呢？</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\d&#123;4&#125;(-|\\/|\\.)\\d&#123;2&#125;\\1\\d&#123;2&#125;/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string1));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string2));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string3));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string4));<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"正则表达式特殊字符表格（MDN）\"><a href=\"#正则表达式特殊字符表格（MDN）\" class=\"headerlink\" title=\"正则表达式特殊字符表格（MDN）\"></a>正则表达式特殊字符表格（MDN）</h1><table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backslash\" target=\"_blank\" rel=\"noopener\"><code>\\</code></a></td>\n<td align=\"left\">依照下列规则匹配：在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 “&quot; 的 “b” 通常匹配小写字母 “b”，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 “&quot;，它将不再匹配任何字符，而是表示一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#note\" target=\"_blank\" rel=\"noopener\">字符边界</a>。在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 “转义（Escaping）” 部分。如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。<code>/[a-z]\\s/i</code> 和 <code>new RegExp(&quot;[a-z]\\\\s&quot;, &quot;i&quot;)</code> 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（<code>\\s</code> 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和正则表达式级别都对它进行转义。例如 <code>/[a-z]:\\\\/i</code> 和 <code>new RegExp(&quot;[a-z]:\\\\\\\\&quot;,&quot;i&quot;)</code> 会创建相同的表达式，即匹配类似 “C:&quot; 字符串。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-caret\" target=\"_blank\" rel=\"noopener\"><code>^</code></a></td>\n<td align=\"left\">匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。例如，<code>/^A/</code> 并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。当 ‘<code>^</code>‘ 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set\" target=\"_blank\" rel=\"noopener\">反向字符集合</a> 一节有详细介绍和示例。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dollar\" target=\"_blank\" rel=\"noopener\"><code>$</code></a></td>\n<td align=\"left\">匹配输入的结束。如果多行标志被设置为 true，那么也匹配换行符前的位置。例如，<code>/t$/</code> 并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-asterisk\" target=\"_blank\" rel=\"noopener\"><code>*</code></a></td>\n<td align=\"left\">匹配前一个表达式 0 次或多次。等价于 <code>{0,}</code>。例如，<code>/bo*/</code> 会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中不会匹配任何内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-plus\" target=\"_blank\" rel=\"noopener\"><code>+</code></a></td>\n<td align=\"left\">匹配前面一个表达式 1 次或者多次。等价于 <code>{1,}</code>。例如，<code>/a+/</code> 会匹配 “candy” 中的 ‘a’ 和 “caaaaaaandy” 中所有的 ‘a’，但是在 “cndy” 中不会匹配任何内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-questionmark\" target=\"_blank\" rel=\"noopener\"><code>?</code></a></td>\n<td align=\"left\">匹配前面一个表达式 0 次或者 1 次。等价于 <code>{0,1}</code>。例如，<code>/e?le?/</code> 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。如果<strong>紧跟在任何量词 *、 +、? 或 {} 的后面</strong>，将会使量词变为<strong>非贪婪</strong>（匹配尽量少的字符），和缺省使用的<strong>贪婪模式</strong>（匹配尽可能多的字符）正好相反。例如，对 “123abc” 使用 <code>/\\d+/</code> 将会匹配 “123”，而使用 <code>/\\d+?/</code> 则只会匹配到 “1”。还用于先行断言中，如本表的 <code>x(?=y)</code> 和 <code>x(?!y)</code> 条目所述。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dot\" target=\"_blank\" rel=\"noopener\"><code>.</code></a></td>\n<td align=\"left\">（小数点）默认匹配除换行符之外的任何单个字符。例如，<code>/.n/</code> 将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。如果 <code>s</code> (“dotAll”) 标志位被设为 true，它也会匹配换行符。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-capturing-parentheses\" target=\"_blank\" rel=\"noopener\"><code>(x)</code></a></td>\n<td align=\"left\">像下面的例子展示的那样，它会匹配 ‘x’ 并且记住匹配项。其中括号被称为<em>捕获括号</em>。模式 <code>/(foo) (bar) \\1 \\2/</code> 中的 ‘<code>(foo)</code>‘ 和 ‘<code>(bar)</code>‘ 匹配并记住字符串 “foo bar foo bar” 中前两个单词。模式中的 <code>\\1</code> 和 <code>\\2</code> 表示第一个和第二个被捕获括号匹配的子字符串，即 <code>foo</code> 和 <code>bar</code>，匹配了原字符串中的后两个单词。注意 <code>\\1</code>、<code>\\2</code>、…、<code>\\n</code> 是用在正则表达式的匹配环节，详情可以参阅后文的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions$edit#special-backreference\" target=\"_blank\" rel=\"noopener\">\\n</a> 条目。而在正则表达式的替换环节，则要使用像 <code>$1</code>、<code>$2</code>、…、<code>$n</code> 这样的语法，例如，<code>&#39;bar foo&#39;.replace(/(...) (...)/, &#39;$2 $1&#39;)</code>。<code>$&amp;</code> 表示整个用于匹配的原字符串。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses\" target=\"_blank\" rel=\"noopener\"><code>(?:x)</code></a></td>\n<td align=\"left\">匹配 ‘x’ 但是不记住匹配项。这种括号叫作<em>非捕获括号</em>，使得你能够定义与正则表达式运算符一起使用的子表达式。看看这个例子 <code>/(?:foo){1,2}/</code>。如果表达式是 <code>/foo{1,2}/</code>，<code>{1,2}</code> 将只应用于 ‘foo’ 的最后一个字符 ‘o’。如果使用非捕获括号，则 <code>{1,2}</code> 会应用于整个 ‘foo’ 单词。更多信息，可以参阅下文的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_parentheses\" target=\"_blank\" rel=\"noopener\">Using parentheses</a> 条目.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead\" target=\"_blank\" rel=\"noopener\"><code>x(?=y)</code></a></td>\n<td align=\"left\">匹配’x’仅仅当’x’后面跟着’y’.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到’Jack’仅当它后面跟着’Sprat’。/Jack(?=Sprat|Frost)/匹配‘Jack’仅当它后面跟着’Sprat’或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead\" target=\"_blank\" rel=\"noopener\"><code>(?&lt;=y)</code></a>x</td>\n<td align=\"left\">匹配’x’仅当’x’前面是’y’.这种叫做后行断言。例如，/(?&lt;=Jack)Sprat/会匹配到’ Sprat ‘仅仅当它前面是’ Jack ‘。/(?&lt;=Jack|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是’Jack’或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-look-ahead\" target=\"_blank\" rel=\"noopener\"><code>x(?!y)</code></a></td>\n<td align=\"left\">仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找。例如，仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!.)/ 匹配一个数字。正则表达式/\\d+(?!.)/.exec(“3.141”)匹配‘141’而不是‘3.141’</td>\n</tr>\n<tr>\n<td align=\"left\"><code>(?&lt;!*y*)*x*</code></td>\n<td align=\"left\">仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找。例如, 仅仅当这个数字前面没有负号的时候，<code>/(?&lt;!-)\\d+/</code> 匹配一个数字。 <code>/(?&lt;!-)\\d+/.exec(&#39;3&#39;)</code> 匹配到 “3”. <code>/(?&lt;!-)\\d+/.exec(&#39;-3&#39;)</code> 因为这个数字前有负号，所以没有匹配到。</td>\n</tr>\n<tr>\n<td align=\"left\">[`x</td>\n<td align=\"left\">y`](<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-or\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-or</a>)</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier\" target=\"_blank\" rel=\"noopener\"><code>{n}</code></a></td>\n<td align=\"left\">n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。 比如， /a{2}/ 不会匹配“candy”中的’a’,但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个’a’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier\" target=\"_blank\" rel=\"noopener\"><code>{n,}</code></a></td>\n<td align=\"left\">n是一个正整数，匹配前一个字符至少出现了n次。例如, /a{2,}/ 匹配 “aa”, “aaaa” 和 “aaaaa” 但是不匹配 “a”。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier-range\" target=\"_blank\" rel=\"noopener\"><code>{n,m}</code></a></td>\n<td align=\"left\">n 和 m 都是整数。匹配前面的字符至少n次，最多m次。如果 n 或者 m 的值是0， 这个值被忽略。例如，/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-character-set\" target=\"_blank\" rel=\"noopener\"><code>[xyz\\]</code></a></td>\n<td align=\"left\">一个字符集合。匹配方括号中的任意字符，包括<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types\" target=\"_blank\" rel=\"noopener\">转义序列</a>。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。 例如，[abcd] 和[a-d]是一样的。他们都匹配”brisket”中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set\" target=\"_blank\" rel=\"noopener\"><code>[^xyz\\]</code></a></td>\n<td align=\"left\">一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。例如，[^abc] 和 [^a-c] 是一样的。他们匹配”brisket”中的‘r’，也匹配“chop”中的‘h’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backspace\" target=\"_blank\" rel=\"noopener\"><code>[\\b\\]</code></a></td>\n<td align=\"left\">匹配一个退格(U+0008)。（不要和\\b混淆了。）</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word-boundary\" target=\"_blank\" rel=\"noopener\"><code>\\b</code></a></td>\n<td align=\"left\">匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\\b]混淆了）使用”moon”举例： /\\bm/匹配“moon”中的‘m’； /oo\\b/并不匹配”moon”中的’oo’，因为’oo’被一个“字”字符’n’紧跟着。 /oon\\b/匹配”moon”中的’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。 /\\w\\b\\w/将不能匹配任何字符串，因为在一个单词中间的字符永远也不可能同时满足没有“字”字符跟随和有“字”字符跟随两种情况。<strong>注意:</strong> JavaScript的正则表达式引擎将<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\" target=\"_blank\" rel=\"noopener\">特定的字符集</a>定义为“字”字符。不在该集合中的任何字符都被认为是一个断词。这组字符相当有限：它只包括大写和小写的罗马字母，十进制数字和下划线字符。不幸的是，重要的字符，例如“é”或“ü”，被视为断词。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word-boundary\" target=\"_blank\" rel=\"noopener\"><code>\\B</code></a></td>\n<td align=\"left\">匹配一个非单词边界。匹配如下几种情况：字符串第一个字符为非“字”字符字符串最后一个字符为非“字”字符两个单词字符之间两个非单词字符之间空字符串例如，/\\B../匹配”noonday”中的’oo’, 而/y\\B../匹配”possibly yesterday”中的’yes‘</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-control\" target=\"_blank\" rel=\"noopener\"><code>\\c*X*</code></a></td>\n<td align=\"left\">当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。例如，<code>/\\cM/</code> 匹配字符串中的 control-M (U+000D)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-digit\" target=\"_blank\" rel=\"noopener\"><code>\\d</code></a></td>\n<td align=\"left\">匹配一个数字<code>。``等价于[0-9]</code>。例如， <code>/\\d/</code> 或者 <code>/[0-9]/</code> 匹配”B2 is the suite number.”中的’2’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-digit\" target=\"_blank\" rel=\"noopener\"><code>\\D</code></a></td>\n<td align=\"left\">匹配一个非数字字符<code>。``等价于[^0-9]</code>。例如， <code>/\\D/</code> 或者 <code>/[^0-9]/</code> 匹配”B2 is the suite number.”中的’B’ 。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-form-feed\" target=\"_blank\" rel=\"noopener\"><code>\\f</code></a></td>\n<td align=\"left\">匹配一个换页符 (U+000C)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-line-feed\" target=\"_blank\" rel=\"noopener\"><code>\\n</code></a></td>\n<td align=\"left\">匹配一个换行符 (U+000A)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-carriage-return\" target=\"_blank\" rel=\"noopener\"><code>\\r</code></a></td>\n<td align=\"left\">匹配一个回车符 (U+000D)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space\" target=\"_blank\" rel=\"noopener\"><code>\\s</code></a></td>\n<td align=\"left\">匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。例如, <code>/\\s\\w*/</code> 匹配”foo bar.”中的’ bar’。经测试，\\s不匹配”<a href=\"https://unicode-table.com/cn/180E/\" target=\"_blank\" rel=\"noopener\">\\u180e</a>“，在当前版本Chrome(v80.0.3987.122)和Firefox(76.0.1)控制台输入/\\s/.test(“\\u180e”)均返回false。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-white-space\" target=\"_blank\" rel=\"noopener\"><code>\\S</code></a></td>\n<td align=\"left\">匹配一个非空白字符。等价于 <code>[^</code>\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff<code>]</code>。例如，<code>/\\S\\w*/</code> 匹配”foo bar.”中的’foo’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-tab\" target=\"_blank\" rel=\"noopener\"><code>\\t</code></a></td>\n<td align=\"left\">匹配一个水平制表符 (U+0009)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-vertical-tab\" target=\"_blank\" rel=\"noopener\"><code>\\v</code></a></td>\n<td align=\"left\">匹配一个垂直制表符 (U+000B)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word\" target=\"_blank\" rel=\"noopener\"><code>\\w</code></a></td>\n<td align=\"left\">匹配一个单字字符（字母、数字或者下划线）。等价于 <code>[A-Za-z0-9_]</code>。例如, <code>/\\w/</code> 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word\" target=\"_blank\" rel=\"noopener\"><code>\\W</code></a></td>\n<td align=\"left\">匹配一个非单字字符。等价于 <code>[^A-Za-z0-9_]</code>。例如, <code>/\\W/</code> 或者 <code>/[^A-Za-z0-9_]/</code> 匹配 “50%.” 中的 ‘%’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backreference\" target=\"_blank\" rel=\"noopener\"><code>\\*n*</code></a></td>\n<td align=\"left\">在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。比如 <code>/apple(,)\\sorange\\1/</code> 匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-null\" target=\"_blank\" rel=\"noopener\"><code>\\0</code></a></td>\n<td align=\"left\">匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 <code>\\0&lt;digits&gt;</code> 是一个八进制转义序列。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-hex-escape\" target=\"_blank\" rel=\"noopener\"><code>\\xhh</code></a></td>\n<td align=\"left\">匹配一个两位十六进制数（\\x00-\\xFF）表示的字符。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-unicode-escape\" target=\"_blank\" rel=\"noopener\"><code>\\uhhhh</code></a></td>\n<td align=\"left\">匹配一个四位十六进制数表示的 UTF-16 代码单元。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\u{hhhh}或\\u{hhhhh}</code></td>\n<td align=\"left\">（仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在JavaScript中，正则表达式是一个对象。相关的一些方法是  <code>RegExp</code> 的 <code>exec</code> 和 <code>test</code> ，以及<code>String</code>的<code>match</code>、<code>matchAll</code>、<code>replace</code>、<code>search</code>和<code>split</code>。</p>\n</blockquote>\n<h1 id=\"字符分类\"><a href=\"#字符分类\" class=\"headerlink\" title=\"字符分类\"></a>字符分类</h1><p>字符分为转义字符和非转义字符。</p>\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>左斜杠 \\ ,再任意字符前面加上它，即是一个转义字符，包括它自己。</p>\n<p>eg： \\n 表示 换行符， \\r 表示回车符</p>\n<h2 id=\"非转义字符\"><a href=\"#非转义字符\" class=\"headerlink\" title=\"非转义字符\"></a>非转义字符</h2><p>转义字符之外的字符</p>\n<h3 id=\"普通字符\"><a href=\"#普通字符\" class=\"headerlink\" title=\"普通字符\"></a>普通字符</h3><p>平时所用的英文字母，数字标点等，没有特殊含义</p>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>有些字符有自己的特殊含义，如 ^ $ 等位置限定符，还有 * + 等数量限定符</p>\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><h2 id=\"字面量字符\"><a href=\"#字面量字符\" class=\"headerlink\" title=\"字面量字符\"></a>字面量字符</h2><p>即匹配的是一个固定字符，这时候其实也可以用  <code>includes</code> 或者  <code>indexOf</code> 方法解决。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/cooperhu/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'cooperhu great'</span>;</span><br><span class=\"line\">reg.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符组\"><a href=\"#字符组\" class=\"headerlink\" title=\"字符组\"></a>字符组</h2><p>如果需求不是匹配一个固定字符串，而是匹配组合的情况，在方括号里的内容是或的关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[abc]/</span>;</span><br><span class=\"line\">reg.test(<span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'b'</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'c'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'abc'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>但是要是匹配任一英文字母总不能[abcdefghijklmnopqrstuvwxyz]吧，这样也太长了，也不美观。</p>\n<p>这时候可以使用范围表示法 <code>-</code> </p>\n<ul>\n<li>[a-z]表示 a-z任一个小写字母</li>\n<li>[A-Z]表示任一大写字母</li>\n<li>[0-9]表示0到9中的任一数字</li>\n</ul>\n<p>如果要表示一个字符是否是 数字，字母或者下划线就可以写为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[a-zA-Z0-9_]/</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样写有时候也很麻烦，正则提供了更简单的写法，可以直接写为 <code>\\w</code>。</p>\n<p><strong>排除字符组： /[^abc]/ 指目标字符串不能包含a或b或c，这个^不用在字符组里是开始定位符，需要特殊记一下。</strong></p>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><p>量词是对字符出现次数进行限定，例如长度和重复次数等。</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>功能</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>0次或者多次</td>\n<td></td>\n</tr>\n<tr>\n<td>+</td>\n<td>1次或者多次</td>\n<td></td>\n</tr>\n<tr>\n<td>？</td>\n<td>0次或者1次</td>\n<td></td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>指定n次</td>\n<td></td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>至少n次</td>\n<td></td>\n</tr>\n<tr>\n<td>{n, m}</td>\n<td>至少n次，最多m次</td>\n<td></td>\n</tr>\n<tr>\n<td>{, m}</td>\n<td>最多m次</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"贪婪量词和惰性量词\"><a href=\"#贪婪量词和惰性量词\" class=\"headerlink\" title=\"贪婪量词和惰性量词\"></a>贪婪量词和惰性量词</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\d&#123;1,3&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regLazy = <span class=\"regexp\">/\\d&#123;1,3&#125;?/</span></span><br><span class=\"line\"><span class=\"string\">'12 123 1234'</span>.match(reg); <span class=\"comment\">// [\"12\", index: 0, input: \"12 123 1234\", groups: undefined]</span></span><br><span class=\"line\"><span class=\"string\">'12 123 1234'</span>.match(regLazy); <span class=\"comment\">// [\"1\", index: 0, input: \"12 123 1234\", groups: undefined]</span></span><br></pre></td></tr></table></figure>\n\n<p>正常的量词匹配时贪婪的，能多匹配尽量多匹配，相反地如果想实现惰性匹配需要在后面增加一个<code>?</code></p>\n<h2 id=\"位置匹配\"><a href=\"#位置匹配\" class=\"headerlink\" title=\"位置匹配\"></a>位置匹配</h2><p>常见的几种位置限定符号</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>以什么开头</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以什么结尾</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界，即字与空格的位置</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界匹配</td>\n</tr>\n<tr>\n<td>(?=p)</td>\n<td>字符p前面的位置，或者当前位置后面必须是字符p</td>\n</tr>\n<tr>\n<td>(?!p)</td>\n<td>与(?=p)相反</td>\n</tr>\n</tbody></table>\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><p>分组通过括号来实现，一个括号内的表达式就是一个子表达式，我们可以自字符串中直接引用分组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//yyyy-mm-dd要变成 yyyy/mm/dd的格式</span></span><br><span class=\"line\">date.replace(<span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g</span>, <span class=\"string\">'$1/$2/$3'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>生成的分组除了在字符串中引用，我们还可以在正则表达式中引用，且只能引用前面的分组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string1 = <span class=\"string\">\"2017-06-12\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string2 = <span class=\"string\">\"2017/06/12\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string3 = <span class=\"string\">\"2017.06.12\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> string4 = <span class=\"string\">\"2016-06/12\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\d&#123;4&#125;-|\\/|\\.\\d&#123;2&#125;-|\\/|\\.\\d&#123;2&#125;/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string1));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string2));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string3));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string4));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">// 以上方法只是在每个位置都把- 或者/或者. 这三种情况用分支选择列出来，这样可以满足我们目前的需求，但是如果要求前后连接符必须一致呢？</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\d&#123;4&#125;(-|\\/|\\.)\\d&#123;2&#125;\\1\\d&#123;2&#125;/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string1));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string2));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string3));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(string4));<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"正则表达式特殊字符表格（MDN）\"><a href=\"#正则表达式特殊字符表格（MDN）\" class=\"headerlink\" title=\"正则表达式特殊字符表格（MDN）\"></a>正则表达式特殊字符表格（MDN）</h1><table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backslash\" target=\"_blank\" rel=\"noopener\"><code>\\</code></a></td>\n<td align=\"left\">依照下列规则匹配：在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 “&quot; 的 “b” 通常匹配小写字母 “b”，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 “&quot;，它将不再匹配任何字符，而是表示一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#note\" target=\"_blank\" rel=\"noopener\">字符边界</a>。在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 “转义（Escaping）” 部分。如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。<code>/[a-z]\\s/i</code> 和 <code>new RegExp(&quot;[a-z]\\\\s&quot;, &quot;i&quot;)</code> 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（<code>\\s</code> 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和正则表达式级别都对它进行转义。例如 <code>/[a-z]:\\\\/i</code> 和 <code>new RegExp(&quot;[a-z]:\\\\\\\\&quot;,&quot;i&quot;)</code> 会创建相同的表达式，即匹配类似 “C:&quot; 字符串。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-caret\" target=\"_blank\" rel=\"noopener\"><code>^</code></a></td>\n<td align=\"left\">匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。例如，<code>/^A/</code> 并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。当 ‘<code>^</code>‘ 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set\" target=\"_blank\" rel=\"noopener\">反向字符集合</a> 一节有详细介绍和示例。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dollar\" target=\"_blank\" rel=\"noopener\"><code>$</code></a></td>\n<td align=\"left\">匹配输入的结束。如果多行标志被设置为 true，那么也匹配换行符前的位置。例如，<code>/t$/</code> 并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-asterisk\" target=\"_blank\" rel=\"noopener\"><code>*</code></a></td>\n<td align=\"left\">匹配前一个表达式 0 次或多次。等价于 <code>{0,}</code>。例如，<code>/bo*/</code> 会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中不会匹配任何内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-plus\" target=\"_blank\" rel=\"noopener\"><code>+</code></a></td>\n<td align=\"left\">匹配前面一个表达式 1 次或者多次。等价于 <code>{1,}</code>。例如，<code>/a+/</code> 会匹配 “candy” 中的 ‘a’ 和 “caaaaaaandy” 中所有的 ‘a’，但是在 “cndy” 中不会匹配任何内容。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-questionmark\" target=\"_blank\" rel=\"noopener\"><code>?</code></a></td>\n<td align=\"left\">匹配前面一个表达式 0 次或者 1 次。等价于 <code>{0,1}</code>。例如，<code>/e?le?/</code> 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。如果<strong>紧跟在任何量词 *、 +、? 或 {} 的后面</strong>，将会使量词变为<strong>非贪婪</strong>（匹配尽量少的字符），和缺省使用的<strong>贪婪模式</strong>（匹配尽可能多的字符）正好相反。例如，对 “123abc” 使用 <code>/\\d+/</code> 将会匹配 “123”，而使用 <code>/\\d+?/</code> 则只会匹配到 “1”。还用于先行断言中，如本表的 <code>x(?=y)</code> 和 <code>x(?!y)</code> 条目所述。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dot\" target=\"_blank\" rel=\"noopener\"><code>.</code></a></td>\n<td align=\"left\">（小数点）默认匹配除换行符之外的任何单个字符。例如，<code>/.n/</code> 将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。如果 <code>s</code> (“dotAll”) 标志位被设为 true，它也会匹配换行符。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-capturing-parentheses\" target=\"_blank\" rel=\"noopener\"><code>(x)</code></a></td>\n<td align=\"left\">像下面的例子展示的那样，它会匹配 ‘x’ 并且记住匹配项。其中括号被称为<em>捕获括号</em>。模式 <code>/(foo) (bar) \\1 \\2/</code> 中的 ‘<code>(foo)</code>‘ 和 ‘<code>(bar)</code>‘ 匹配并记住字符串 “foo bar foo bar” 中前两个单词。模式中的 <code>\\1</code> 和 <code>\\2</code> 表示第一个和第二个被捕获括号匹配的子字符串，即 <code>foo</code> 和 <code>bar</code>，匹配了原字符串中的后两个单词。注意 <code>\\1</code>、<code>\\2</code>、…、<code>\\n</code> 是用在正则表达式的匹配环节，详情可以参阅后文的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions$edit#special-backreference\" target=\"_blank\" rel=\"noopener\">\\n</a> 条目。而在正则表达式的替换环节，则要使用像 <code>$1</code>、<code>$2</code>、…、<code>$n</code> 这样的语法，例如，<code>&#39;bar foo&#39;.replace(/(...) (...)/, &#39;$2 $1&#39;)</code>。<code>$&amp;</code> 表示整个用于匹配的原字符串。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses\" target=\"_blank\" rel=\"noopener\"><code>(?:x)</code></a></td>\n<td align=\"left\">匹配 ‘x’ 但是不记住匹配项。这种括号叫作<em>非捕获括号</em>，使得你能够定义与正则表达式运算符一起使用的子表达式。看看这个例子 <code>/(?:foo){1,2}/</code>。如果表达式是 <code>/foo{1,2}/</code>，<code>{1,2}</code> 将只应用于 ‘foo’ 的最后一个字符 ‘o’。如果使用非捕获括号，则 <code>{1,2}</code> 会应用于整个 ‘foo’ 单词。更多信息，可以参阅下文的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_parentheses\" target=\"_blank\" rel=\"noopener\">Using parentheses</a> 条目.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead\" target=\"_blank\" rel=\"noopener\"><code>x(?=y)</code></a></td>\n<td align=\"left\">匹配’x’仅仅当’x’后面跟着’y’.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到’Jack’仅当它后面跟着’Sprat’。/Jack(?=Sprat|Frost)/匹配‘Jack’仅当它后面跟着’Sprat’或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead\" target=\"_blank\" rel=\"noopener\"><code>(?&lt;=y)</code></a>x</td>\n<td align=\"left\">匹配’x’仅当’x’前面是’y’.这种叫做后行断言。例如，/(?&lt;=Jack)Sprat/会匹配到’ Sprat ‘仅仅当它前面是’ Jack ‘。/(?&lt;=Jack|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是’Jack’或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-look-ahead\" target=\"_blank\" rel=\"noopener\"><code>x(?!y)</code></a></td>\n<td align=\"left\">仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找。例如，仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!.)/ 匹配一个数字。正则表达式/\\d+(?!.)/.exec(“3.141”)匹配‘141’而不是‘3.141’</td>\n</tr>\n<tr>\n<td align=\"left\"><code>(?&lt;!*y*)*x*</code></td>\n<td align=\"left\">仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找。例如, 仅仅当这个数字前面没有负号的时候，<code>/(?&lt;!-)\\d+/</code> 匹配一个数字。 <code>/(?&lt;!-)\\d+/.exec(&#39;3&#39;)</code> 匹配到 “3”. <code>/(?&lt;!-)\\d+/.exec(&#39;-3&#39;)</code> 因为这个数字前有负号，所以没有匹配到。</td>\n</tr>\n<tr>\n<td align=\"left\">[`x</td>\n<td align=\"left\">y`](<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-or\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-or</a>)</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier\" target=\"_blank\" rel=\"noopener\"><code>{n}</code></a></td>\n<td align=\"left\">n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。 比如， /a{2}/ 不会匹配“candy”中的’a’,但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个’a’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier\" target=\"_blank\" rel=\"noopener\"><code>{n,}</code></a></td>\n<td align=\"left\">n是一个正整数，匹配前一个字符至少出现了n次。例如, /a{2,}/ 匹配 “aa”, “aaaa” 和 “aaaaa” 但是不匹配 “a”。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier-range\" target=\"_blank\" rel=\"noopener\"><code>{n,m}</code></a></td>\n<td align=\"left\">n 和 m 都是整数。匹配前面的字符至少n次，最多m次。如果 n 或者 m 的值是0， 这个值被忽略。例如，/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-character-set\" target=\"_blank\" rel=\"noopener\"><code>[xyz\\]</code></a></td>\n<td align=\"left\">一个字符集合。匹配方括号中的任意字符，包括<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types\" target=\"_blank\" rel=\"noopener\">转义序列</a>。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。 例如，[abcd] 和[a-d]是一样的。他们都匹配”brisket”中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set\" target=\"_blank\" rel=\"noopener\"><code>[^xyz\\]</code></a></td>\n<td align=\"left\">一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。例如，[^abc] 和 [^a-c] 是一样的。他们匹配”brisket”中的‘r’，也匹配“chop”中的‘h’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backspace\" target=\"_blank\" rel=\"noopener\"><code>[\\b\\]</code></a></td>\n<td align=\"left\">匹配一个退格(U+0008)。（不要和\\b混淆了。）</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word-boundary\" target=\"_blank\" rel=\"noopener\"><code>\\b</code></a></td>\n<td align=\"left\">匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\\b]混淆了）使用”moon”举例： /\\bm/匹配“moon”中的‘m’； /oo\\b/并不匹配”moon”中的’oo’，因为’oo’被一个“字”字符’n’紧跟着。 /oon\\b/匹配”moon”中的’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。 /\\w\\b\\w/将不能匹配任何字符串，因为在一个单词中间的字符永远也不可能同时满足没有“字”字符跟随和有“字”字符跟随两种情况。<strong>注意:</strong> JavaScript的正则表达式引擎将<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\" target=\"_blank\" rel=\"noopener\">特定的字符集</a>定义为“字”字符。不在该集合中的任何字符都被认为是一个断词。这组字符相当有限：它只包括大写和小写的罗马字母，十进制数字和下划线字符。不幸的是，重要的字符，例如“é”或“ü”，被视为断词。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word-boundary\" target=\"_blank\" rel=\"noopener\"><code>\\B</code></a></td>\n<td align=\"left\">匹配一个非单词边界。匹配如下几种情况：字符串第一个字符为非“字”字符字符串最后一个字符为非“字”字符两个单词字符之间两个非单词字符之间空字符串例如，/\\B../匹配”noonday”中的’oo’, 而/y\\B../匹配”possibly yesterday”中的’yes‘</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-control\" target=\"_blank\" rel=\"noopener\"><code>\\c*X*</code></a></td>\n<td align=\"left\">当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。例如，<code>/\\cM/</code> 匹配字符串中的 control-M (U+000D)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-digit\" target=\"_blank\" rel=\"noopener\"><code>\\d</code></a></td>\n<td align=\"left\">匹配一个数字<code>。``等价于[0-9]</code>。例如， <code>/\\d/</code> 或者 <code>/[0-9]/</code> 匹配”B2 is the suite number.”中的’2’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-digit\" target=\"_blank\" rel=\"noopener\"><code>\\D</code></a></td>\n<td align=\"left\">匹配一个非数字字符<code>。``等价于[^0-9]</code>。例如， <code>/\\D/</code> 或者 <code>/[^0-9]/</code> 匹配”B2 is the suite number.”中的’B’ 。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-form-feed\" target=\"_blank\" rel=\"noopener\"><code>\\f</code></a></td>\n<td align=\"left\">匹配一个换页符 (U+000C)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-line-feed\" target=\"_blank\" rel=\"noopener\"><code>\\n</code></a></td>\n<td align=\"left\">匹配一个换行符 (U+000A)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-carriage-return\" target=\"_blank\" rel=\"noopener\"><code>\\r</code></a></td>\n<td align=\"left\">匹配一个回车符 (U+000D)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space\" target=\"_blank\" rel=\"noopener\"><code>\\s</code></a></td>\n<td align=\"left\">匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。例如, <code>/\\s\\w*/</code> 匹配”foo bar.”中的’ bar’。经测试，\\s不匹配”<a href=\"https://unicode-table.com/cn/180E/\" target=\"_blank\" rel=\"noopener\">\\u180e</a>“，在当前版本Chrome(v80.0.3987.122)和Firefox(76.0.1)控制台输入/\\s/.test(“\\u180e”)均返回false。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-white-space\" target=\"_blank\" rel=\"noopener\"><code>\\S</code></a></td>\n<td align=\"left\">匹配一个非空白字符。等价于 <code>[^</code>\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff<code>]</code>。例如，<code>/\\S\\w*/</code> 匹配”foo bar.”中的’foo’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-tab\" target=\"_blank\" rel=\"noopener\"><code>\\t</code></a></td>\n<td align=\"left\">匹配一个水平制表符 (U+0009)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-vertical-tab\" target=\"_blank\" rel=\"noopener\"><code>\\v</code></a></td>\n<td align=\"left\">匹配一个垂直制表符 (U+000B)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word\" target=\"_blank\" rel=\"noopener\"><code>\\w</code></a></td>\n<td align=\"left\">匹配一个单字字符（字母、数字或者下划线）。等价于 <code>[A-Za-z0-9_]</code>。例如, <code>/\\w/</code> 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word\" target=\"_blank\" rel=\"noopener\"><code>\\W</code></a></td>\n<td align=\"left\">匹配一个非单字字符。等价于 <code>[^A-Za-z0-9_]</code>。例如, <code>/\\W/</code> 或者 <code>/[^A-Za-z0-9_]/</code> 匹配 “50%.” 中的 ‘%’。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backreference\" target=\"_blank\" rel=\"noopener\"><code>\\*n*</code></a></td>\n<td align=\"left\">在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。比如 <code>/apple(,)\\sorange\\1/</code> 匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-null\" target=\"_blank\" rel=\"noopener\"><code>\\0</code></a></td>\n<td align=\"left\">匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 <code>\\0&lt;digits&gt;</code> 是一个八进制转义序列。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-hex-escape\" target=\"_blank\" rel=\"noopener\"><code>\\xhh</code></a></td>\n<td align=\"left\">匹配一个两位十六进制数（\\x00-\\xFF）表示的字符。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-unicode-escape\" target=\"_blank\" rel=\"noopener\"><code>\\uhhhh</code></a></td>\n<td align=\"left\">匹配一个四位十六进制数表示的 UTF-16 代码单元。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\u{hhhh}或\\u{hhhhh}</code></td>\n<td align=\"left\">（仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。</td>\n</tr>\n</tbody></table>\n"},{"title":"H5实现图片预览的两种方式和区别","date":"2019-09-24T11:28:44.000Z","_content":"\n> 在实际的业务场景里经常会用到图片或者视频预览的需求，之前一直使用FileReader.readAsDataURL()实现，现在发现URL.createObjectURL()也有同样的能力，那么使用他们两有啥不同呢？\n\n## File\n首先大概说下 File 对象，它是一个特殊的 [blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob) 类型，围绕文件上传的场景有特别多神奇的[用法](https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications)。\n\n\n### 属性\n- File.lastModified： 返回当前 File 对象所引用文件最后修改时间，自 UNIX 时间起始值（1970年1月1日 00:00:00 UTC）以来的毫秒数。\n- File.lastModifiedDate： 返回当前 File 对象所引用文件最后修改时间的 Date 对象。\n- File.name: 文件名\n- File.type: 返回文件的 MIME TYPE\n- File.size: 返回文件的大小\n\n### 方法\nFile 接口没有定义任何方法，但是它从 Blob 接口继承了以下方法：\n一般为了兼容各个浏览器我们要做如下的处理来使用\n```JavaScript\nvar blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;\n```\n\n## FileReader.readAsDataURL()\n[FileReader](https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader)也有特别多的使用方法，就不详细展开了（我也记不住），FileReader.readAsDataURL(file)得到的事一段base64的字符串，，主要说下我们使用readAsDataURL实现图片预览的情况：\n```Javascript\nconst readerFile = file => new Promise((resolve, reject) => {\n  const fileInfo = {\n    name: file.name.substr(0, file.name.lastIndexOf('.')),\n    fileSize: file.size,\n    lastModified: file.lastModified,\n    uploadStatus: 'uploading',\n    file,\n  };\n\n  let reader = new FileReader();\n  reader.onload = (ev) => {\n    fileInfo.url = ev.target.result;\n    fileInfo.src = ev.target.result;\n    resolve(fileInfo);\n    reader = null;\n  };\n  reader.onerror = (err) => {\n    reject(err);\n    reader = null;\n  };\n  reader.readAsDataURL(file);\n});\n```\n这样我们从后续的fileInfo中取出src属性赋值给对应的img标签就可以了，FileReader.readAsDataURL是异步操作，有流的概念，可以结合各种框架的state传递和保存（使用react框架，省略了dom操作）。\n\n## URL.createObjectURL()\nURL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。\n简单的理解一下就是将一个file或Blob类型的对象转为UTF-16的字符串，并保存在当前操作的document下。\n```HTML\n<input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\" style=\"display:none\" onchange=\"handleFiles(this.files)\">\n<a href=\"#\" id=\"fileSelect\">Select some files</a> \n<div id=\"fileList\">\n  <p>No files selected!</p>\n</div>\n```\n```Javascript\nwindow.URL = window.URL || window.webkitURL;\nconst fileSelect = document.getElementById(\"fileSelect\"),\n    fileElem = document.getElementById(\"fileElem\"),\n    fileList = document.getElementById(\"fileList\");\n\nfileSelect.addEventListener(\"click\", function (e) {\n  if (fileElem) {\n    fileElem.click();\n  }\n  e.preventDefault(); // prevent navigation to \"#\"\n}, false);\nfunction handleFiles(files) {\n  if (!files.length) {\n    fileList.innerHTML = \"<p>No files selected!</p>\";\n  } else {\n    fileList.innerHTML = \"\";\n    const list = document.createElement(\"ul\");\n    fileList.appendChild(list);\n    for (let i = 0; i < files.length; i++) {\n      const li = document.createElement(\"li\");\n      list.appendChild(li);\n      \n      const img = document.createElement(\"img\");\n      img.src = window.URL.createObjectURL(files[i]);\n      img.height = 60;\n      img.onload = function() {\n        window.URL.revokeObjectURL(this.src);\n      }\n      li.appendChild(img);\n      const info = document.createElement(\"span\");\n      info.innerHTML = files[i].name + \": \" + files[i].size + \" bytes\";\n      li.appendChild(info);\n    }\n  }\n}\n```\n\n## URL.createObjectURL() VS FileReader.readAsDataURL()\n1. 返回值不同\n   - FileReader.readAsDataURL(file)可以得到一段base64的字符串，长度和文件大小正相关\n   - URL.createObjectURL(file)可以得到当前文件的一个内存URL。\n2. 执行机制\n   - FileReader.readAsDataURL(file)通过回调的形式返回，异步执行。\n   - URL.createObjectURL(file)直接返回，同步执行。\n3. 回收机制\n   - FileReader.readAsDataURL(file)依照JS垃圾回收机制自动从内存中清理。\n   - URL.createObjectURL(file)存在于当前doucment内，清除方式只有unload()事件或revokeObjectURL()手动清除 。\n4. 兼容性\n   - IE10以上\n\n总体来说，使用URL.createObjectURL(file)更为方便（同步），性能优秀，但是需要考虑手动释放内存的问题。FileReader.readAsDataURL(file)胜在直接转为base64格式，更方便用于后续的其他数据操作场景（如上传），但是base64的长度会影响页面的性能。如果单纯的实现预览图片的功能，推荐使用URL.createObjectURL(file)。","source":"_posts/js-image-preview.md","raw":"---\ntitle: H5实现图片预览的两种方式和区别\ndate: 2019-09-24 19:28:44\ncategories: \n- JavaScript\ntags:\n- JS\n- File\n- HTML5\n---\n\n> 在实际的业务场景里经常会用到图片或者视频预览的需求，之前一直使用FileReader.readAsDataURL()实现，现在发现URL.createObjectURL()也有同样的能力，那么使用他们两有啥不同呢？\n\n## File\n首先大概说下 File 对象，它是一个特殊的 [blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob) 类型，围绕文件上传的场景有特别多神奇的[用法](https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications)。\n\n\n### 属性\n- File.lastModified： 返回当前 File 对象所引用文件最后修改时间，自 UNIX 时间起始值（1970年1月1日 00:00:00 UTC）以来的毫秒数。\n- File.lastModifiedDate： 返回当前 File 对象所引用文件最后修改时间的 Date 对象。\n- File.name: 文件名\n- File.type: 返回文件的 MIME TYPE\n- File.size: 返回文件的大小\n\n### 方法\nFile 接口没有定义任何方法，但是它从 Blob 接口继承了以下方法：\n一般为了兼容各个浏览器我们要做如下的处理来使用\n```JavaScript\nvar blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;\n```\n\n## FileReader.readAsDataURL()\n[FileReader](https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader)也有特别多的使用方法，就不详细展开了（我也记不住），FileReader.readAsDataURL(file)得到的事一段base64的字符串，，主要说下我们使用readAsDataURL实现图片预览的情况：\n```Javascript\nconst readerFile = file => new Promise((resolve, reject) => {\n  const fileInfo = {\n    name: file.name.substr(0, file.name.lastIndexOf('.')),\n    fileSize: file.size,\n    lastModified: file.lastModified,\n    uploadStatus: 'uploading',\n    file,\n  };\n\n  let reader = new FileReader();\n  reader.onload = (ev) => {\n    fileInfo.url = ev.target.result;\n    fileInfo.src = ev.target.result;\n    resolve(fileInfo);\n    reader = null;\n  };\n  reader.onerror = (err) => {\n    reject(err);\n    reader = null;\n  };\n  reader.readAsDataURL(file);\n});\n```\n这样我们从后续的fileInfo中取出src属性赋值给对应的img标签就可以了，FileReader.readAsDataURL是异步操作，有流的概念，可以结合各种框架的state传递和保存（使用react框架，省略了dom操作）。\n\n## URL.createObjectURL()\nURL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。\n简单的理解一下就是将一个file或Blob类型的对象转为UTF-16的字符串，并保存在当前操作的document下。\n```HTML\n<input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\" style=\"display:none\" onchange=\"handleFiles(this.files)\">\n<a href=\"#\" id=\"fileSelect\">Select some files</a> \n<div id=\"fileList\">\n  <p>No files selected!</p>\n</div>\n```\n```Javascript\nwindow.URL = window.URL || window.webkitURL;\nconst fileSelect = document.getElementById(\"fileSelect\"),\n    fileElem = document.getElementById(\"fileElem\"),\n    fileList = document.getElementById(\"fileList\");\n\nfileSelect.addEventListener(\"click\", function (e) {\n  if (fileElem) {\n    fileElem.click();\n  }\n  e.preventDefault(); // prevent navigation to \"#\"\n}, false);\nfunction handleFiles(files) {\n  if (!files.length) {\n    fileList.innerHTML = \"<p>No files selected!</p>\";\n  } else {\n    fileList.innerHTML = \"\";\n    const list = document.createElement(\"ul\");\n    fileList.appendChild(list);\n    for (let i = 0; i < files.length; i++) {\n      const li = document.createElement(\"li\");\n      list.appendChild(li);\n      \n      const img = document.createElement(\"img\");\n      img.src = window.URL.createObjectURL(files[i]);\n      img.height = 60;\n      img.onload = function() {\n        window.URL.revokeObjectURL(this.src);\n      }\n      li.appendChild(img);\n      const info = document.createElement(\"span\");\n      info.innerHTML = files[i].name + \": \" + files[i].size + \" bytes\";\n      li.appendChild(info);\n    }\n  }\n}\n```\n\n## URL.createObjectURL() VS FileReader.readAsDataURL()\n1. 返回值不同\n   - FileReader.readAsDataURL(file)可以得到一段base64的字符串，长度和文件大小正相关\n   - URL.createObjectURL(file)可以得到当前文件的一个内存URL。\n2. 执行机制\n   - FileReader.readAsDataURL(file)通过回调的形式返回，异步执行。\n   - URL.createObjectURL(file)直接返回，同步执行。\n3. 回收机制\n   - FileReader.readAsDataURL(file)依照JS垃圾回收机制自动从内存中清理。\n   - URL.createObjectURL(file)存在于当前doucment内，清除方式只有unload()事件或revokeObjectURL()手动清除 。\n4. 兼容性\n   - IE10以上\n\n总体来说，使用URL.createObjectURL(file)更为方便（同步），性能优秀，但是需要考虑手动释放内存的问题。FileReader.readAsDataURL(file)胜在直接转为base64格式，更方便用于后续的其他数据操作场景（如上传），但是base64的长度会影响页面的性能。如果单纯的实现预览图片的功能，推荐使用URL.createObjectURL(file)。","slug":"js-image-preview","published":1,"updated":"2019-09-24T12:05:24.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dl9000q80ox8lmxtng8","content":"<blockquote>\n<p>在实际的业务场景里经常会用到图片或者视频预览的需求，之前一直使用FileReader.readAsDataURL()实现，现在发现URL.createObjectURL()也有同样的能力，那么使用他们两有啥不同呢？</p>\n</blockquote>\n<h2 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h2><p>首先大概说下 File 对象，它是一个特殊的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\">blob</a> 类型，围绕文件上传的场景有特别多神奇的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications\" target=\"_blank\" rel=\"noopener\">用法</a>。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>File.lastModified： 返回当前 File 对象所引用文件最后修改时间，自 UNIX 时间起始值（1970年1月1日 00:00:00 UTC）以来的毫秒数。</li>\n<li>File.lastModifiedDate： 返回当前 File 对象所引用文件最后修改时间的 Date 对象。</li>\n<li>File.name: 文件名</li>\n<li>File.type: 返回文件的 MIME TYPE</li>\n<li>File.size: 返回文件的大小</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>File 接口没有定义任何方法，但是它从 Blob 接口继承了以下方法：<br>一般为了兼容各个浏览器我们要做如下的处理来使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FileReader-readAsDataURL\"><a href=\"#FileReader-readAsDataURL\" class=\"headerlink\" title=\"FileReader.readAsDataURL()\"></a>FileReader.readAsDataURL()</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\" target=\"_blank\" rel=\"noopener\">FileReader</a>也有特别多的使用方法，就不详细展开了（我也记不住），FileReader.readAsDataURL(file)得到的事一段base64的字符串，，主要说下我们使用readAsDataURL实现图片预览的情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> readerFile = <span class=\"function\"><span class=\"params\">file</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fileInfo = &#123;</span><br><span class=\"line\">    name: file.name.substr(<span class=\"number\">0</span>, file.name.lastIndexOf(<span class=\"string\">'.'</span>)),</span><br><span class=\"line\">    fileSize: file.size,</span><br><span class=\"line\">    lastModified: file.lastModified,</span><br><span class=\"line\">    uploadStatus: <span class=\"string\">'uploading'</span>,</span><br><span class=\"line\">    file,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">  reader.onload = <span class=\"function\">(<span class=\"params\">ev</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fileInfo.url = ev.target.result;</span><br><span class=\"line\">    fileInfo.src = ev.target.result;</span><br><span class=\"line\">    resolve(fileInfo);</span><br><span class=\"line\">    reader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  reader.onerror = <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(err);</span><br><span class=\"line\">    reader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  reader.readAsDataURL(file);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样我们从后续的fileInfo中取出src属性赋值给对应的img标签就可以了，FileReader.readAsDataURL是异步操作，有流的概念，可以结合各种框架的state传递和保存（使用react框架，省略了dom操作）。</p>\n<h2 id=\"URL-createObjectURL\"><a href=\"#URL-createObjectURL\" class=\"headerlink\" title=\"URL.createObjectURL()\"></a>URL.createObjectURL()</h2><p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。<br>简单的理解一下就是将一个file或Blob类型的对象转为UTF-16的字符串，并保存在当前操作的document下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileElem\"</span> <span class=\"attr\">multiple</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"handleFiles(this.files)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileSelect\"</span>&gt;</span>Select some files<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>No files selected!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.URL = <span class=\"built_in\">window</span>.URL || <span class=\"built_in\">window</span>.webkitURL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fileSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"fileSelect\"</span>),</span><br><span class=\"line\">    fileElem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"fileElem\"</span>),</span><br><span class=\"line\">    fileList = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"fileList\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fileSelect.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fileElem) &#123;</span><br><span class=\"line\">    fileElem.click();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  e.preventDefault(); <span class=\"comment\">// prevent navigation to \"#\"</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleFiles</span>(<span class=\"params\">files</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!files.length) &#123;</span><br><span class=\"line\">    fileList.innerHTML = <span class=\"string\">\"&lt;p&gt;No files selected!&lt;/p&gt;\"</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fileList.innerHTML = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">    fileList.appendChild(list);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">      list.appendChild(li);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">      img.src = <span class=\"built_in\">window</span>.URL.createObjectURL(files[i]);</span><br><span class=\"line\">      img.height = <span class=\"number\">60</span>;</span><br><span class=\"line\">      img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(<span class=\"keyword\">this</span>.src);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      li.appendChild(img);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> info = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"span\"</span>);</span><br><span class=\"line\">      info.innerHTML = files[i].name + <span class=\"string\">\": \"</span> + files[i].size + <span class=\"string\">\" bytes\"</span>;</span><br><span class=\"line\">      li.appendChild(info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"URL-createObjectURL-VS-FileReader-readAsDataURL\"><a href=\"#URL-createObjectURL-VS-FileReader-readAsDataURL\" class=\"headerlink\" title=\"URL.createObjectURL() VS FileReader.readAsDataURL()\"></a>URL.createObjectURL() VS FileReader.readAsDataURL()</h2><ol>\n<li>返回值不同<ul>\n<li>FileReader.readAsDataURL(file)可以得到一段base64的字符串，长度和文件大小正相关</li>\n<li>URL.createObjectURL(file)可以得到当前文件的一个内存URL。</li>\n</ul>\n</li>\n<li>执行机制<ul>\n<li>FileReader.readAsDataURL(file)通过回调的形式返回，异步执行。</li>\n<li>URL.createObjectURL(file)直接返回，同步执行。</li>\n</ul>\n</li>\n<li>回收机制<ul>\n<li>FileReader.readAsDataURL(file)依照JS垃圾回收机制自动从内存中清理。</li>\n<li>URL.createObjectURL(file)存在于当前doucment内，清除方式只有unload()事件或revokeObjectURL()手动清除 。</li>\n</ul>\n</li>\n<li>兼容性<ul>\n<li>IE10以上</li>\n</ul>\n</li>\n</ol>\n<p>总体来说，使用URL.createObjectURL(file)更为方便（同步），性能优秀，但是需要考虑手动释放内存的问题。FileReader.readAsDataURL(file)胜在直接转为base64格式，更方便用于后续的其他数据操作场景（如上传），但是base64的长度会影响页面的性能。如果单纯的实现预览图片的功能，推荐使用URL.createObjectURL(file)。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在实际的业务场景里经常会用到图片或者视频预览的需求，之前一直使用FileReader.readAsDataURL()实现，现在发现URL.createObjectURL()也有同样的能力，那么使用他们两有啥不同呢？</p>\n</blockquote>\n<h2 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h2><p>首先大概说下 File 对象，它是一个特殊的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\">blob</a> 类型，围绕文件上传的场景有特别多神奇的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications\" target=\"_blank\" rel=\"noopener\">用法</a>。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>File.lastModified： 返回当前 File 对象所引用文件最后修改时间，自 UNIX 时间起始值（1970年1月1日 00:00:00 UTC）以来的毫秒数。</li>\n<li>File.lastModifiedDate： 返回当前 File 对象所引用文件最后修改时间的 Date 对象。</li>\n<li>File.name: 文件名</li>\n<li>File.type: 返回文件的 MIME TYPE</li>\n<li>File.size: 返回文件的大小</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>File 接口没有定义任何方法，但是它从 Blob 接口继承了以下方法：<br>一般为了兼容各个浏览器我们要做如下的处理来使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FileReader-readAsDataURL\"><a href=\"#FileReader-readAsDataURL\" class=\"headerlink\" title=\"FileReader.readAsDataURL()\"></a>FileReader.readAsDataURL()</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\" target=\"_blank\" rel=\"noopener\">FileReader</a>也有特别多的使用方法，就不详细展开了（我也记不住），FileReader.readAsDataURL(file)得到的事一段base64的字符串，，主要说下我们使用readAsDataURL实现图片预览的情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> readerFile = <span class=\"function\"><span class=\"params\">file</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fileInfo = &#123;</span><br><span class=\"line\">    name: file.name.substr(<span class=\"number\">0</span>, file.name.lastIndexOf(<span class=\"string\">'.'</span>)),</span><br><span class=\"line\">    fileSize: file.size,</span><br><span class=\"line\">    lastModified: file.lastModified,</span><br><span class=\"line\">    uploadStatus: <span class=\"string\">'uploading'</span>,</span><br><span class=\"line\">    file,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">  reader.onload = <span class=\"function\">(<span class=\"params\">ev</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fileInfo.url = ev.target.result;</span><br><span class=\"line\">    fileInfo.src = ev.target.result;</span><br><span class=\"line\">    resolve(fileInfo);</span><br><span class=\"line\">    reader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  reader.onerror = <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(err);</span><br><span class=\"line\">    reader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  reader.readAsDataURL(file);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样我们从后续的fileInfo中取出src属性赋值给对应的img标签就可以了，FileReader.readAsDataURL是异步操作，有流的概念，可以结合各种框架的state传递和保存（使用react框架，省略了dom操作）。</p>\n<h2 id=\"URL-createObjectURL\"><a href=\"#URL-createObjectURL\" class=\"headerlink\" title=\"URL.createObjectURL()\"></a>URL.createObjectURL()</h2><p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。<br>简单的理解一下就是将一个file或Blob类型的对象转为UTF-16的字符串，并保存在当前操作的document下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileElem\"</span> <span class=\"attr\">multiple</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"handleFiles(this.files)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileSelect\"</span>&gt;</span>Select some files<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>No files selected!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.URL = <span class=\"built_in\">window</span>.URL || <span class=\"built_in\">window</span>.webkitURL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fileSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"fileSelect\"</span>),</span><br><span class=\"line\">    fileElem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"fileElem\"</span>),</span><br><span class=\"line\">    fileList = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"fileList\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fileSelect.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fileElem) &#123;</span><br><span class=\"line\">    fileElem.click();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  e.preventDefault(); <span class=\"comment\">// prevent navigation to \"#\"</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleFiles</span>(<span class=\"params\">files</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!files.length) &#123;</span><br><span class=\"line\">    fileList.innerHTML = <span class=\"string\">\"&lt;p&gt;No files selected!&lt;/p&gt;\"</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fileList.innerHTML = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">    fileList.appendChild(list);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">      list.appendChild(li);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">      img.src = <span class=\"built_in\">window</span>.URL.createObjectURL(files[i]);</span><br><span class=\"line\">      img.height = <span class=\"number\">60</span>;</span><br><span class=\"line\">      img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(<span class=\"keyword\">this</span>.src);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      li.appendChild(img);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> info = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"span\"</span>);</span><br><span class=\"line\">      info.innerHTML = files[i].name + <span class=\"string\">\": \"</span> + files[i].size + <span class=\"string\">\" bytes\"</span>;</span><br><span class=\"line\">      li.appendChild(info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"URL-createObjectURL-VS-FileReader-readAsDataURL\"><a href=\"#URL-createObjectURL-VS-FileReader-readAsDataURL\" class=\"headerlink\" title=\"URL.createObjectURL() VS FileReader.readAsDataURL()\"></a>URL.createObjectURL() VS FileReader.readAsDataURL()</h2><ol>\n<li>返回值不同<ul>\n<li>FileReader.readAsDataURL(file)可以得到一段base64的字符串，长度和文件大小正相关</li>\n<li>URL.createObjectURL(file)可以得到当前文件的一个内存URL。</li>\n</ul>\n</li>\n<li>执行机制<ul>\n<li>FileReader.readAsDataURL(file)通过回调的形式返回，异步执行。</li>\n<li>URL.createObjectURL(file)直接返回，同步执行。</li>\n</ul>\n</li>\n<li>回收机制<ul>\n<li>FileReader.readAsDataURL(file)依照JS垃圾回收机制自动从内存中清理。</li>\n<li>URL.createObjectURL(file)存在于当前doucment内，清除方式只有unload()事件或revokeObjectURL()手动清除 。</li>\n</ul>\n</li>\n<li>兼容性<ul>\n<li>IE10以上</li>\n</ul>\n</li>\n</ol>\n<p>总体来说，使用URL.createObjectURL(file)更为方便（同步），性能优秀，但是需要考虑手动释放内存的问题。FileReader.readAsDataURL(file)胜在直接转为base64格式，更方便用于后续的其他数据操作场景（如上传），但是base64的长度会影响页面的性能。如果单纯的实现预览图片的功能，推荐使用URL.createObjectURL(file)。</p>\n"},{"title":"Node模块机制","date":"2019-08-31T15:37:17.000Z","_content":"\n## CommonJS 模块规范\n主要分为模块引用、模块定义和模块标识3个部分。\n### 模块引用\n```JavaScript\nconst foo = require('foo')\n```\n### 模块定义\n使用require进行引入，上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一的出口。在模块中还存在一个module对象，代表模块自身。在Node中一个文件就是一个模块，将方法挂载到exports对象上作为属性即可定义导出的方式。\n```JavaScript\n// foo.js\nexports.sum = (a,b) => a+b;\n```\n### 模块标识\n模块标记就是传递给require()方法的参数，其实就是文件模块的路径。\n\n## Node的模块实现\n在Node中，模块分为两类:一类是Node提供的模块，称为核心模块;另一类是用户编写的，称为文件模块。\n- 核心模块在node源代码的编译过程中，编译进了二进制执行文件中。在NOde进程启动时，核心模块就直接被加载到内存中。\n- 文件模块则是在 `运行时动态加载`，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。\n注：Node对引用过的模块多会进行缓存，缓存的是编译和执行后的对象。\n\n在Node中引入模块，需要经历下面3个步骤\n1. 路径分析\n2. 文件定位\n3. 编译执行\n  \n### 路径分析\nrequire接受一个模块标识作为参数，基于这个参数进行模块查找。\n核心模块和路径形式的引用不细作说明。\n这里说下 `自定义模块` 分析过程,自定义模块指的是既非核心模块，也不是路径形式的标识符。\n模块路径是Node在定位未见时的查找策略，具体表现为一个路径组成的数组。路径的生成规则大概如下：\n- 当前文件目录下的node_modules目录。\n- 父目录下的node_modules目录。\n- 父目录的父目录下的node_modules目录。 \n- 沿路径向上逐级递归，直到根目录下的node_modules目录。\n\n### 文件定位\n- 扩展名\nrequire()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJS模块规范也允许在标识符中不包含文件扩展名，这种情况下，Node会按.js、.json、.node的次序补 足扩展名，依次尝试。\n- 目录分析和包\n在分析标识符的过程中，require()通过分析文件扩展名之后，可能没有查找到对应文件，但\n却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时Node会将目 录当做一个包来处理。\n在这个过程中，Node对CommonJS包规范进行了一定程度的支持。首先，Node在当前目录下 查找package.json(CommonJS包规范定义的包描述文件)，通过JSON.parse()解析出包描述对象， 从中取出main属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。\n而如果main属性指定的文件名错误，或者压根没有package.json文件，Node会将index当做默 认文件名，然后依次查找index.js、index.json、index.node。\n\n### 模块编译\n在Node中每个文件模块都是一个对象\n```JavaScript\nfunction Module(id, parent) { \n  this.id = id;\n  this.exports = {}; \n  this.parent = parent;\n  if (parent && parent.children) { \n    parent.children.push(this);\n  }\n  this.filename = null; \n  this.loaded = false; \n  this.children = [];\n}\n```\n编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对 象，然后根据路径载入并编译。对于不同的文件扩展名，其载入方法也有所不同，具体如下所示。\n- .js文件。通过fs模块同步读取文件后编译执行。\n- .node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。  .json文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n- 其余扩展名文件。它们都被当做.js文件载入\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能。\n\n#### JavaScript模块的编译\n回到CommonJS模块规范，我们知道每个模块文件中存在着require、exports、module这3个\n变量，但是它们在模块文件中并没有定义，那么从何而来呢?甚至在Node的API文档中，我们知 道每个模块中还有__filename、__dirname这两个变量的存在，它们又是从何而来的呢?如果我们 把直接定义模块的过程放诸在浏览器端，会存在污染全局变量的情况。\n事实上，在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。在头部添加 了(function (exports, require, module, __filename, __dirname) {\\n，在尾部添加了\\n});。 一个正常的JavaScript文件会被包装成如下的样子:\n```JavaScript\n(function (exports, require, module, __filename, __dirname) { \n  var math = require('math');\n  exports.area = function (radius) {\n    return Math.PI * radius * radius; \n  };\n });\n```\n这样每个模块文件之间都进行了作用域隔离。包装之后的代码会通过vm原生模块的\nrunInThisContext()方法执行(类似eval，只是具有明确上下文，不污染全局)，返回一个具体的 function对象。最后，将当前模块对象的exports属性、require()方法、module(模块对象自身)， 以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。\n这就是这些变量并没有定义在每个模块文件中却存在的原因。在执行之后，模块的exports 属性被返回给了调用方。exports属性上的任何方法和属性都可以被外部调用到，但是模块中的 其余变量或属性则不可直接被调用。\n\n此外，许多初学者都曾经纠结过为何存在exports的情况下，还存在module.exports。理想情\n况下，只要赋值给exports即可:\n```JavaScript\nexports = function () { // My Class\n```\n}; 但是通常都会得到一个失败的结果。其原因在于，exports对象是通过形参的方式传入的，\n直接赋值形参会改变形参的引用，但并不能改变作用域外的值。测试代码如下:\n```JavaScript\nvar change = function (a) { a = 100;\nconsole.log(a); // => 100\n};\nvar a = 10;\nchange(a); console.log(a); // => 10\n```\n如果要达到require引入一个类的效果，请赋值给module.exports对象。这个迂回的方案不改 变形参的引用。","source":"_posts/node-1.md","raw":"---\ntitle: Node模块机制\ndate: 2019-08-31 23:37:17\ncategories: \n- NODE\ntags:\n- NODE\n---\n\n## CommonJS 模块规范\n主要分为模块引用、模块定义和模块标识3个部分。\n### 模块引用\n```JavaScript\nconst foo = require('foo')\n```\n### 模块定义\n使用require进行引入，上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一的出口。在模块中还存在一个module对象，代表模块自身。在Node中一个文件就是一个模块，将方法挂载到exports对象上作为属性即可定义导出的方式。\n```JavaScript\n// foo.js\nexports.sum = (a,b) => a+b;\n```\n### 模块标识\n模块标记就是传递给require()方法的参数，其实就是文件模块的路径。\n\n## Node的模块实现\n在Node中，模块分为两类:一类是Node提供的模块，称为核心模块;另一类是用户编写的，称为文件模块。\n- 核心模块在node源代码的编译过程中，编译进了二进制执行文件中。在NOde进程启动时，核心模块就直接被加载到内存中。\n- 文件模块则是在 `运行时动态加载`，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。\n注：Node对引用过的模块多会进行缓存，缓存的是编译和执行后的对象。\n\n在Node中引入模块，需要经历下面3个步骤\n1. 路径分析\n2. 文件定位\n3. 编译执行\n  \n### 路径分析\nrequire接受一个模块标识作为参数，基于这个参数进行模块查找。\n核心模块和路径形式的引用不细作说明。\n这里说下 `自定义模块` 分析过程,自定义模块指的是既非核心模块，也不是路径形式的标识符。\n模块路径是Node在定位未见时的查找策略，具体表现为一个路径组成的数组。路径的生成规则大概如下：\n- 当前文件目录下的node_modules目录。\n- 父目录下的node_modules目录。\n- 父目录的父目录下的node_modules目录。 \n- 沿路径向上逐级递归，直到根目录下的node_modules目录。\n\n### 文件定位\n- 扩展名\nrequire()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJS模块规范也允许在标识符中不包含文件扩展名，这种情况下，Node会按.js、.json、.node的次序补 足扩展名，依次尝试。\n- 目录分析和包\n在分析标识符的过程中，require()通过分析文件扩展名之后，可能没有查找到对应文件，但\n却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时Node会将目 录当做一个包来处理。\n在这个过程中，Node对CommonJS包规范进行了一定程度的支持。首先，Node在当前目录下 查找package.json(CommonJS包规范定义的包描述文件)，通过JSON.parse()解析出包描述对象， 从中取出main属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。\n而如果main属性指定的文件名错误，或者压根没有package.json文件，Node会将index当做默 认文件名，然后依次查找index.js、index.json、index.node。\n\n### 模块编译\n在Node中每个文件模块都是一个对象\n```JavaScript\nfunction Module(id, parent) { \n  this.id = id;\n  this.exports = {}; \n  this.parent = parent;\n  if (parent && parent.children) { \n    parent.children.push(this);\n  }\n  this.filename = null; \n  this.loaded = false; \n  this.children = [];\n}\n```\n编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对 象，然后根据路径载入并编译。对于不同的文件扩展名，其载入方法也有所不同，具体如下所示。\n- .js文件。通过fs模块同步读取文件后编译执行。\n- .node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。  .json文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n- 其余扩展名文件。它们都被当做.js文件载入\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能。\n\n#### JavaScript模块的编译\n回到CommonJS模块规范，我们知道每个模块文件中存在着require、exports、module这3个\n变量，但是它们在模块文件中并没有定义，那么从何而来呢?甚至在Node的API文档中，我们知 道每个模块中还有__filename、__dirname这两个变量的存在，它们又是从何而来的呢?如果我们 把直接定义模块的过程放诸在浏览器端，会存在污染全局变量的情况。\n事实上，在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。在头部添加 了(function (exports, require, module, __filename, __dirname) {\\n，在尾部添加了\\n});。 一个正常的JavaScript文件会被包装成如下的样子:\n```JavaScript\n(function (exports, require, module, __filename, __dirname) { \n  var math = require('math');\n  exports.area = function (radius) {\n    return Math.PI * radius * radius; \n  };\n });\n```\n这样每个模块文件之间都进行了作用域隔离。包装之后的代码会通过vm原生模块的\nrunInThisContext()方法执行(类似eval，只是具有明确上下文，不污染全局)，返回一个具体的 function对象。最后，将当前模块对象的exports属性、require()方法、module(模块对象自身)， 以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。\n这就是这些变量并没有定义在每个模块文件中却存在的原因。在执行之后，模块的exports 属性被返回给了调用方。exports属性上的任何方法和属性都可以被外部调用到，但是模块中的 其余变量或属性则不可直接被调用。\n\n此外，许多初学者都曾经纠结过为何存在exports的情况下，还存在module.exports。理想情\n况下，只要赋值给exports即可:\n```JavaScript\nexports = function () { // My Class\n```\n}; 但是通常都会得到一个失败的结果。其原因在于，exports对象是通过形参的方式传入的，\n直接赋值形参会改变形参的引用，但并不能改变作用域外的值。测试代码如下:\n```JavaScript\nvar change = function (a) { a = 100;\nconsole.log(a); // => 100\n};\nvar a = 10;\nchange(a); console.log(a); // => 10\n```\n如果要达到require引入一个类的效果，请赋值给module.exports对象。这个迂回的方案不改 变形参的引用。","slug":"node-1","published":1,"updated":"2019-09-24T02:44:31.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dla000s80oxfnucn4gd","content":"<h2 id=\"CommonJS-模块规范\"><a href=\"#CommonJS-模块规范\" class=\"headerlink\" title=\"CommonJS 模块规范\"></a>CommonJS 模块规范</h2><p>主要分为模块引用、模块定义和模块标识3个部分。</p>\n<h3 id=\"模块引用\"><a href=\"#模块引用\" class=\"headerlink\" title=\"模块引用\"></a>模块引用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'foo'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块定义\"><a href=\"#模块定义\" class=\"headerlink\" title=\"模块定义\"></a>模块定义</h3><p>使用require进行引入，上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一的出口。在模块中还存在一个module对象，代表模块自身。在Node中一个文件就是一个模块，将方法挂载到exports对象上作为属性即可定义导出的方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\">exports.sum = <span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块标识\"><a href=\"#模块标识\" class=\"headerlink\" title=\"模块标识\"></a>模块标识</h3><p>模块标记就是传递给require()方法的参数，其实就是文件模块的路径。</p>\n<h2 id=\"Node的模块实现\"><a href=\"#Node的模块实现\" class=\"headerlink\" title=\"Node的模块实现\"></a>Node的模块实现</h2><p>在Node中，模块分为两类:一类是Node提供的模块，称为核心模块;另一类是用户编写的，称为文件模块。</p>\n<ul>\n<li>核心模块在node源代码的编译过程中，编译进了二进制执行文件中。在NOde进程启动时，核心模块就直接被加载到内存中。</li>\n<li>文件模块则是在 <code>运行时动态加载</code>，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。<br>注：Node对引用过的模块多会进行缓存，缓存的是编译和执行后的对象。</li>\n</ul>\n<p>在Node中引入模块，需要经历下面3个步骤</p>\n<ol>\n<li>路径分析</li>\n<li>文件定位</li>\n<li>编译执行</li>\n</ol>\n<h3 id=\"路径分析\"><a href=\"#路径分析\" class=\"headerlink\" title=\"路径分析\"></a>路径分析</h3><p>require接受一个模块标识作为参数，基于这个参数进行模块查找。<br>核心模块和路径形式的引用不细作说明。<br>这里说下 <code>自定义模块</code> 分析过程,自定义模块指的是既非核心模块，也不是路径形式的标识符。<br>模块路径是Node在定位未见时的查找策略，具体表现为一个路径组成的数组。路径的生成规则大概如下：</p>\n<ul>\n<li>当前文件目录下的node_modules目录。</li>\n<li>父目录下的node_modules目录。</li>\n<li>父目录的父目录下的node_modules目录。 </li>\n<li>沿路径向上逐级递归，直到根目录下的node_modules目录。</li>\n</ul>\n<h3 id=\"文件定位\"><a href=\"#文件定位\" class=\"headerlink\" title=\"文件定位\"></a>文件定位</h3><ul>\n<li>扩展名<br>require()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJS模块规范也允许在标识符中不包含文件扩展名，这种情况下，Node会按.js、.json、.node的次序补 足扩展名，依次尝试。</li>\n<li>目录分析和包<br>在分析标识符的过程中，require()通过分析文件扩展名之后，可能没有查找到对应文件，但<br>却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时Node会将目 录当做一个包来处理。<br>在这个过程中，Node对CommonJS包规范进行了一定程度的支持。首先，Node在当前目录下 查找package.json(CommonJS包规范定义的包描述文件)，通过JSON.parse()解析出包描述对象， 从中取出main属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。<br>而如果main属性指定的文件名错误，或者压根没有package.json文件，Node会将index当做默 认文件名，然后依次查找index.js、index.json、index.node。</li>\n</ul>\n<h3 id=\"模块编译\"><a href=\"#模块编译\" class=\"headerlink\" title=\"模块编译\"></a>模块编译</h3><p>在Node中每个文件模块都是一个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Module</span>(<span class=\"params\">id, parent</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.exports = &#123;&#125;; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parent &amp;&amp; parent.children) &#123; </span><br><span class=\"line\">    parent.children.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.filename = <span class=\"literal\">null</span>; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">false</span>; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对 象，然后根据路径载入并编译。对于不同的文件扩展名，其载入方法也有所不同，具体如下所示。</p>\n<ul>\n<li>.js文件。通过fs模块同步读取文件后编译执行。</li>\n<li>.node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。  .json文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。</li>\n<li>其余扩展名文件。它们都被当做.js文件载入<br>每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能。</li>\n</ul>\n<h4 id=\"JavaScript模块的编译\"><a href=\"#JavaScript模块的编译\" class=\"headerlink\" title=\"JavaScript模块的编译\"></a>JavaScript模块的编译</h4><p>回到CommonJS模块规范，我们知道每个模块文件中存在着require、exports、module这3个<br>变量，但是它们在模块文件中并没有定义，那么从何而来呢?甚至在Node的API文档中，我们知 道每个模块中还有<strong>filename、</strong>dirname这两个变量的存在，它们又是从何而来的呢?如果我们 把直接定义模块的过程放诸在浏览器端，会存在污染全局变量的情况。<br>事实上，在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。在头部添加 了(function (exports, require, module, __filename, __dirname) {\\n，在尾部添加了\\n});。 一个正常的JavaScript文件会被包装成如下的样子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports, require, module, __filename, __dirname</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\">  exports.area = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius; </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样每个模块文件之间都进行了作用域隔离。包装之后的代码会通过vm原生模块的<br>runInThisContext()方法执行(类似eval，只是具有明确上下文，不污染全局)，返回一个具体的 function对象。最后，将当前模块对象的exports属性、require()方法、module(模块对象自身)， 以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。<br>这就是这些变量并没有定义在每个模块文件中却存在的原因。在执行之后，模块的exports 属性被返回给了调用方。exports属性上的任何方法和属性都可以被外部调用到，但是模块中的 其余变量或属性则不可直接被调用。</p>\n<p>此外，许多初学者都曾经纠结过为何存在exports的情况下，还存在module.exports。理想情<br>况下，只要赋值给exports即可:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// My Class</span></span><br></pre></td></tr></table></figure>\n\n<p>}; 但是通常都会得到一个失败的结果。其原因在于，exports对象是通过形参的方式传入的，<br>直接赋值形参会改变形参的引用，但并不能改变作用域外的值。测试代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> change = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123; a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// =&gt; 100</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">change(a); <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// =&gt; 10</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要达到require引入一个类的效果，请赋值给module.exports对象。这个迂回的方案不改 变形参的引用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CommonJS-模块规范\"><a href=\"#CommonJS-模块规范\" class=\"headerlink\" title=\"CommonJS 模块规范\"></a>CommonJS 模块规范</h2><p>主要分为模块引用、模块定义和模块标识3个部分。</p>\n<h3 id=\"模块引用\"><a href=\"#模块引用\" class=\"headerlink\" title=\"模块引用\"></a>模块引用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'foo'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块定义\"><a href=\"#模块定义\" class=\"headerlink\" title=\"模块定义\"></a>模块定义</h3><p>使用require进行引入，上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一的出口。在模块中还存在一个module对象，代表模块自身。在Node中一个文件就是一个模块，将方法挂载到exports对象上作为属性即可定义导出的方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\">exports.sum = <span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块标识\"><a href=\"#模块标识\" class=\"headerlink\" title=\"模块标识\"></a>模块标识</h3><p>模块标记就是传递给require()方法的参数，其实就是文件模块的路径。</p>\n<h2 id=\"Node的模块实现\"><a href=\"#Node的模块实现\" class=\"headerlink\" title=\"Node的模块实现\"></a>Node的模块实现</h2><p>在Node中，模块分为两类:一类是Node提供的模块，称为核心模块;另一类是用户编写的，称为文件模块。</p>\n<ul>\n<li>核心模块在node源代码的编译过程中，编译进了二进制执行文件中。在NOde进程启动时，核心模块就直接被加载到内存中。</li>\n<li>文件模块则是在 <code>运行时动态加载</code>，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。<br>注：Node对引用过的模块多会进行缓存，缓存的是编译和执行后的对象。</li>\n</ul>\n<p>在Node中引入模块，需要经历下面3个步骤</p>\n<ol>\n<li>路径分析</li>\n<li>文件定位</li>\n<li>编译执行</li>\n</ol>\n<h3 id=\"路径分析\"><a href=\"#路径分析\" class=\"headerlink\" title=\"路径分析\"></a>路径分析</h3><p>require接受一个模块标识作为参数，基于这个参数进行模块查找。<br>核心模块和路径形式的引用不细作说明。<br>这里说下 <code>自定义模块</code> 分析过程,自定义模块指的是既非核心模块，也不是路径形式的标识符。<br>模块路径是Node在定位未见时的查找策略，具体表现为一个路径组成的数组。路径的生成规则大概如下：</p>\n<ul>\n<li>当前文件目录下的node_modules目录。</li>\n<li>父目录下的node_modules目录。</li>\n<li>父目录的父目录下的node_modules目录。 </li>\n<li>沿路径向上逐级递归，直到根目录下的node_modules目录。</li>\n</ul>\n<h3 id=\"文件定位\"><a href=\"#文件定位\" class=\"headerlink\" title=\"文件定位\"></a>文件定位</h3><ul>\n<li>扩展名<br>require()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJS模块规范也允许在标识符中不包含文件扩展名，这种情况下，Node会按.js、.json、.node的次序补 足扩展名，依次尝试。</li>\n<li>目录分析和包<br>在分析标识符的过程中，require()通过分析文件扩展名之后，可能没有查找到对应文件，但<br>却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时Node会将目 录当做一个包来处理。<br>在这个过程中，Node对CommonJS包规范进行了一定程度的支持。首先，Node在当前目录下 查找package.json(CommonJS包规范定义的包描述文件)，通过JSON.parse()解析出包描述对象， 从中取出main属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。<br>而如果main属性指定的文件名错误，或者压根没有package.json文件，Node会将index当做默 认文件名，然后依次查找index.js、index.json、index.node。</li>\n</ul>\n<h3 id=\"模块编译\"><a href=\"#模块编译\" class=\"headerlink\" title=\"模块编译\"></a>模块编译</h3><p>在Node中每个文件模块都是一个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Module</span>(<span class=\"params\">id, parent</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.exports = &#123;&#125;; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parent &amp;&amp; parent.children) &#123; </span><br><span class=\"line\">    parent.children.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.filename = <span class=\"literal\">null</span>; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">false</span>; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对 象，然后根据路径载入并编译。对于不同的文件扩展名，其载入方法也有所不同，具体如下所示。</p>\n<ul>\n<li>.js文件。通过fs模块同步读取文件后编译执行。</li>\n<li>.node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。  .json文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。</li>\n<li>其余扩展名文件。它们都被当做.js文件载入<br>每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能。</li>\n</ul>\n<h4 id=\"JavaScript模块的编译\"><a href=\"#JavaScript模块的编译\" class=\"headerlink\" title=\"JavaScript模块的编译\"></a>JavaScript模块的编译</h4><p>回到CommonJS模块规范，我们知道每个模块文件中存在着require、exports、module这3个<br>变量，但是它们在模块文件中并没有定义，那么从何而来呢?甚至在Node的API文档中，我们知 道每个模块中还有<strong>filename、</strong>dirname这两个变量的存在，它们又是从何而来的呢?如果我们 把直接定义模块的过程放诸在浏览器端，会存在污染全局变量的情况。<br>事实上，在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。在头部添加 了(function (exports, require, module, __filename, __dirname) {\\n，在尾部添加了\\n});。 一个正常的JavaScript文件会被包装成如下的样子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports, require, module, __filename, __dirname</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\">  exports.area = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius; </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样每个模块文件之间都进行了作用域隔离。包装之后的代码会通过vm原生模块的<br>runInThisContext()方法执行(类似eval，只是具有明确上下文，不污染全局)，返回一个具体的 function对象。最后，将当前模块对象的exports属性、require()方法、module(模块对象自身)， 以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。<br>这就是这些变量并没有定义在每个模块文件中却存在的原因。在执行之后，模块的exports 属性被返回给了调用方。exports属性上的任何方法和属性都可以被外部调用到，但是模块中的 其余变量或属性则不可直接被调用。</p>\n<p>此外，许多初学者都曾经纠结过为何存在exports的情况下，还存在module.exports。理想情<br>况下，只要赋值给exports即可:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// My Class</span></span><br></pre></td></tr></table></figure>\n\n<p>}; 但是通常都会得到一个失败的结果。其原因在于，exports对象是通过形参的方式传入的，<br>直接赋值形参会改变形参的引用，但并不能改变作用域外的值。测试代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> change = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123; a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// =&gt; 100</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">change(a); <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// =&gt; 10</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要达到require引入一个类的效果，请赋值给module.exports对象。这个迂回的方案不改 变形参的引用。</p>\n"},{"title":"Nginx 配置 SSL","date":"2019-08-31T02:35:31.000Z","_content":"\n> 域名貌似备案成功了，解析到腾讯云服务器ip后，发现直接访问 http协议 是可以的 换成 https 不行了。应该是没有配置SSL导致的。\n\n## 什么是HTTPS\nhttps 全称：Hyper Text Transfer Protocol over Secure Socket Layer，是http的安全版。即http下加入SSL协议层，因此https的安全基础就是SSL，所以加密内容需要SSL。\n\n## SSL原理\n- 浏览器发送一个https的请求给服务器；\n- 服务器要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面，这套证书其实就是一对公钥和私钥；\n- 服务器会把公钥传输给客户端；\n- 客户端（浏览器）收到公钥后，会验证其是否合法有效，无效会有警告提醒，有效则会生成一串随机数，并用收到的公钥加密；\n- 客户端把加密后的随机字符串传输给服务器；\n- 服务器收到加密随机字符串后，先用私钥解密（公钥加密，私钥解密），获取到这一串随机数后，再用这串随机字符串加密传输的数据（该加密为对称加密，所谓对称加密，就是将数据和私钥也就是这个随机字符串>通过某种算法混合在一起，这样除非知道私钥，否则无法获取数据内容）；\n- 服务器把加密后的数据传输给客户端；\n- 客户端收到数据后，再用自己的私钥也就是那个随机字符串解密；\n\n## 配置 with-http_ssl_module 模块\n首先需要申请一个证书，可以申请一个免费的。\n参考下面的 `其他方式` 部分可以直接在云服务厂商可视化界面申请并下载~\n然后会得到nginx版本证书，一个公钥（证书），一个私钥，将其上传到服务器。\n\n先确认`nginx`安装时已编译`http_ssl`模块，也就是执行`nginx -V`命令查看是否存在 `--with-http_ssl_module`。如果没有，则需要重新编译nginx将该模块加入。\n若有的话此步骤跳过\n若ssl模块没有先编译一下\n\n```bash\ncd /usr/local/src/nginx-1.12.1/  #nginx版本号可能不同哟\n\n./configure --help | grep -i ssl\n  --with-http_ssl_module \n  \n./configure --prefix=/usr/local/nginx --with-http_ssl_module\n\n```\n\n## 生成 ssl 秘钥对\n```bash\ncd /usr/local/nginx/conf\n\nyum install -y openssl\n```\n\n### 使用RSA算法生产key\n```bash\nopenssl genrsa -des3 -out tmp.key 2048\n# 生成一个rsa类型的密钥，且长度为2048，但是我们有发现，让我们设置密码，如果每次有人访问我们的站点，都需要输入密码，太麻烦了\n```\n所以我们要转换私钥，取消密码（其实tmp.key与zhdy.key密钥内容是一样的，只不过一个有密码一个没有）：\n```bash\nopenssl rsa -in tmp.key -out zhdy.key \n\nrm -f tmp.key\n```\n### 创建证书申请\n```\nopenssl req -new -key zhdy.key -out zhdy.csr\n```\n\n### 创建自签名的证书\n```bash\nopenssl x509 -req -days 365 -in zhdy.csr -signkey zhdy.key -out zhdy.crt\n```\n\n## Nginx 配置 ssl\n```bash\nserver\n{\n    listen 443;\n    server_name huguobo.site; # 换成你自己的域名服务哟\n    index index.html index.php;\n    root /path/to/your/file \n    ssl on;\n    ssl_certificate zhdy.crt;\n    ssl_certificate_key zhdy.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n}\n\n# ssl on; 代表着打开ssl\n#ssl_certificate zhdy.crt; 公钥\n# ssl_certificate_key zhdy.key; 私钥\n# ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 三种不同的协议\n```\n\n## 测试\n```bash\nnginx -t\nnginx restart\n```\n\n由于已经设置了443，所以我们使用curl -x 是不生效的。\n我们修改下/etc/hosts为: `yourip www.aaa.com`\n\n```bash\ncurl https://haha.com\n```\n报错显示为“此证书非安全证书”，但是ssl是已经成功配置了\n\n## 其他方式（更快捷）\n后来发现各个厂商也提供申请证书的入口，也提供 DNS 和 文件验证两种配置,大家也可以自行参考配置\n[腾讯云ssl控制台](https://console.cloud.tencent.com/ssl)\n[nginx配置文档](https://cloud.tencent.com/document/product/400/35244)\n\n这种从供应商处可以直接下载到证书，然后nginx的配置秘钥和证书都在 nginx 文件夹下\n\n从客户端传送文件到云主机（MAC）\n```bash\nscp  ./2_huguobo.site.key ./1_huguobo.site_bundle.crt  root@118.24.215.220:/usr/local/nginx/conf\n```\n登录云主机 nginx 配置\n```bash\n# Settings for a TLS enabled server.\n\n    server {\n        listen       443 ssl http2 default_server;\n        listen       [::]:443 ssl http2 default_server;\n        server_name  huguobo.site;\n\n        ssl on;\n        ssl_certificate \"/usr/local/nginx/conf/1_huguobo.site_bundle.crt\";\n        ssl_certificate_key \"/usr/local/nginx/conf/2_huguobo.site.key\";\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n           root /home/hexoBlog; # your path\n           index index.html;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n   }\n\n```\n## 强制HTTPS\n我没有做强制https。但是需要的话，改下 nginx 配置文件即可\nhttp 默认是`80`端口 ，https 是`443`端口\n```bash\nserver{\n      listen 80;    #表示监听80端口\n      server_name huguobo.site\n      location / {    #将80端口强制转为https\n          rewrite (.*) https://huguobo.site$1 permanent;\n      }\n}\n```\n","source":"_posts/nginx配置ssl.md","raw":"---\ntitle: Nginx 配置 SSL\ndate: 2019-08-31 10:35:31\ncategories: \n- devOps\ntags:\n- nginx\n- ssl\n- Https\n---\n\n> 域名貌似备案成功了，解析到腾讯云服务器ip后，发现直接访问 http协议 是可以的 换成 https 不行了。应该是没有配置SSL导致的。\n\n## 什么是HTTPS\nhttps 全称：Hyper Text Transfer Protocol over Secure Socket Layer，是http的安全版。即http下加入SSL协议层，因此https的安全基础就是SSL，所以加密内容需要SSL。\n\n## SSL原理\n- 浏览器发送一个https的请求给服务器；\n- 服务器要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面，这套证书其实就是一对公钥和私钥；\n- 服务器会把公钥传输给客户端；\n- 客户端（浏览器）收到公钥后，会验证其是否合法有效，无效会有警告提醒，有效则会生成一串随机数，并用收到的公钥加密；\n- 客户端把加密后的随机字符串传输给服务器；\n- 服务器收到加密随机字符串后，先用私钥解密（公钥加密，私钥解密），获取到这一串随机数后，再用这串随机字符串加密传输的数据（该加密为对称加密，所谓对称加密，就是将数据和私钥也就是这个随机字符串>通过某种算法混合在一起，这样除非知道私钥，否则无法获取数据内容）；\n- 服务器把加密后的数据传输给客户端；\n- 客户端收到数据后，再用自己的私钥也就是那个随机字符串解密；\n\n## 配置 with-http_ssl_module 模块\n首先需要申请一个证书，可以申请一个免费的。\n参考下面的 `其他方式` 部分可以直接在云服务厂商可视化界面申请并下载~\n然后会得到nginx版本证书，一个公钥（证书），一个私钥，将其上传到服务器。\n\n先确认`nginx`安装时已编译`http_ssl`模块，也就是执行`nginx -V`命令查看是否存在 `--with-http_ssl_module`。如果没有，则需要重新编译nginx将该模块加入。\n若有的话此步骤跳过\n若ssl模块没有先编译一下\n\n```bash\ncd /usr/local/src/nginx-1.12.1/  #nginx版本号可能不同哟\n\n./configure --help | grep -i ssl\n  --with-http_ssl_module \n  \n./configure --prefix=/usr/local/nginx --with-http_ssl_module\n\n```\n\n## 生成 ssl 秘钥对\n```bash\ncd /usr/local/nginx/conf\n\nyum install -y openssl\n```\n\n### 使用RSA算法生产key\n```bash\nopenssl genrsa -des3 -out tmp.key 2048\n# 生成一个rsa类型的密钥，且长度为2048，但是我们有发现，让我们设置密码，如果每次有人访问我们的站点，都需要输入密码，太麻烦了\n```\n所以我们要转换私钥，取消密码（其实tmp.key与zhdy.key密钥内容是一样的，只不过一个有密码一个没有）：\n```bash\nopenssl rsa -in tmp.key -out zhdy.key \n\nrm -f tmp.key\n```\n### 创建证书申请\n```\nopenssl req -new -key zhdy.key -out zhdy.csr\n```\n\n### 创建自签名的证书\n```bash\nopenssl x509 -req -days 365 -in zhdy.csr -signkey zhdy.key -out zhdy.crt\n```\n\n## Nginx 配置 ssl\n```bash\nserver\n{\n    listen 443;\n    server_name huguobo.site; # 换成你自己的域名服务哟\n    index index.html index.php;\n    root /path/to/your/file \n    ssl on;\n    ssl_certificate zhdy.crt;\n    ssl_certificate_key zhdy.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n}\n\n# ssl on; 代表着打开ssl\n#ssl_certificate zhdy.crt; 公钥\n# ssl_certificate_key zhdy.key; 私钥\n# ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 三种不同的协议\n```\n\n## 测试\n```bash\nnginx -t\nnginx restart\n```\n\n由于已经设置了443，所以我们使用curl -x 是不生效的。\n我们修改下/etc/hosts为: `yourip www.aaa.com`\n\n```bash\ncurl https://haha.com\n```\n报错显示为“此证书非安全证书”，但是ssl是已经成功配置了\n\n## 其他方式（更快捷）\n后来发现各个厂商也提供申请证书的入口，也提供 DNS 和 文件验证两种配置,大家也可以自行参考配置\n[腾讯云ssl控制台](https://console.cloud.tencent.com/ssl)\n[nginx配置文档](https://cloud.tencent.com/document/product/400/35244)\n\n这种从供应商处可以直接下载到证书，然后nginx的配置秘钥和证书都在 nginx 文件夹下\n\n从客户端传送文件到云主机（MAC）\n```bash\nscp  ./2_huguobo.site.key ./1_huguobo.site_bundle.crt  root@118.24.215.220:/usr/local/nginx/conf\n```\n登录云主机 nginx 配置\n```bash\n# Settings for a TLS enabled server.\n\n    server {\n        listen       443 ssl http2 default_server;\n        listen       [::]:443 ssl http2 default_server;\n        server_name  huguobo.site;\n\n        ssl on;\n        ssl_certificate \"/usr/local/nginx/conf/1_huguobo.site_bundle.crt\";\n        ssl_certificate_key \"/usr/local/nginx/conf/2_huguobo.site.key\";\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n           root /home/hexoBlog; # your path\n           index index.html;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n   }\n\n```\n## 强制HTTPS\n我没有做强制https。但是需要的话，改下 nginx 配置文件即可\nhttp 默认是`80`端口 ，https 是`443`端口\n```bash\nserver{\n      listen 80;    #表示监听80端口\n      server_name huguobo.site\n      location / {    #将80端口强制转为https\n          rewrite (.*) https://huguobo.site$1 permanent;\n      }\n}\n```\n","slug":"nginx配置ssl","published":1,"updated":"2019-09-08T02:26:35.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dlc000w80ox73ah2vh3","content":"<blockquote>\n<p>域名貌似备案成功了，解析到腾讯云服务器ip后，发现直接访问 http协议 是可以的 换成 https 不行了。应该是没有配置SSL导致的。</p>\n</blockquote>\n<h2 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h2><p>https 全称：Hyper Text Transfer Protocol over Secure Socket Layer，是http的安全版。即http下加入SSL协议层，因此https的安全基础就是SSL，所以加密内容需要SSL。</p>\n<h2 id=\"SSL原理\"><a href=\"#SSL原理\" class=\"headerlink\" title=\"SSL原理\"></a>SSL原理</h2><ul>\n<li>浏览器发送一个https的请求给服务器；</li>\n<li>服务器要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面，这套证书其实就是一对公钥和私钥；</li>\n<li>服务器会把公钥传输给客户端；</li>\n<li>客户端（浏览器）收到公钥后，会验证其是否合法有效，无效会有警告提醒，有效则会生成一串随机数，并用收到的公钥加密；</li>\n<li>客户端把加密后的随机字符串传输给服务器；</li>\n<li>服务器收到加密随机字符串后，先用私钥解密（公钥加密，私钥解密），获取到这一串随机数后，再用这串随机字符串加密传输的数据（该加密为对称加密，所谓对称加密，就是将数据和私钥也就是这个随机字符串&gt;通过某种算法混合在一起，这样除非知道私钥，否则无法获取数据内容）；</li>\n<li>服务器把加密后的数据传输给客户端；</li>\n<li>客户端收到数据后，再用自己的私钥也就是那个随机字符串解密；</li>\n</ul>\n<h2 id=\"配置-with-http-ssl-module-模块\"><a href=\"#配置-with-http-ssl-module-模块\" class=\"headerlink\" title=\"配置 with-http_ssl_module 模块\"></a>配置 with-http_ssl_module 模块</h2><p>首先需要申请一个证书，可以申请一个免费的。<br>参考下面的 <code>其他方式</code> 部分可以直接在云服务厂商可视化界面申请并下载~<br>然后会得到nginx版本证书，一个公钥（证书），一个私钥，将其上传到服务器。</p>\n<p>先确认<code>nginx</code>安装时已编译<code>http_ssl</code>模块，也就是执行<code>nginx -V</code>命令查看是否存在 <code>--with-http_ssl_module</code>。如果没有，则需要重新编译nginx将该模块加入。<br>若有的话此步骤跳过<br>若ssl模块没有先编译一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/src/nginx-1.12.1/  <span class=\"comment\">#nginx版本号可能不同哟</span></span><br><span class=\"line\"></span><br><span class=\"line\">./configure --<span class=\"built_in\">help</span> | grep -i ssl</span><br><span class=\"line\">  --with-http_ssl_module </span><br><span class=\"line\">  </span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --with-http_ssl_module</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成-ssl-秘钥对\"><a href=\"#生成-ssl-秘钥对\" class=\"headerlink\" title=\"生成 ssl 秘钥对\"></a>生成 ssl 秘钥对</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/conf</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y openssl</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用RSA算法生产key\"><a href=\"#使用RSA算法生产key\" class=\"headerlink\" title=\"使用RSA算法生产key\"></a>使用RSA算法生产key</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out tmp.key 2048</span><br><span class=\"line\"><span class=\"comment\"># 生成一个rsa类型的密钥，且长度为2048，但是我们有发现，让我们设置密码，如果每次有人访问我们的站点，都需要输入密码，太麻烦了</span></span><br></pre></td></tr></table></figure>\n\n<p>所以我们要转换私钥，取消密码（其实tmp.key与zhdy.key密钥内容是一样的，只不过一个有密码一个没有）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> tmp.key -out zhdy.key </span><br><span class=\"line\"></span><br><span class=\"line\">rm -f tmp.key</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建证书申请\"><a href=\"#创建证书申请\" class=\"headerlink\" title=\"创建证书申请\"></a>创建证书申请</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key zhdy.key -out zhdy.csr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自签名的证书\"><a href=\"#创建自签名的证书\" class=\"headerlink\" title=\"创建自签名的证书\"></a>创建自签名的证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 365 -<span class=\"keyword\">in</span> zhdy.csr -signkey zhdy.key -out zhdy.crt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx-配置-ssl\"><a href=\"#Nginx-配置-ssl\" class=\"headerlink\" title=\"Nginx 配置 ssl\"></a>Nginx 配置 ssl</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">    server_name huguobo.site; <span class=\"comment\"># 换成你自己的域名服务哟</span></span><br><span class=\"line\">    index index.html index.php;</span><br><span class=\"line\">    root /path/to/your/file </span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate zhdy.crt;</span><br><span class=\"line\">    ssl_certificate_key zhdy.key;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ssl on; 代表着打开ssl</span></span><br><span class=\"line\"><span class=\"comment\">#ssl_certificate zhdy.crt; 公钥</span></span><br><span class=\"line\"><span class=\"comment\"># ssl_certificate_key zhdy.key; 私钥</span></span><br><span class=\"line\"><span class=\"comment\"># ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 三种不同的协议</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx restart</span><br></pre></td></tr></table></figure>\n\n<p>由于已经设置了443，所以我们使用curl -x 是不生效的。<br>我们修改下/etc/hosts为: <code>yourip www.aaa.com</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://haha.com</span><br></pre></td></tr></table></figure>\n\n<p>报错显示为“此证书非安全证书”，但是ssl是已经成功配置了</p>\n<h2 id=\"其他方式（更快捷）\"><a href=\"#其他方式（更快捷）\" class=\"headerlink\" title=\"其他方式（更快捷）\"></a>其他方式（更快捷）</h2><p>后来发现各个厂商也提供申请证书的入口，也提供 DNS 和 文件验证两种配置,大家也可以自行参考配置<br><a href=\"https://console.cloud.tencent.com/ssl\" target=\"_blank\" rel=\"noopener\">腾讯云ssl控制台</a><br><a href=\"https://cloud.tencent.com/document/product/400/35244\" target=\"_blank\" rel=\"noopener\">nginx配置文档</a></p>\n<p>这种从供应商处可以直接下载到证书，然后nginx的配置秘钥和证书都在 nginx 文件夹下</p>\n<p>从客户端传送文件到云主机（MAC）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp  ./2_huguobo.site.key ./1_huguobo.site_bundle.crt  root@118.24.215.220:/usr/<span class=\"built_in\">local</span>/nginx/conf</span><br></pre></td></tr></table></figure>\n\n<p>登录云主机 nginx 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Settings for a TLS enabled server.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       443 ssl http2 default_server;</span><br><span class=\"line\">        listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">        server_name  huguobo.site;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate <span class=\"string\">\"/usr/local/nginx/conf/1_huguobo.site_bundle.crt\"</span>;</span><br><span class=\"line\">        ssl_certificate_key <span class=\"string\">\"/usr/local/nginx/conf/2_huguobo.site.key\"</span>;</span><br><span class=\"line\">        ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">        ssl_session_timeout  10m;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; <span class=\"comment\">#请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">           root /home/hexoBlog; <span class=\"comment\"># your path</span></span><br><span class=\"line\">           index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制HTTPS\"><a href=\"#强制HTTPS\" class=\"headerlink\" title=\"强制HTTPS\"></a>强制HTTPS</h2><p>我没有做强制https。但是需要的话，改下 nginx 配置文件即可<br>http 默认是<code>80</code>端口 ，https 是<code>443</code>端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">      listen 80;    <span class=\"comment\">#表示监听80端口</span></span><br><span class=\"line\">      server_name huguobo.site</span><br><span class=\"line\">      location / &#123;    <span class=\"comment\">#将80端口强制转为https</span></span><br><span class=\"line\">          rewrite (.*) https://huguobo.site<span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>域名貌似备案成功了，解析到腾讯云服务器ip后，发现直接访问 http协议 是可以的 换成 https 不行了。应该是没有配置SSL导致的。</p>\n</blockquote>\n<h2 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h2><p>https 全称：Hyper Text Transfer Protocol over Secure Socket Layer，是http的安全版。即http下加入SSL协议层，因此https的安全基础就是SSL，所以加密内容需要SSL。</p>\n<h2 id=\"SSL原理\"><a href=\"#SSL原理\" class=\"headerlink\" title=\"SSL原理\"></a>SSL原理</h2><ul>\n<li>浏览器发送一个https的请求给服务器；</li>\n<li>服务器要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面，这套证书其实就是一对公钥和私钥；</li>\n<li>服务器会把公钥传输给客户端；</li>\n<li>客户端（浏览器）收到公钥后，会验证其是否合法有效，无效会有警告提醒，有效则会生成一串随机数，并用收到的公钥加密；</li>\n<li>客户端把加密后的随机字符串传输给服务器；</li>\n<li>服务器收到加密随机字符串后，先用私钥解密（公钥加密，私钥解密），获取到这一串随机数后，再用这串随机字符串加密传输的数据（该加密为对称加密，所谓对称加密，就是将数据和私钥也就是这个随机字符串&gt;通过某种算法混合在一起，这样除非知道私钥，否则无法获取数据内容）；</li>\n<li>服务器把加密后的数据传输给客户端；</li>\n<li>客户端收到数据后，再用自己的私钥也就是那个随机字符串解密；</li>\n</ul>\n<h2 id=\"配置-with-http-ssl-module-模块\"><a href=\"#配置-with-http-ssl-module-模块\" class=\"headerlink\" title=\"配置 with-http_ssl_module 模块\"></a>配置 with-http_ssl_module 模块</h2><p>首先需要申请一个证书，可以申请一个免费的。<br>参考下面的 <code>其他方式</code> 部分可以直接在云服务厂商可视化界面申请并下载~<br>然后会得到nginx版本证书，一个公钥（证书），一个私钥，将其上传到服务器。</p>\n<p>先确认<code>nginx</code>安装时已编译<code>http_ssl</code>模块，也就是执行<code>nginx -V</code>命令查看是否存在 <code>--with-http_ssl_module</code>。如果没有，则需要重新编译nginx将该模块加入。<br>若有的话此步骤跳过<br>若ssl模块没有先编译一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/src/nginx-1.12.1/  <span class=\"comment\">#nginx版本号可能不同哟</span></span><br><span class=\"line\"></span><br><span class=\"line\">./configure --<span class=\"built_in\">help</span> | grep -i ssl</span><br><span class=\"line\">  --with-http_ssl_module </span><br><span class=\"line\">  </span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --with-http_ssl_module</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成-ssl-秘钥对\"><a href=\"#生成-ssl-秘钥对\" class=\"headerlink\" title=\"生成 ssl 秘钥对\"></a>生成 ssl 秘钥对</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/conf</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y openssl</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用RSA算法生产key\"><a href=\"#使用RSA算法生产key\" class=\"headerlink\" title=\"使用RSA算法生产key\"></a>使用RSA算法生产key</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out tmp.key 2048</span><br><span class=\"line\"><span class=\"comment\"># 生成一个rsa类型的密钥，且长度为2048，但是我们有发现，让我们设置密码，如果每次有人访问我们的站点，都需要输入密码，太麻烦了</span></span><br></pre></td></tr></table></figure>\n\n<p>所以我们要转换私钥，取消密码（其实tmp.key与zhdy.key密钥内容是一样的，只不过一个有密码一个没有）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> tmp.key -out zhdy.key </span><br><span class=\"line\"></span><br><span class=\"line\">rm -f tmp.key</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建证书申请\"><a href=\"#创建证书申请\" class=\"headerlink\" title=\"创建证书申请\"></a>创建证书申请</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key zhdy.key -out zhdy.csr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自签名的证书\"><a href=\"#创建自签名的证书\" class=\"headerlink\" title=\"创建自签名的证书\"></a>创建自签名的证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 365 -<span class=\"keyword\">in</span> zhdy.csr -signkey zhdy.key -out zhdy.crt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx-配置-ssl\"><a href=\"#Nginx-配置-ssl\" class=\"headerlink\" title=\"Nginx 配置 ssl\"></a>Nginx 配置 ssl</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">    server_name huguobo.site; <span class=\"comment\"># 换成你自己的域名服务哟</span></span><br><span class=\"line\">    index index.html index.php;</span><br><span class=\"line\">    root /path/to/your/file </span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate zhdy.crt;</span><br><span class=\"line\">    ssl_certificate_key zhdy.key;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ssl on; 代表着打开ssl</span></span><br><span class=\"line\"><span class=\"comment\">#ssl_certificate zhdy.crt; 公钥</span></span><br><span class=\"line\"><span class=\"comment\"># ssl_certificate_key zhdy.key; 私钥</span></span><br><span class=\"line\"><span class=\"comment\"># ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 三种不同的协议</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx restart</span><br></pre></td></tr></table></figure>\n\n<p>由于已经设置了443，所以我们使用curl -x 是不生效的。<br>我们修改下/etc/hosts为: <code>yourip www.aaa.com</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://haha.com</span><br></pre></td></tr></table></figure>\n\n<p>报错显示为“此证书非安全证书”，但是ssl是已经成功配置了</p>\n<h2 id=\"其他方式（更快捷）\"><a href=\"#其他方式（更快捷）\" class=\"headerlink\" title=\"其他方式（更快捷）\"></a>其他方式（更快捷）</h2><p>后来发现各个厂商也提供申请证书的入口，也提供 DNS 和 文件验证两种配置,大家也可以自行参考配置<br><a href=\"https://console.cloud.tencent.com/ssl\" target=\"_blank\" rel=\"noopener\">腾讯云ssl控制台</a><br><a href=\"https://cloud.tencent.com/document/product/400/35244\" target=\"_blank\" rel=\"noopener\">nginx配置文档</a></p>\n<p>这种从供应商处可以直接下载到证书，然后nginx的配置秘钥和证书都在 nginx 文件夹下</p>\n<p>从客户端传送文件到云主机（MAC）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp  ./2_huguobo.site.key ./1_huguobo.site_bundle.crt  root@118.24.215.220:/usr/<span class=\"built_in\">local</span>/nginx/conf</span><br></pre></td></tr></table></figure>\n\n<p>登录云主机 nginx 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Settings for a TLS enabled server.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       443 ssl http2 default_server;</span><br><span class=\"line\">        listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">        server_name  huguobo.site;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate <span class=\"string\">\"/usr/local/nginx/conf/1_huguobo.site_bundle.crt\"</span>;</span><br><span class=\"line\">        ssl_certificate_key <span class=\"string\">\"/usr/local/nginx/conf/2_huguobo.site.key\"</span>;</span><br><span class=\"line\">        ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">        ssl_session_timeout  10m;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; <span class=\"comment\">#请按照这个套件配置，配置加密套件，写法遵循 openssl 标准。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">           root /home/hexoBlog; <span class=\"comment\"># your path</span></span><br><span class=\"line\">           index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制HTTPS\"><a href=\"#强制HTTPS\" class=\"headerlink\" title=\"强制HTTPS\"></a>强制HTTPS</h2><p>我没有做强制https。但是需要的话，改下 nginx 配置文件即可<br>http 默认是<code>80</code>端口 ，https 是<code>443</code>端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">      listen 80;    <span class=\"comment\">#表示监听80端口</span></span><br><span class=\"line\">      server_name huguobo.site</span><br><span class=\"line\">      location / &#123;    <span class=\"comment\">#将80端口强制转为https</span></span><br><span class=\"line\">          rewrite (.*) https://huguobo.site<span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"操作系统中的进程和线程","date":"2019-10-10T03:07:04.000Z","_content":"\n> 作为一个前端工程师，即使接触了node后，对于linux和操作系统等计算机基础知识的欠缺还是一个很大的问题。大学的操作系统课靠着死记硬背就过去了，现在还是要还，通过本文的梳理，希望能真正的理解操作系统中进程和线程的概念\n\n## 定义\n- 进程（Process）： 操作系统中拥有资源和调度的基本单位。\n- 线程（Thread）： 线程就是进程中并发执行的基本单元，线程也因此被称为“轻量级进程”。\n\n[进程与现成的一个简单解释-阮一峰](http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html)\n\n##  进程和线程的关系\n- 一个进程可以拥有多个线程，一个线程必须要有一个父进程\n- 线程之间共享父进程的共享资源，相互之间协同完成进程所要完成的任务\n- 一个线程可以创建和撤销另一个线程，同一个进程的多个线程之间可以并发执行\n\n## 进程之间的交互\n通过TCP/IP的端口来实现\n\n## 线程之间的交互\n线程的通信就比较简单，有一大块共享的内存，只要大家的指针是同一个就可以看到各自的内存。\n\n## 进程的多层调度\n从硬盘上的可执行文件转为内存中的执行进程涉及到如下两层调度。\n\n### 作业调度\n作业调度是将硬盘上执行文件调度到内存中成为进程的过程，经历过该调度的进程处于就绪状态等待分配CPU资源。多个作业请求调度时，有许多经典算法可以采用：\n- 先来先服务\n- 优先级调度\n- 短作业优先\n\n### 进程调度\n进程调度是指在就绪队列中排队的就绪进程获取CPU时间片资源的过程。进程调度算法是需要介绍的重点,从较大的方向上分，其主要包括两类:\n\n1.基于优先权调度的算法\n- 静态优先权调度\n- 动态优先权调度\n- 抢占式调度\n- 非抢占式调度\n\n2.基于时间片轮转的调度算法\n基于时间片的调度算法将就绪进程排列成一个队列，为队列中每个就绪进程分配指定的时间片资源。若在规定的时间片内进程未执行完毕，那么该进程将再次加入队列的尾部等待下一次时间片资源分配。\n\n\n## 同步机制\n经典的线程同步问题：\n1. 生产者与消费者问题：消费者线程和生产者线程同时访问一个总大小为N的临界资源池。当资源池中资源数目为N时，生产者线程不能往其中添加数据，此时临界资源池记为满状态。当资源池中资源数目为0时，消费者线程不能从资源池中拿去数据，此时临界资源池记为空状态。在这样一个场景下，需要实现三个点:\n- 消费者线程和生产者线程临界资源池的访问是互斥的。\n- 临界资源池在满状态时，生产者线程放入数据操作必须阻塞，等待资源池非满状态时才能继续放入\n- 临界资源池空状态时，消费者线程取数据的操作必须阻塞，等待资源池非空状态时才能继续取出。\n**解决方法：互斥锁和条件变量**\n\n2. 哲学家就餐问题\n![](/../images/dinning.png)\n五个哲学家们围坐在一个圆桌上，每个哲学家左右两侧都放了一只筷子。当哲学家们想要就就餐时，会试图拿起离自己最近的筷子。一只一只这样拿筷子。当哲学家拿齐一双筷子后，就开始就餐。就餐完毕后将所有筷子放回原处，开始思考哲学。\n那么为什么要构造出这样一个关于哲学家就餐的场景呢？\n主要是构建出一个因为线程同步不当而造成死锁的场景，倘若哲学家门同时拿起来自己左侧的筷子后，当哲学再次试图去拿右侧筷子时，所有哲学家都无法获取就餐机会，陷入僵局。这也是进程同步中的死锁问题。\n**解决方法：**\n- 至多允许四个哲学家同时去拿左边的筷子，最终保证至少有一个科学家能进餐，并且用完之后释放筷子，从而使更多的哲学家能够拿到筷子。\n- 规定奇数号科学家先拿左边的筷子，然后拿右边的筷子。偶数号科学家先拿右边的筷子，然后那左边的筷子。\n- 仅当科学家左右两只筷子都能用的时候，才允许他进餐\n\n3.读者-写者问题\n对于一个文件，存在多个线程同时读取以及多个线程同时写入。在这种条件下要求对文件的访问不能混乱。那么要求读线程和写线程必须满足如下要求:\n- 读线程和写线程之间对文件的访问是互斥的\n- 写线程之间对文件的访问是互斥的\n- 读线程之间对文件的访问不需要互斥\n**解决办法：读写锁**\n\n## 死锁\n首先自己分析下产生死锁的原因：竞争贡献资源&进程/线程间推进顺序不合理\n\n其实线程产生死锁有4个必要条件\n- 互斥条件，线程对资源的获取具有排他性，在获取资源的同时独占资源，不允许其他线程访问共享资源。\n- 请求和保持条件，线程在获取某个资源之后，若再次申请或许新的资源但被阻塞时，并不释放已占有的资源。\n- 不剥夺条件，线程获取资源之后，不会因为其他线程竞争而放弃资源。只能等到使用完毕或者主动释放。\n- 环路条件,当线程之间发生死锁的时候，必然存在一个线程->资源之间的环形链路。比如线程P1等到线程P2占用的某个资源，线程P2等待线程P1占用的谋和资源\n  \n## 死锁的解决方法\n- 预防：破坏死锁产生的必要条件\n- 避免：[银行家算法](https://zh.wikipedia.org/zh-hans/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95)\n- 检测：提供发现机制，杀死死锁进程\n\n## 通信机制\n进程/线程之间的同步其实是一种通信机制，但是同步机制只是一种小规模的数据通信。此处介绍的通信机制是应对较大规模的数据传输。此处以进程之间的通信机制为例介绍\n\n- 共享存储系统\n共享存储系统比较容易理解，就是多个进程拥有共同存储空间，通过修改/读取同一块区域达到通信目的。\n- 消息传递系统\n消息传递系统是指进程之间通过格式化数据报文交换信息，最容易理解的便是计算机网络数据报文交换。位于不同计算机上应用的通信也是进程通信的一种场景\n- 管道通信\n所谓\"管道\"是指用于连接一个读进程和一个写进程以实现他们之间的通信的一个文件。向管道(共享文件)输入的发送进程，以字符流的形式输入大量数据到管道中，从管道接收输出的接收进程，将读取大量数据。","source":"_posts/thread.md","raw":"---\ntitle: 操作系统中的进程和线程\ndate: 2019-10-10 11:07:04\ncategories: \n- OS\ntags:\n- thread\n- linux\n- OS\n---\n\n> 作为一个前端工程师，即使接触了node后，对于linux和操作系统等计算机基础知识的欠缺还是一个很大的问题。大学的操作系统课靠着死记硬背就过去了，现在还是要还，通过本文的梳理，希望能真正的理解操作系统中进程和线程的概念\n\n## 定义\n- 进程（Process）： 操作系统中拥有资源和调度的基本单位。\n- 线程（Thread）： 线程就是进程中并发执行的基本单元，线程也因此被称为“轻量级进程”。\n\n[进程与现成的一个简单解释-阮一峰](http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html)\n\n##  进程和线程的关系\n- 一个进程可以拥有多个线程，一个线程必须要有一个父进程\n- 线程之间共享父进程的共享资源，相互之间协同完成进程所要完成的任务\n- 一个线程可以创建和撤销另一个线程，同一个进程的多个线程之间可以并发执行\n\n## 进程之间的交互\n通过TCP/IP的端口来实现\n\n## 线程之间的交互\n线程的通信就比较简单，有一大块共享的内存，只要大家的指针是同一个就可以看到各自的内存。\n\n## 进程的多层调度\n从硬盘上的可执行文件转为内存中的执行进程涉及到如下两层调度。\n\n### 作业调度\n作业调度是将硬盘上执行文件调度到内存中成为进程的过程，经历过该调度的进程处于就绪状态等待分配CPU资源。多个作业请求调度时，有许多经典算法可以采用：\n- 先来先服务\n- 优先级调度\n- 短作业优先\n\n### 进程调度\n进程调度是指在就绪队列中排队的就绪进程获取CPU时间片资源的过程。进程调度算法是需要介绍的重点,从较大的方向上分，其主要包括两类:\n\n1.基于优先权调度的算法\n- 静态优先权调度\n- 动态优先权调度\n- 抢占式调度\n- 非抢占式调度\n\n2.基于时间片轮转的调度算法\n基于时间片的调度算法将就绪进程排列成一个队列，为队列中每个就绪进程分配指定的时间片资源。若在规定的时间片内进程未执行完毕，那么该进程将再次加入队列的尾部等待下一次时间片资源分配。\n\n\n## 同步机制\n经典的线程同步问题：\n1. 生产者与消费者问题：消费者线程和生产者线程同时访问一个总大小为N的临界资源池。当资源池中资源数目为N时，生产者线程不能往其中添加数据，此时临界资源池记为满状态。当资源池中资源数目为0时，消费者线程不能从资源池中拿去数据，此时临界资源池记为空状态。在这样一个场景下，需要实现三个点:\n- 消费者线程和生产者线程临界资源池的访问是互斥的。\n- 临界资源池在满状态时，生产者线程放入数据操作必须阻塞，等待资源池非满状态时才能继续放入\n- 临界资源池空状态时，消费者线程取数据的操作必须阻塞，等待资源池非空状态时才能继续取出。\n**解决方法：互斥锁和条件变量**\n\n2. 哲学家就餐问题\n![](/../images/dinning.png)\n五个哲学家们围坐在一个圆桌上，每个哲学家左右两侧都放了一只筷子。当哲学家们想要就就餐时，会试图拿起离自己最近的筷子。一只一只这样拿筷子。当哲学家拿齐一双筷子后，就开始就餐。就餐完毕后将所有筷子放回原处，开始思考哲学。\n那么为什么要构造出这样一个关于哲学家就餐的场景呢？\n主要是构建出一个因为线程同步不当而造成死锁的场景，倘若哲学家门同时拿起来自己左侧的筷子后，当哲学再次试图去拿右侧筷子时，所有哲学家都无法获取就餐机会，陷入僵局。这也是进程同步中的死锁问题。\n**解决方法：**\n- 至多允许四个哲学家同时去拿左边的筷子，最终保证至少有一个科学家能进餐，并且用完之后释放筷子，从而使更多的哲学家能够拿到筷子。\n- 规定奇数号科学家先拿左边的筷子，然后拿右边的筷子。偶数号科学家先拿右边的筷子，然后那左边的筷子。\n- 仅当科学家左右两只筷子都能用的时候，才允许他进餐\n\n3.读者-写者问题\n对于一个文件，存在多个线程同时读取以及多个线程同时写入。在这种条件下要求对文件的访问不能混乱。那么要求读线程和写线程必须满足如下要求:\n- 读线程和写线程之间对文件的访问是互斥的\n- 写线程之间对文件的访问是互斥的\n- 读线程之间对文件的访问不需要互斥\n**解决办法：读写锁**\n\n## 死锁\n首先自己分析下产生死锁的原因：竞争贡献资源&进程/线程间推进顺序不合理\n\n其实线程产生死锁有4个必要条件\n- 互斥条件，线程对资源的获取具有排他性，在获取资源的同时独占资源，不允许其他线程访问共享资源。\n- 请求和保持条件，线程在获取某个资源之后，若再次申请或许新的资源但被阻塞时，并不释放已占有的资源。\n- 不剥夺条件，线程获取资源之后，不会因为其他线程竞争而放弃资源。只能等到使用完毕或者主动释放。\n- 环路条件,当线程之间发生死锁的时候，必然存在一个线程->资源之间的环形链路。比如线程P1等到线程P2占用的某个资源，线程P2等待线程P1占用的谋和资源\n  \n## 死锁的解决方法\n- 预防：破坏死锁产生的必要条件\n- 避免：[银行家算法](https://zh.wikipedia.org/zh-hans/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95)\n- 检测：提供发现机制，杀死死锁进程\n\n## 通信机制\n进程/线程之间的同步其实是一种通信机制，但是同步机制只是一种小规模的数据通信。此处介绍的通信机制是应对较大规模的数据传输。此处以进程之间的通信机制为例介绍\n\n- 共享存储系统\n共享存储系统比较容易理解，就是多个进程拥有共同存储空间，通过修改/读取同一块区域达到通信目的。\n- 消息传递系统\n消息传递系统是指进程之间通过格式化数据报文交换信息，最容易理解的便是计算机网络数据报文交换。位于不同计算机上应用的通信也是进程通信的一种场景\n- 管道通信\n所谓\"管道\"是指用于连接一个读进程和一个写进程以实现他们之间的通信的一个文件。向管道(共享文件)输入的发送进程，以字符流的形式输入大量数据到管道中，从管道接收输出的接收进程，将读取大量数据。","slug":"thread","published":1,"updated":"2019-10-10T04:23:31.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dle000y80oxlohy5m1p","content":"<blockquote>\n<p>作为一个前端工程师，即使接触了node后，对于linux和操作系统等计算机基础知识的欠缺还是一个很大的问题。大学的操作系统课靠着死记硬背就过去了，现在还是要还，通过本文的梳理，希望能真正的理解操作系统中进程和线程的概念</p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ul>\n<li>进程（Process）： 操作系统中拥有资源和调度的基本单位。</li>\n<li>线程（Thread）： 线程就是进程中并发执行的基本单元，线程也因此被称为“轻量级进程”。</li>\n</ul>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"noopener\">进程与现成的一个简单解释-阮一峰</a></p>\n<h2 id=\"进程和线程的关系\"><a href=\"#进程和线程的关系\" class=\"headerlink\" title=\"进程和线程的关系\"></a>进程和线程的关系</h2><ul>\n<li>一个进程可以拥有多个线程，一个线程必须要有一个父进程</li>\n<li>线程之间共享父进程的共享资源，相互之间协同完成进程所要完成的任务</li>\n<li>一个线程可以创建和撤销另一个线程，同一个进程的多个线程之间可以并发执行</li>\n</ul>\n<h2 id=\"进程之间的交互\"><a href=\"#进程之间的交互\" class=\"headerlink\" title=\"进程之间的交互\"></a>进程之间的交互</h2><p>通过TCP/IP的端口来实现</p>\n<h2 id=\"线程之间的交互\"><a href=\"#线程之间的交互\" class=\"headerlink\" title=\"线程之间的交互\"></a>线程之间的交互</h2><p>线程的通信就比较简单，有一大块共享的内存，只要大家的指针是同一个就可以看到各自的内存。</p>\n<h2 id=\"进程的多层调度\"><a href=\"#进程的多层调度\" class=\"headerlink\" title=\"进程的多层调度\"></a>进程的多层调度</h2><p>从硬盘上的可执行文件转为内存中的执行进程涉及到如下两层调度。</p>\n<h3 id=\"作业调度\"><a href=\"#作业调度\" class=\"headerlink\" title=\"作业调度\"></a>作业调度</h3><p>作业调度是将硬盘上执行文件调度到内存中成为进程的过程，经历过该调度的进程处于就绪状态等待分配CPU资源。多个作业请求调度时，有许多经典算法可以采用：</p>\n<ul>\n<li>先来先服务</li>\n<li>优先级调度</li>\n<li>短作业优先</li>\n</ul>\n<h3 id=\"进程调度\"><a href=\"#进程调度\" class=\"headerlink\" title=\"进程调度\"></a>进程调度</h3><p>进程调度是指在就绪队列中排队的就绪进程获取CPU时间片资源的过程。进程调度算法是需要介绍的重点,从较大的方向上分，其主要包括两类:</p>\n<p>1.基于优先权调度的算法</p>\n<ul>\n<li>静态优先权调度</li>\n<li>动态优先权调度</li>\n<li>抢占式调度</li>\n<li>非抢占式调度</li>\n</ul>\n<p>2.基于时间片轮转的调度算法<br>基于时间片的调度算法将就绪进程排列成一个队列，为队列中每个就绪进程分配指定的时间片资源。若在规定的时间片内进程未执行完毕，那么该进程将再次加入队列的尾部等待下一次时间片资源分配。</p>\n<h2 id=\"同步机制\"><a href=\"#同步机制\" class=\"headerlink\" title=\"同步机制\"></a>同步机制</h2><p>经典的线程同步问题：</p>\n<ol>\n<li>生产者与消费者问题：消费者线程和生产者线程同时访问一个总大小为N的临界资源池。当资源池中资源数目为N时，生产者线程不能往其中添加数据，此时临界资源池记为满状态。当资源池中资源数目为0时，消费者线程不能从资源池中拿去数据，此时临界资源池记为空状态。在这样一个场景下，需要实现三个点:</li>\n</ol>\n<ul>\n<li>消费者线程和生产者线程临界资源池的访问是互斥的。</li>\n<li>临界资源池在满状态时，生产者线程放入数据操作必须阻塞，等待资源池非满状态时才能继续放入</li>\n<li>临界资源池空状态时，消费者线程取数据的操作必须阻塞，等待资源池非空状态时才能继续取出。</li>\n</ul>\n<p><strong>解决方法：互斥锁和条件变量</strong></p>\n<ol start=\"2\">\n<li>哲学家就餐问题<br><img src=\"/../images/dinning.png\" alt><br>五个哲学家们围坐在一个圆桌上，每个哲学家左右两侧都放了一只筷子。当哲学家们想要就就餐时，会试图拿起离自己最近的筷子。一只一只这样拿筷子。当哲学家拿齐一双筷子后，就开始就餐。就餐完毕后将所有筷子放回原处，开始思考哲学。<br>那么为什么要构造出这样一个关于哲学家就餐的场景呢？<br>主要是构建出一个因为线程同步不当而造成死锁的场景，倘若哲学家门同时拿起来自己左侧的筷子后，当哲学再次试图去拿右侧筷子时，所有哲学家都无法获取就餐机会，陷入僵局。这也是进程同步中的死锁问题。</li>\n</ol>\n<p><strong>解决方法：</strong></p>\n<ul>\n<li>至多允许四个哲学家同时去拿左边的筷子，最终保证至少有一个科学家能进餐，并且用完之后释放筷子，从而使更多的哲学家能够拿到筷子。</li>\n<li>规定奇数号科学家先拿左边的筷子，然后拿右边的筷子。偶数号科学家先拿右边的筷子，然后那左边的筷子。</li>\n<li>仅当科学家左右两只筷子都能用的时候，才允许他进餐</li>\n</ul>\n<p>3.读者-写者问题<br>对于一个文件，存在多个线程同时读取以及多个线程同时写入。在这种条件下要求对文件的访问不能混乱。那么要求读线程和写线程必须满足如下要求:</p>\n<ul>\n<li>读线程和写线程之间对文件的访问是互斥的</li>\n<li>写线程之间对文件的访问是互斥的</li>\n<li>读线程之间对文件的访问不需要互斥</li>\n</ul>\n<p><strong>解决办法：读写锁</strong></p>\n<h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><p>首先自己分析下产生死锁的原因：竞争贡献资源&amp;进程/线程间推进顺序不合理</p>\n<p>其实线程产生死锁有4个必要条件</p>\n<ul>\n<li>互斥条件，线程对资源的获取具有排他性，在获取资源的同时独占资源，不允许其他线程访问共享资源。</li>\n<li>请求和保持条件，线程在获取某个资源之后，若再次申请或许新的资源但被阻塞时，并不释放已占有的资源。</li>\n<li>不剥夺条件，线程获取资源之后，不会因为其他线程竞争而放弃资源。只能等到使用完毕或者主动释放。</li>\n<li>环路条件,当线程之间发生死锁的时候，必然存在一个线程-&gt;资源之间的环形链路。比如线程P1等到线程P2占用的某个资源，线程P2等待线程P1占用的谋和资源</li>\n</ul>\n<h2 id=\"死锁的解决方法\"><a href=\"#死锁的解决方法\" class=\"headerlink\" title=\"死锁的解决方法\"></a>死锁的解决方法</h2><ul>\n<li>预防：破坏死锁产生的必要条件</li>\n<li>避免：<a href=\"https://zh.wikipedia.org/zh-hans/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">银行家算法</a></li>\n<li>检测：提供发现机制，杀死死锁进程</li>\n</ul>\n<h2 id=\"通信机制\"><a href=\"#通信机制\" class=\"headerlink\" title=\"通信机制\"></a>通信机制</h2><p>进程/线程之间的同步其实是一种通信机制，但是同步机制只是一种小规模的数据通信。此处介绍的通信机制是应对较大规模的数据传输。此处以进程之间的通信机制为例介绍</p>\n<ul>\n<li>共享存储系统<br>共享存储系统比较容易理解，就是多个进程拥有共同存储空间，通过修改/读取同一块区域达到通信目的。</li>\n<li>消息传递系统<br>消息传递系统是指进程之间通过格式化数据报文交换信息，最容易理解的便是计算机网络数据报文交换。位于不同计算机上应用的通信也是进程通信的一种场景</li>\n<li>管道通信<br>所谓”管道”是指用于连接一个读进程和一个写进程以实现他们之间的通信的一个文件。向管道(共享文件)输入的发送进程，以字符流的形式输入大量数据到管道中，从管道接收输出的接收进程，将读取大量数据。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作为一个前端工程师，即使接触了node后，对于linux和操作系统等计算机基础知识的欠缺还是一个很大的问题。大学的操作系统课靠着死记硬背就过去了，现在还是要还，通过本文的梳理，希望能真正的理解操作系统中进程和线程的概念</p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ul>\n<li>进程（Process）： 操作系统中拥有资源和调度的基本单位。</li>\n<li>线程（Thread）： 线程就是进程中并发执行的基本单元，线程也因此被称为“轻量级进程”。</li>\n</ul>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"noopener\">进程与现成的一个简单解释-阮一峰</a></p>\n<h2 id=\"进程和线程的关系\"><a href=\"#进程和线程的关系\" class=\"headerlink\" title=\"进程和线程的关系\"></a>进程和线程的关系</h2><ul>\n<li>一个进程可以拥有多个线程，一个线程必须要有一个父进程</li>\n<li>线程之间共享父进程的共享资源，相互之间协同完成进程所要完成的任务</li>\n<li>一个线程可以创建和撤销另一个线程，同一个进程的多个线程之间可以并发执行</li>\n</ul>\n<h2 id=\"进程之间的交互\"><a href=\"#进程之间的交互\" class=\"headerlink\" title=\"进程之间的交互\"></a>进程之间的交互</h2><p>通过TCP/IP的端口来实现</p>\n<h2 id=\"线程之间的交互\"><a href=\"#线程之间的交互\" class=\"headerlink\" title=\"线程之间的交互\"></a>线程之间的交互</h2><p>线程的通信就比较简单，有一大块共享的内存，只要大家的指针是同一个就可以看到各自的内存。</p>\n<h2 id=\"进程的多层调度\"><a href=\"#进程的多层调度\" class=\"headerlink\" title=\"进程的多层调度\"></a>进程的多层调度</h2><p>从硬盘上的可执行文件转为内存中的执行进程涉及到如下两层调度。</p>\n<h3 id=\"作业调度\"><a href=\"#作业调度\" class=\"headerlink\" title=\"作业调度\"></a>作业调度</h3><p>作业调度是将硬盘上执行文件调度到内存中成为进程的过程，经历过该调度的进程处于就绪状态等待分配CPU资源。多个作业请求调度时，有许多经典算法可以采用：</p>\n<ul>\n<li>先来先服务</li>\n<li>优先级调度</li>\n<li>短作业优先</li>\n</ul>\n<h3 id=\"进程调度\"><a href=\"#进程调度\" class=\"headerlink\" title=\"进程调度\"></a>进程调度</h3><p>进程调度是指在就绪队列中排队的就绪进程获取CPU时间片资源的过程。进程调度算法是需要介绍的重点,从较大的方向上分，其主要包括两类:</p>\n<p>1.基于优先权调度的算法</p>\n<ul>\n<li>静态优先权调度</li>\n<li>动态优先权调度</li>\n<li>抢占式调度</li>\n<li>非抢占式调度</li>\n</ul>\n<p>2.基于时间片轮转的调度算法<br>基于时间片的调度算法将就绪进程排列成一个队列，为队列中每个就绪进程分配指定的时间片资源。若在规定的时间片内进程未执行完毕，那么该进程将再次加入队列的尾部等待下一次时间片资源分配。</p>\n<h2 id=\"同步机制\"><a href=\"#同步机制\" class=\"headerlink\" title=\"同步机制\"></a>同步机制</h2><p>经典的线程同步问题：</p>\n<ol>\n<li>生产者与消费者问题：消费者线程和生产者线程同时访问一个总大小为N的临界资源池。当资源池中资源数目为N时，生产者线程不能往其中添加数据，此时临界资源池记为满状态。当资源池中资源数目为0时，消费者线程不能从资源池中拿去数据，此时临界资源池记为空状态。在这样一个场景下，需要实现三个点:</li>\n</ol>\n<ul>\n<li>消费者线程和生产者线程临界资源池的访问是互斥的。</li>\n<li>临界资源池在满状态时，生产者线程放入数据操作必须阻塞，等待资源池非满状态时才能继续放入</li>\n<li>临界资源池空状态时，消费者线程取数据的操作必须阻塞，等待资源池非空状态时才能继续取出。</li>\n</ul>\n<p><strong>解决方法：互斥锁和条件变量</strong></p>\n<ol start=\"2\">\n<li>哲学家就餐问题<br><img src=\"/../images/dinning.png\" alt><br>五个哲学家们围坐在一个圆桌上，每个哲学家左右两侧都放了一只筷子。当哲学家们想要就就餐时，会试图拿起离自己最近的筷子。一只一只这样拿筷子。当哲学家拿齐一双筷子后，就开始就餐。就餐完毕后将所有筷子放回原处，开始思考哲学。<br>那么为什么要构造出这样一个关于哲学家就餐的场景呢？<br>主要是构建出一个因为线程同步不当而造成死锁的场景，倘若哲学家门同时拿起来自己左侧的筷子后，当哲学再次试图去拿右侧筷子时，所有哲学家都无法获取就餐机会，陷入僵局。这也是进程同步中的死锁问题。</li>\n</ol>\n<p><strong>解决方法：</strong></p>\n<ul>\n<li>至多允许四个哲学家同时去拿左边的筷子，最终保证至少有一个科学家能进餐，并且用完之后释放筷子，从而使更多的哲学家能够拿到筷子。</li>\n<li>规定奇数号科学家先拿左边的筷子，然后拿右边的筷子。偶数号科学家先拿右边的筷子，然后那左边的筷子。</li>\n<li>仅当科学家左右两只筷子都能用的时候，才允许他进餐</li>\n</ul>\n<p>3.读者-写者问题<br>对于一个文件，存在多个线程同时读取以及多个线程同时写入。在这种条件下要求对文件的访问不能混乱。那么要求读线程和写线程必须满足如下要求:</p>\n<ul>\n<li>读线程和写线程之间对文件的访问是互斥的</li>\n<li>写线程之间对文件的访问是互斥的</li>\n<li>读线程之间对文件的访问不需要互斥</li>\n</ul>\n<p><strong>解决办法：读写锁</strong></p>\n<h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><p>首先自己分析下产生死锁的原因：竞争贡献资源&amp;进程/线程间推进顺序不合理</p>\n<p>其实线程产生死锁有4个必要条件</p>\n<ul>\n<li>互斥条件，线程对资源的获取具有排他性，在获取资源的同时独占资源，不允许其他线程访问共享资源。</li>\n<li>请求和保持条件，线程在获取某个资源之后，若再次申请或许新的资源但被阻塞时，并不释放已占有的资源。</li>\n<li>不剥夺条件，线程获取资源之后，不会因为其他线程竞争而放弃资源。只能等到使用完毕或者主动释放。</li>\n<li>环路条件,当线程之间发生死锁的时候，必然存在一个线程-&gt;资源之间的环形链路。比如线程P1等到线程P2占用的某个资源，线程P2等待线程P1占用的谋和资源</li>\n</ul>\n<h2 id=\"死锁的解决方法\"><a href=\"#死锁的解决方法\" class=\"headerlink\" title=\"死锁的解决方法\"></a>死锁的解决方法</h2><ul>\n<li>预防：破坏死锁产生的必要条件</li>\n<li>避免：<a href=\"https://zh.wikipedia.org/zh-hans/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">银行家算法</a></li>\n<li>检测：提供发现机制，杀死死锁进程</li>\n</ul>\n<h2 id=\"通信机制\"><a href=\"#通信机制\" class=\"headerlink\" title=\"通信机制\"></a>通信机制</h2><p>进程/线程之间的同步其实是一种通信机制，但是同步机制只是一种小规模的数据通信。此处介绍的通信机制是应对较大规模的数据传输。此处以进程之间的通信机制为例介绍</p>\n<ul>\n<li>共享存储系统<br>共享存储系统比较容易理解，就是多个进程拥有共同存储空间，通过修改/读取同一块区域达到通信目的。</li>\n<li>消息传递系统<br>消息传递系统是指进程之间通过格式化数据报文交换信息，最容易理解的便是计算机网络数据报文交换。位于不同计算机上应用的通信也是进程通信的一种场景</li>\n<li>管道通信<br>所谓”管道”是指用于连接一个读进程和一个写进程以实现他们之间的通信的一个文件。向管道(共享文件)输入的发送进程，以字符流的形式输入大量数据到管道中，从管道接收输出的接收进程，将读取大量数据。</li>\n</ul>\n"},{"title":"useEffect(fn, []) 不等于 componentDidMount()","date":"2020-09-03T12:08:35.000Z","_content":"\n> React 从 16.8 版本开始引入了新增特性 Hooks，可以在不编写 Class 的情况下使用 state 以及其他 React 特性。所有 React 使用者都得经历从 Class 组件到 Hooks 模式的过渡期，但是这一时期令我们很容易走进一个误区。\n\n## 误区：哪个 Hook 的功能 等价于【某个生命周期函数】？\n\n问出这个问题证明我们的思维模式还停留在 ”我需要一个 Hook 来代替 componentDidMount( )“ 的阶段。但是 Hooks 是一种范式转换，从“生命周期和时间”的思维模式转变为“状态和与DOM的同步”的思维模式。如果尝试采用旧的思维模式并找到与其对应的钩子，可能会阻碍我们正确的理解和使用 Hooks，甚至带来一些问题。\n\n这种思维模式会带来下面几个方面的问题：\n\n- 它们实际上在原理上是不同的，所以如果把它们看作相同的，有可能不会得到期望的结果。 \n- 从时间的角度考虑问题，比如“一旦mount就就调用一次useEffect”的思维模式，会阻碍你学习钩子。 \n- 从类到钩子的重构并不意味着简单地用useEffect(fn，[]) 替换组件 componentDidMount( )。\n\n## 执行时机不同\n\ncomponentDidMount在组件挂载之后运行。如果立即（同步）设置 state，那么React就会触发一次额外的render，并将第二个render的响应用作初始UI，这样用户就不会看到闪烁。假设需要使用componentDidMount读取一个DOM元素的宽度，并希望更新state来反映宽度。事件的执行顺序应该是下面这样的：\n\n1. 首次执行render\n2. 此次 render 的返回值 将用于更新到真正的 Dom 中\n3. componentDidMount 执行而且执行setState\n4. state 变更导致 再次执行 render，而且返回了新的 返回值\n5. 浏览器只显示了第二次 render 的返回值，这样可以避免闪屏\n\n可以理解为上面的过程都是同步执行的，会阻塞到浏览器将真实DOM最终绘制到浏览器上，当我们需要它的时候，这样的工作模式是合理的。但大多数情况下，我们可以在UI Paint 完毕之后，再执行一些异步拉取数据之后setState之类的副作用。\n\nuseEffect 也是在挂载后运行，但是它更往后，它不会阻塞真事Dom的渲染，因为 useEffect 在 Paint (绘制)之后延迟异步运行。这意味着如果需要从DOM读取数据，然后同步设置state以生成新的UI，有可能会有闪烁的问题发生。React 也提供了 同步执行模式的 useLayoutEffect，它更加接近 componentDidMount( )的表现。\n\n如果想通过同步设置状态来避免闪烁，那么可以使用useLayoutEffect。但是大部分时间都需要使用useEffect比较好。\n\n\n## Props 和 State 的捕获（Capturing）\n\n在React应用程序中，会存在许多的异步操作。当多个异步操作执行时，props 和 state 的值可能会有点混乱。\n假设我们有很多异步代操作流程，在执行时需要知道 count 的状态： \n\n```javascript\nclass App extends React.Component {\n  state = {\n    count: 0\n  };\n\n  componentDidMount() {\n    longResolve().then(() => {\n      alert(this.state.count);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          onClick={() => {\n            this.setState(state => ({ count: state.count + 1 }));\n          }}\n        >\n          Count: {this.state.count}\n        </button>\n      </div>\n    );\n  }\n}\n```\n\n页面加载完成后，在 longResolve 执行完成之前， 假设大概有几秒钟的时间单击按钮几次。如过我在此期间点了5次按钮，那么最后alert最终显示的也是最新的值，也是5次。\n\n同样的场景，我们一开始用 hooks 重构的代码如下：\n\n```javascript\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    longResolve().then(() => {\n      alert(count);\n    });\n  }, []);\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        Count: {count}\n      </button>\n    </div>\n  );\n}\n```\n\n但是运行后会发现，它的表现和 class 版本有所不同，无论你在 longResolve 执行完毕前点击多少次，最后 alert 的 count 都是 0。\n\n造成这种差异的原因是 useEffect 在创建时就已经捕获了count的值。当我们把回调函数赋给useEffect时，它会存在于内存中，在内存中它只知道 count 在创建时是0（由于闭包）。不管经过了多少时间，以及 count 这个时间内改变了多少次，闭包的本质是只跟创建闭包时这个值的状态有关，我们称之为“捕获”。而在 class组件中，componentDidMount( ) 没有闭包，每次读取的都是当前 count 的值。\n\n情况可以等同于下面的函数来理解，在内存中，useEffect 的回调函数中的 count 再创建时赋予了初始值0，此时 count 的值不会再因外界的变化而受到影响。\n\n```javascript\n() => {\n  const count = 0\n  longResolve().then(() => {\n    alert(count);\n  });\n}\n```\n\n[A Complete Guide to useEffect](https://overreacted.io/a-complete-guide-to-useeffect/)也提供了一个例子，演示了使用 hooks 后 setInterval 的实际表现和你的预期可能所有不同。\n\n```javascript\n// The class version:\nclass App extends React.Component {\n  state = { count: 0 }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({ count: this.state.count + 1 })\n    }, 1000);\n  }\n\n  render() {\n    return <div>{this.state.count}</div>\n  }\n}\n\n// What we think is the same logic but rewritten as hooks:\nfunction App() { \n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(count + 1)\n    }, 1000);\n    return () => clearInterval(id)\n  }, [])\n\n  return <div>{count}</div>\n}\n```\n\nClass 版本的代码，每隔一秒，显示的 count 会加1。然而用 hooks 实现的版本，显示count只会从 0 变为1，而且其实此时 setinerval 并没有停止，只是在不断的重复 setCount( 0 + 1 )， 因为对于 useEffect 回调函数内来说得到的 count 一直是 0。\n这么看起来 Hooks 貌似造成一些之前不会有的麻烦，但是如果接受了这种模式，它反而能让你避免错误。\n\n**讲到这里，需要再强调下，我们不是在讨论应该怎么使用 setInterval ，而是如何调整心智模型从 类组件 转变为 Hooks。**\n\n接下来一个重要的概念就是 **依赖数组（depends array）***解释起来很简单，如果某个逻辑依赖某个变量，那么它就应该出现在对应的依赖数组里。*\n\n那么上面的 Hooks 实现就需要修改为，这样的话表现就跟我们的预期一致了。\n\n```javascript\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(count + 1)\n    }, 1000)\n    return () => clearInterval(id)\n  }, [count])\n```\n\n这样的写法可以用下面的函数来理解，一旦依赖项发生变化，每次都销毁上一次的，新建一个新的。\n\n```js\n// Hey memory, we need you to store a function...\n() => {\n  const count = 0\n  const id = setInterval(() => {\n    setCount(count + 1)\n  }, 1000)\n  return () => clearInterval(id)}\n\n// Later on when count changed...\n// Hey memory, call the cleanup of that first function, then\n// we need you to store another function...\n() => {\n  const count = 1\n  const id = setInterval(() => {\n    setCount(count + 1)\n  }, 1000)\n  return () => clearInterval(id)\n}\n```\n\n\n\n## 捕获(capturing) 模式好还是不好\n\n当使用捕获而不是当前值时，其实是可以可以避免一些错误的。以 [dan abramov的例子](https://codesandbox.io/s/pjqnl16lm7) 为例，展示了捕获是如何到达预期行为的，而不是之前类组件使用的每次都用当前值的模式。在这个例子中，我们可以查看不同的人物信息，并且点击follow 关注对应的人。如果我们点击 follow，在接口返回响应前修改查看人物信息，这时 class 组件返回的关注成功的消息其实是当前最新的，显然这是一个bug，因为我们当前最新切换的资料不是我们点击 follow 时对应的资料。所以有了时效性以及增加对应的依赖，反而能让我们把复杂的情况更容易理清，而不是一味的只用最新值。\n\n[Dan 对此相关的一片文章](https://overreacted.io/how-are-function-components-different-from-classes/)\n\n \n\n## 到底应该怎么通过 Hooks 重构已经用 class 实现的组件 \n\n下面是一段很常见的 class组件的 代码\n\n```javascript\nclass UserProfile extends React.Component {\n  state = { user: null }\n\n  componentDidMount() {\n    getUser(this.props.uid).then(user => {\n      this.setState({ user })\n    })\n  }\n\n  render() {\n    // ...\n  }\n}\n```\n\n很容易就发现一个需要改进的地方，如果 uid 发生变化我们应该怎么办，这种情况我们通常需要再写一个 componentDidUpdate 来配合处理，其实很容易忘记，而且内部处理的逻辑是一样的，而且都是副作用，代码看起来很冗余。\n\n如果像文章开头所说，我们提前假定  useEffect(fn, [])  === componentDidMount（），我们就会直接得到如下的代码：\n\n```javascript\nfunction UserProfile({ uid }) {\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    getUser(uid).then(user => {\n      setUser(user)\n    })\n  }, []) //without `uid` in this array\n\n  // ...\n}\n```\n\n然后如果你记忆力比较好，会接着还一样的模式向自己提问：怎么样的 hook === didupdate，然后再实现一下。如果你忘记了，那代码就是遗漏了很大一部分功能。显然这不是正确的思维模式，如果我们提前了解 useEffect 的执行时机以及 对于props的捕获（capturing）特性，之后的思考是更连续，更符合 Hooks 模式的心智模型，就会有下面的重构后的代码：\n\n```javascript\nuseEffect(() => {\n  let isCurrent = true\n  getUser(uid).then(user => {\n    if (isCurrent) {\n      setUser(user)\n    }\n  })\n  return () => {\n    isCurrent = false\n  }\n}, [uid])\n```\n\n## 总结 \n\n使用 Hooks 模式进行编程时，我们需要忘记 生命周期和时间线 的概念，使用 **以状态为中心，以及对应状态发生变化时，哪些副作用需要重新执行** 的思想来进行编码。","source":"_posts/useEffect-componentDidMount.md","raw":"---\ntitle: useEffect(fn, []) 不等于 componentDidMount()\ndate: 2020-09-03 20:08:35\ncategories: \n- React\n- Hooks\ntags:\n- useEffect\n- capturing\n- react-hooks\n---\n\n> React 从 16.8 版本开始引入了新增特性 Hooks，可以在不编写 Class 的情况下使用 state 以及其他 React 特性。所有 React 使用者都得经历从 Class 组件到 Hooks 模式的过渡期，但是这一时期令我们很容易走进一个误区。\n\n## 误区：哪个 Hook 的功能 等价于【某个生命周期函数】？\n\n问出这个问题证明我们的思维模式还停留在 ”我需要一个 Hook 来代替 componentDidMount( )“ 的阶段。但是 Hooks 是一种范式转换，从“生命周期和时间”的思维模式转变为“状态和与DOM的同步”的思维模式。如果尝试采用旧的思维模式并找到与其对应的钩子，可能会阻碍我们正确的理解和使用 Hooks，甚至带来一些问题。\n\n这种思维模式会带来下面几个方面的问题：\n\n- 它们实际上在原理上是不同的，所以如果把它们看作相同的，有可能不会得到期望的结果。 \n- 从时间的角度考虑问题，比如“一旦mount就就调用一次useEffect”的思维模式，会阻碍你学习钩子。 \n- 从类到钩子的重构并不意味着简单地用useEffect(fn，[]) 替换组件 componentDidMount( )。\n\n## 执行时机不同\n\ncomponentDidMount在组件挂载之后运行。如果立即（同步）设置 state，那么React就会触发一次额外的render，并将第二个render的响应用作初始UI，这样用户就不会看到闪烁。假设需要使用componentDidMount读取一个DOM元素的宽度，并希望更新state来反映宽度。事件的执行顺序应该是下面这样的：\n\n1. 首次执行render\n2. 此次 render 的返回值 将用于更新到真正的 Dom 中\n3. componentDidMount 执行而且执行setState\n4. state 变更导致 再次执行 render，而且返回了新的 返回值\n5. 浏览器只显示了第二次 render 的返回值，这样可以避免闪屏\n\n可以理解为上面的过程都是同步执行的，会阻塞到浏览器将真实DOM最终绘制到浏览器上，当我们需要它的时候，这样的工作模式是合理的。但大多数情况下，我们可以在UI Paint 完毕之后，再执行一些异步拉取数据之后setState之类的副作用。\n\nuseEffect 也是在挂载后运行，但是它更往后，它不会阻塞真事Dom的渲染，因为 useEffect 在 Paint (绘制)之后延迟异步运行。这意味着如果需要从DOM读取数据，然后同步设置state以生成新的UI，有可能会有闪烁的问题发生。React 也提供了 同步执行模式的 useLayoutEffect，它更加接近 componentDidMount( )的表现。\n\n如果想通过同步设置状态来避免闪烁，那么可以使用useLayoutEffect。但是大部分时间都需要使用useEffect比较好。\n\n\n## Props 和 State 的捕获（Capturing）\n\n在React应用程序中，会存在许多的异步操作。当多个异步操作执行时，props 和 state 的值可能会有点混乱。\n假设我们有很多异步代操作流程，在执行时需要知道 count 的状态： \n\n```javascript\nclass App extends React.Component {\n  state = {\n    count: 0\n  };\n\n  componentDidMount() {\n    longResolve().then(() => {\n      alert(this.state.count);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          onClick={() => {\n            this.setState(state => ({ count: state.count + 1 }));\n          }}\n        >\n          Count: {this.state.count}\n        </button>\n      </div>\n    );\n  }\n}\n```\n\n页面加载完成后，在 longResolve 执行完成之前， 假设大概有几秒钟的时间单击按钮几次。如过我在此期间点了5次按钮，那么最后alert最终显示的也是最新的值，也是5次。\n\n同样的场景，我们一开始用 hooks 重构的代码如下：\n\n```javascript\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    longResolve().then(() => {\n      alert(count);\n    });\n  }, []);\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        Count: {count}\n      </button>\n    </div>\n  );\n}\n```\n\n但是运行后会发现，它的表现和 class 版本有所不同，无论你在 longResolve 执行完毕前点击多少次，最后 alert 的 count 都是 0。\n\n造成这种差异的原因是 useEffect 在创建时就已经捕获了count的值。当我们把回调函数赋给useEffect时，它会存在于内存中，在内存中它只知道 count 在创建时是0（由于闭包）。不管经过了多少时间，以及 count 这个时间内改变了多少次，闭包的本质是只跟创建闭包时这个值的状态有关，我们称之为“捕获”。而在 class组件中，componentDidMount( ) 没有闭包，每次读取的都是当前 count 的值。\n\n情况可以等同于下面的函数来理解，在内存中，useEffect 的回调函数中的 count 再创建时赋予了初始值0，此时 count 的值不会再因外界的变化而受到影响。\n\n```javascript\n() => {\n  const count = 0\n  longResolve().then(() => {\n    alert(count);\n  });\n}\n```\n\n[A Complete Guide to useEffect](https://overreacted.io/a-complete-guide-to-useeffect/)也提供了一个例子，演示了使用 hooks 后 setInterval 的实际表现和你的预期可能所有不同。\n\n```javascript\n// The class version:\nclass App extends React.Component {\n  state = { count: 0 }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({ count: this.state.count + 1 })\n    }, 1000);\n  }\n\n  render() {\n    return <div>{this.state.count}</div>\n  }\n}\n\n// What we think is the same logic but rewritten as hooks:\nfunction App() { \n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(count + 1)\n    }, 1000);\n    return () => clearInterval(id)\n  }, [])\n\n  return <div>{count}</div>\n}\n```\n\nClass 版本的代码，每隔一秒，显示的 count 会加1。然而用 hooks 实现的版本，显示count只会从 0 变为1，而且其实此时 setinerval 并没有停止，只是在不断的重复 setCount( 0 + 1 )， 因为对于 useEffect 回调函数内来说得到的 count 一直是 0。\n这么看起来 Hooks 貌似造成一些之前不会有的麻烦，但是如果接受了这种模式，它反而能让你避免错误。\n\n**讲到这里，需要再强调下，我们不是在讨论应该怎么使用 setInterval ，而是如何调整心智模型从 类组件 转变为 Hooks。**\n\n接下来一个重要的概念就是 **依赖数组（depends array）***解释起来很简单，如果某个逻辑依赖某个变量，那么它就应该出现在对应的依赖数组里。*\n\n那么上面的 Hooks 实现就需要修改为，这样的话表现就跟我们的预期一致了。\n\n```javascript\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(count + 1)\n    }, 1000)\n    return () => clearInterval(id)\n  }, [count])\n```\n\n这样的写法可以用下面的函数来理解，一旦依赖项发生变化，每次都销毁上一次的，新建一个新的。\n\n```js\n// Hey memory, we need you to store a function...\n() => {\n  const count = 0\n  const id = setInterval(() => {\n    setCount(count + 1)\n  }, 1000)\n  return () => clearInterval(id)}\n\n// Later on when count changed...\n// Hey memory, call the cleanup of that first function, then\n// we need you to store another function...\n() => {\n  const count = 1\n  const id = setInterval(() => {\n    setCount(count + 1)\n  }, 1000)\n  return () => clearInterval(id)\n}\n```\n\n\n\n## 捕获(capturing) 模式好还是不好\n\n当使用捕获而不是当前值时，其实是可以可以避免一些错误的。以 [dan abramov的例子](https://codesandbox.io/s/pjqnl16lm7) 为例，展示了捕获是如何到达预期行为的，而不是之前类组件使用的每次都用当前值的模式。在这个例子中，我们可以查看不同的人物信息，并且点击follow 关注对应的人。如果我们点击 follow，在接口返回响应前修改查看人物信息，这时 class 组件返回的关注成功的消息其实是当前最新的，显然这是一个bug，因为我们当前最新切换的资料不是我们点击 follow 时对应的资料。所以有了时效性以及增加对应的依赖，反而能让我们把复杂的情况更容易理清，而不是一味的只用最新值。\n\n[Dan 对此相关的一片文章](https://overreacted.io/how-are-function-components-different-from-classes/)\n\n \n\n## 到底应该怎么通过 Hooks 重构已经用 class 实现的组件 \n\n下面是一段很常见的 class组件的 代码\n\n```javascript\nclass UserProfile extends React.Component {\n  state = { user: null }\n\n  componentDidMount() {\n    getUser(this.props.uid).then(user => {\n      this.setState({ user })\n    })\n  }\n\n  render() {\n    // ...\n  }\n}\n```\n\n很容易就发现一个需要改进的地方，如果 uid 发生变化我们应该怎么办，这种情况我们通常需要再写一个 componentDidUpdate 来配合处理，其实很容易忘记，而且内部处理的逻辑是一样的，而且都是副作用，代码看起来很冗余。\n\n如果像文章开头所说，我们提前假定  useEffect(fn, [])  === componentDidMount（），我们就会直接得到如下的代码：\n\n```javascript\nfunction UserProfile({ uid }) {\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    getUser(uid).then(user => {\n      setUser(user)\n    })\n  }, []) //without `uid` in this array\n\n  // ...\n}\n```\n\n然后如果你记忆力比较好，会接着还一样的模式向自己提问：怎么样的 hook === didupdate，然后再实现一下。如果你忘记了，那代码就是遗漏了很大一部分功能。显然这不是正确的思维模式，如果我们提前了解 useEffect 的执行时机以及 对于props的捕获（capturing）特性，之后的思考是更连续，更符合 Hooks 模式的心智模型，就会有下面的重构后的代码：\n\n```javascript\nuseEffect(() => {\n  let isCurrent = true\n  getUser(uid).then(user => {\n    if (isCurrent) {\n      setUser(user)\n    }\n  })\n  return () => {\n    isCurrent = false\n  }\n}, [uid])\n```\n\n## 总结 \n\n使用 Hooks 模式进行编程时，我们需要忘记 生命周期和时间线 的概念，使用 **以状态为中心，以及对应状态发生变化时，哪些副作用需要重新执行** 的思想来进行编码。","slug":"useEffect-componentDidMount","published":1,"updated":"2020-12-20T12:19:03.499Z","_id":"ckemh0dlf001080oxq9e5diap","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>React 从 16.8 版本开始引入了新增特性 Hooks，可以在不编写 Class 的情况下使用 state 以及其他 React 特性。所有 React 使用者都得经历从 Class 组件到 Hooks 模式的过渡期，但是这一时期令我们很容易走进一个误区。</p>\n</blockquote>\n<h2 id=\"误区：哪个-Hook-的功能-等价于【某个生命周期函数】？\"><a href=\"#误区：哪个-Hook-的功能-等价于【某个生命周期函数】？\" class=\"headerlink\" title=\"误区：哪个 Hook 的功能 等价于【某个生命周期函数】？\"></a>误区：哪个 Hook 的功能 等价于【某个生命周期函数】？</h2><p>问出这个问题证明我们的思维模式还停留在 ”我需要一个 Hook 来代替 componentDidMount( )“ 的阶段。但是 Hooks 是一种范式转换，从“生命周期和时间”的思维模式转变为“状态和与DOM的同步”的思维模式。如果尝试采用旧的思维模式并找到与其对应的钩子，可能会阻碍我们正确的理解和使用 Hooks，甚至带来一些问题。</p>\n<p>这种思维模式会带来下面几个方面的问题：</p>\n<ul>\n<li>它们实际上在原理上是不同的，所以如果把它们看作相同的，有可能不会得到期望的结果。 </li>\n<li>从时间的角度考虑问题，比如“一旦mount就就调用一次useEffect”的思维模式，会阻碍你学习钩子。 </li>\n<li>从类到钩子的重构并不意味着简单地用useEffect(fn，[]) 替换组件 componentDidMount( )。</li>\n</ul>\n<h2 id=\"执行时机不同\"><a href=\"#执行时机不同\" class=\"headerlink\" title=\"执行时机不同\"></a>执行时机不同</h2><p>componentDidMount在组件挂载之后运行。如果立即（同步）设置 state，那么React就会触发一次额外的render，并将第二个render的响应用作初始UI，这样用户就不会看到闪烁。假设需要使用componentDidMount读取一个DOM元素的宽度，并希望更新state来反映宽度。事件的执行顺序应该是下面这样的：</p>\n<ol>\n<li>首次执行render</li>\n<li>此次 render 的返回值 将用于更新到真正的 Dom 中</li>\n<li>componentDidMount 执行而且执行setState</li>\n<li>state 变更导致 再次执行 render，而且返回了新的 返回值</li>\n<li>浏览器只显示了第二次 render 的返回值，这样可以避免闪屏</li>\n</ol>\n<p>可以理解为上面的过程都是同步执行的，会阻塞到浏览器将真实DOM最终绘制到浏览器上，当我们需要它的时候，这样的工作模式是合理的。但大多数情况下，我们可以在UI Paint 完毕之后，再执行一些异步拉取数据之后setState之类的副作用。</p>\n<p>useEffect 也是在挂载后运行，但是它更往后，它不会阻塞真事Dom的渲染，因为 useEffect 在 Paint (绘制)之后延迟异步运行。这意味着如果需要从DOM读取数据，然后同步设置state以生成新的UI，有可能会有闪烁的问题发生。React 也提供了 同步执行模式的 useLayoutEffect，它更加接近 componentDidMount( )的表现。</p>\n<p>如果想通过同步设置状态来避免闪烁，那么可以使用useLayoutEffect。但是大部分时间都需要使用useEffect比较好。</p>\n<h2 id=\"Props-和-State-的捕获（Capturing）\"><a href=\"#Props-和-State-的捕获（Capturing）\" class=\"headerlink\" title=\"Props 和 State 的捕获（Capturing）\"></a>Props 和 State 的捕获（Capturing）</h2><p>在React应用程序中，会存在许多的异步操作。当多个异步操作执行时，props 和 state 的值可能会有点混乱。<br>假设我们有很多异步代操作流程，在执行时需要知道 count 的状态： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    longResolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.state.count);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button</span><br><span class=\"line\">          onClick=&#123;() =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;));</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          Count: &#123;<span class=\"keyword\">this</span>.state.count&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面加载完成后，在 longResolve 执行完成之前， 假设大概有几秒钟的时间单击按钮几次。如过我在此期间点了5次按钮，那么最后alert最终显示的也是最新的值，也是5次。</p>\n<p>同样的场景，我们一开始用 hooks 重构的代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    longResolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(count);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;button</span><br><span class=\"line\">        onClick=&#123;() =&gt; &#123;</span><br><span class=\"line\">          setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        Count: &#123;count&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是运行后会发现，它的表现和 class 版本有所不同，无论你在 longResolve 执行完毕前点击多少次，最后 alert 的 count 都是 0。</p>\n<p>造成这种差异的原因是 useEffect 在创建时就已经捕获了count的值。当我们把回调函数赋给useEffect时，它会存在于内存中，在内存中它只知道 count 在创建时是0（由于闭包）。不管经过了多少时间，以及 count 这个时间内改变了多少次，闭包的本质是只跟创建闭包时这个值的状态有关，我们称之为“捕获”。而在 class组件中，componentDidMount( ) 没有闭包，每次读取的都是当前 count 的值。</p>\n<p>情况可以等同于下面的函数来理解，在内存中，useEffect 的回调函数中的 count 再创建时赋予了初始值0，此时 count 的值不会再因外界的变化而受到影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  longResolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(count);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"noopener\">A Complete Guide to useEffect</a>也提供了一个例子，演示了使用 hooks 后 setInterval 的实际表现和你的预期可能所有不同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The class version:</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">count</span>: <span class=\"keyword\">this</span>.state.count + <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.state.count&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// What we think is the same logic but rewritten as hooks:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(id)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;div&gt;&#123;count&#125;&lt;/div&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Class 版本的代码，每隔一秒，显示的 count 会加1。然而用 hooks 实现的版本，显示count只会从 0 变为1，而且其实此时 setinerval 并没有停止，只是在不断的重复 setCount( 0 + 1 )， 因为对于 useEffect 回调函数内来说得到的 count 一直是 0。<br>这么看起来 Hooks 貌似造成一些之前不会有的麻烦，但是如果接受了这种模式，它反而能让你避免错误。</p>\n<p><strong>讲到这里，需要再强调下，我们不是在讨论应该怎么使用 setInterval ，而是如何调整心智模型从 类组件 转变为 Hooks。</strong></p>\n<p>接下来一个重要的概念就是 <strong>依赖数组（depends array）*</strong>解释起来很简单，如果某个逻辑依赖某个变量，那么它就应该出现在对应的依赖数组里。*</p>\n<p>那么上面的 Hooks 实现就需要修改为，这样的话表现就跟我们的预期一致了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(id)</span><br><span class=\"line\">&#125;, [count])</span><br></pre></td></tr></table></figure>\n\n<p>这样的写法可以用下面的函数来理解，一旦依赖项发生变化，每次都销毁上一次的，新建一个新的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hey memory, we need you to store a function...</span></span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(id)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Later on when count changed...</span></span><br><span class=\"line\"><span class=\"comment\">// Hey memory, call the cleanup of that first function, then</span></span><br><span class=\"line\"><span class=\"comment\">// we need you to store another function...</span></span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(id)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"捕获-capturing-模式好还是不好\"><a href=\"#捕获-capturing-模式好还是不好\" class=\"headerlink\" title=\"捕获(capturing) 模式好还是不好\"></a>捕获(capturing) 模式好还是不好</h2><p>当使用捕获而不是当前值时，其实是可以可以避免一些错误的。以 <a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"noopener\">dan abramov的例子</a> 为例，展示了捕获是如何到达预期行为的，而不是之前类组件使用的每次都用当前值的模式。在这个例子中，我们可以查看不同的人物信息，并且点击follow 关注对应的人。如果我们点击 follow，在接口返回响应前修改查看人物信息，这时 class 组件返回的关注成功的消息其实是当前最新的，显然这是一个bug，因为我们当前最新切换的资料不是我们点击 follow 时对应的资料。所以有了时效性以及增加对应的依赖，反而能让我们把复杂的情况更容易理清，而不是一味的只用最新值。</p>\n<p><a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\" target=\"_blank\" rel=\"noopener\">Dan 对此相关的一片文章</a></p>\n<h2 id=\"到底应该怎么通过-Hooks-重构已经用-class-实现的组件\"><a href=\"#到底应该怎么通过-Hooks-重构已经用-class-实现的组件\" class=\"headerlink\" title=\"到底应该怎么通过 Hooks 重构已经用 class 实现的组件\"></a>到底应该怎么通过 Hooks 重构已经用 class 实现的组件</h2><p>下面是一段很常见的 class组件的 代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserProfile</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">user</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    getUser(<span class=\"keyword\">this</span>.props.uid).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; user &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很容易就发现一个需要改进的地方，如果 uid 发生变化我们应该怎么办，这种情况我们通常需要再写一个 componentDidUpdate 来配合处理，其实很容易忘记，而且内部处理的逻辑是一样的，而且都是副作用，代码看起来很冗余。</p>\n<p>如果像文章开头所说，我们提前假定  useEffect(fn, [])  === componentDidMount（），我们就会直接得到如下的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserProfile</span>(<span class=\"params\">&#123; uid &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [user, setUser] = useState(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    getUser(uid).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setUser(user)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, []) <span class=\"comment\">//without `uid` in this array</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后如果你记忆力比较好，会接着还一样的模式向自己提问：怎么样的 hook === didupdate，然后再实现一下。如果你忘记了，那代码就是遗漏了很大一部分功能。显然这不是正确的思维模式，如果我们提前了解 useEffect 的执行时机以及 对于props的捕获（capturing）特性，之后的思考是更连续，更符合 Hooks 模式的心智模型，就会有下面的重构后的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isCurrent = <span class=\"literal\">true</span></span><br><span class=\"line\">  getUser(uid).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCurrent) &#123;</span><br><span class=\"line\">      setUser(user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    isCurrent = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [uid])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用 Hooks 模式进行编程时，我们需要忘记 生命周期和时间线 的概念，使用 <strong>以状态为中心，以及对应状态发生变化时，哪些副作用需要重新执行</strong> 的思想来进行编码。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>React 从 16.8 版本开始引入了新增特性 Hooks，可以在不编写 Class 的情况下使用 state 以及其他 React 特性。所有 React 使用者都得经历从 Class 组件到 Hooks 模式的过渡期，但是这一时期令我们很容易走进一个误区。</p>\n</blockquote>\n<h2 id=\"误区：哪个-Hook-的功能-等价于【某个生命周期函数】？\"><a href=\"#误区：哪个-Hook-的功能-等价于【某个生命周期函数】？\" class=\"headerlink\" title=\"误区：哪个 Hook 的功能 等价于【某个生命周期函数】？\"></a>误区：哪个 Hook 的功能 等价于【某个生命周期函数】？</h2><p>问出这个问题证明我们的思维模式还停留在 ”我需要一个 Hook 来代替 componentDidMount( )“ 的阶段。但是 Hooks 是一种范式转换，从“生命周期和时间”的思维模式转变为“状态和与DOM的同步”的思维模式。如果尝试采用旧的思维模式并找到与其对应的钩子，可能会阻碍我们正确的理解和使用 Hooks，甚至带来一些问题。</p>\n<p>这种思维模式会带来下面几个方面的问题：</p>\n<ul>\n<li>它们实际上在原理上是不同的，所以如果把它们看作相同的，有可能不会得到期望的结果。 </li>\n<li>从时间的角度考虑问题，比如“一旦mount就就调用一次useEffect”的思维模式，会阻碍你学习钩子。 </li>\n<li>从类到钩子的重构并不意味着简单地用useEffect(fn，[]) 替换组件 componentDidMount( )。</li>\n</ul>\n<h2 id=\"执行时机不同\"><a href=\"#执行时机不同\" class=\"headerlink\" title=\"执行时机不同\"></a>执行时机不同</h2><p>componentDidMount在组件挂载之后运行。如果立即（同步）设置 state，那么React就会触发一次额外的render，并将第二个render的响应用作初始UI，这样用户就不会看到闪烁。假设需要使用componentDidMount读取一个DOM元素的宽度，并希望更新state来反映宽度。事件的执行顺序应该是下面这样的：</p>\n<ol>\n<li>首次执行render</li>\n<li>此次 render 的返回值 将用于更新到真正的 Dom 中</li>\n<li>componentDidMount 执行而且执行setState</li>\n<li>state 变更导致 再次执行 render，而且返回了新的 返回值</li>\n<li>浏览器只显示了第二次 render 的返回值，这样可以避免闪屏</li>\n</ol>\n<p>可以理解为上面的过程都是同步执行的，会阻塞到浏览器将真实DOM最终绘制到浏览器上，当我们需要它的时候，这样的工作模式是合理的。但大多数情况下，我们可以在UI Paint 完毕之后，再执行一些异步拉取数据之后setState之类的副作用。</p>\n<p>useEffect 也是在挂载后运行，但是它更往后，它不会阻塞真事Dom的渲染，因为 useEffect 在 Paint (绘制)之后延迟异步运行。这意味着如果需要从DOM读取数据，然后同步设置state以生成新的UI，有可能会有闪烁的问题发生。React 也提供了 同步执行模式的 useLayoutEffect，它更加接近 componentDidMount( )的表现。</p>\n<p>如果想通过同步设置状态来避免闪烁，那么可以使用useLayoutEffect。但是大部分时间都需要使用useEffect比较好。</p>\n<h2 id=\"Props-和-State-的捕获（Capturing）\"><a href=\"#Props-和-State-的捕获（Capturing）\" class=\"headerlink\" title=\"Props 和 State 的捕获（Capturing）\"></a>Props 和 State 的捕获（Capturing）</h2><p>在React应用程序中，会存在许多的异步操作。当多个异步操作执行时，props 和 state 的值可能会有点混乱。<br>假设我们有很多异步代操作流程，在执行时需要知道 count 的状态： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    longResolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.state.count);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button</span><br><span class=\"line\">          onClick=&#123;() =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;));</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          Count: &#123;<span class=\"keyword\">this</span>.state.count&#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面加载完成后，在 longResolve 执行完成之前， 假设大概有几秒钟的时间单击按钮几次。如过我在此期间点了5次按钮，那么最后alert最终显示的也是最新的值，也是5次。</p>\n<p>同样的场景，我们一开始用 hooks 重构的代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    longResolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(count);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;button</span><br><span class=\"line\">        onClick=&#123;() =&gt; &#123;</span><br><span class=\"line\">          setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        Count: &#123;count&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是运行后会发现，它的表现和 class 版本有所不同，无论你在 longResolve 执行完毕前点击多少次，最后 alert 的 count 都是 0。</p>\n<p>造成这种差异的原因是 useEffect 在创建时就已经捕获了count的值。当我们把回调函数赋给useEffect时，它会存在于内存中，在内存中它只知道 count 在创建时是0（由于闭包）。不管经过了多少时间，以及 count 这个时间内改变了多少次，闭包的本质是只跟创建闭包时这个值的状态有关，我们称之为“捕获”。而在 class组件中，componentDidMount( ) 没有闭包，每次读取的都是当前 count 的值。</p>\n<p>情况可以等同于下面的函数来理解，在内存中，useEffect 的回调函数中的 count 再创建时赋予了初始值0，此时 count 的值不会再因外界的变化而受到影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  longResolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(count);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"noopener\">A Complete Guide to useEffect</a>也提供了一个例子，演示了使用 hooks 后 setInterval 的实际表现和你的预期可能所有不同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The class version:</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">count</span>: <span class=\"keyword\">this</span>.state.count + <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.state.count&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// What we think is the same logic but rewritten as hooks:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(id)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;div&gt;&#123;count&#125;&lt;/div&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Class 版本的代码，每隔一秒，显示的 count 会加1。然而用 hooks 实现的版本，显示count只会从 0 变为1，而且其实此时 setinerval 并没有停止，只是在不断的重复 setCount( 0 + 1 )， 因为对于 useEffect 回调函数内来说得到的 count 一直是 0。<br>这么看起来 Hooks 貌似造成一些之前不会有的麻烦，但是如果接受了这种模式，它反而能让你避免错误。</p>\n<p><strong>讲到这里，需要再强调下，我们不是在讨论应该怎么使用 setInterval ，而是如何调整心智模型从 类组件 转变为 Hooks。</strong></p>\n<p>接下来一个重要的概念就是 <strong>依赖数组（depends array）*</strong>解释起来很简单，如果某个逻辑依赖某个变量，那么它就应该出现在对应的依赖数组里。*</p>\n<p>那么上面的 Hooks 实现就需要修改为，这样的话表现就跟我们的预期一致了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(id)</span><br><span class=\"line\">&#125;, [count])</span><br></pre></td></tr></table></figure>\n\n<p>这样的写法可以用下面的函数来理解，一旦依赖项发生变化，每次都销毁上一次的，新建一个新的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hey memory, we need you to store a function...</span></span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(id)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Later on when count changed...</span></span><br><span class=\"line\"><span class=\"comment\">// Hey memory, call the cleanup of that first function, then</span></span><br><span class=\"line\"><span class=\"comment\">// we need you to store another function...</span></span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(id)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"捕获-capturing-模式好还是不好\"><a href=\"#捕获-capturing-模式好还是不好\" class=\"headerlink\" title=\"捕获(capturing) 模式好还是不好\"></a>捕获(capturing) 模式好还是不好</h2><p>当使用捕获而不是当前值时，其实是可以可以避免一些错误的。以 <a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"noopener\">dan abramov的例子</a> 为例，展示了捕获是如何到达预期行为的，而不是之前类组件使用的每次都用当前值的模式。在这个例子中，我们可以查看不同的人物信息，并且点击follow 关注对应的人。如果我们点击 follow，在接口返回响应前修改查看人物信息，这时 class 组件返回的关注成功的消息其实是当前最新的，显然这是一个bug，因为我们当前最新切换的资料不是我们点击 follow 时对应的资料。所以有了时效性以及增加对应的依赖，反而能让我们把复杂的情况更容易理清，而不是一味的只用最新值。</p>\n<p><a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\" target=\"_blank\" rel=\"noopener\">Dan 对此相关的一片文章</a></p>\n<h2 id=\"到底应该怎么通过-Hooks-重构已经用-class-实现的组件\"><a href=\"#到底应该怎么通过-Hooks-重构已经用-class-实现的组件\" class=\"headerlink\" title=\"到底应该怎么通过 Hooks 重构已经用 class 实现的组件\"></a>到底应该怎么通过 Hooks 重构已经用 class 实现的组件</h2><p>下面是一段很常见的 class组件的 代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserProfile</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">user</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    getUser(<span class=\"keyword\">this</span>.props.uid).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; user &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很容易就发现一个需要改进的地方，如果 uid 发生变化我们应该怎么办，这种情况我们通常需要再写一个 componentDidUpdate 来配合处理，其实很容易忘记，而且内部处理的逻辑是一样的，而且都是副作用，代码看起来很冗余。</p>\n<p>如果像文章开头所说，我们提前假定  useEffect(fn, [])  === componentDidMount（），我们就会直接得到如下的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserProfile</span>(<span class=\"params\">&#123; uid &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [user, setUser] = useState(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    getUser(uid).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setUser(user)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, []) <span class=\"comment\">//without `uid` in this array</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后如果你记忆力比较好，会接着还一样的模式向自己提问：怎么样的 hook === didupdate，然后再实现一下。如果你忘记了，那代码就是遗漏了很大一部分功能。显然这不是正确的思维模式，如果我们提前了解 useEffect 的执行时机以及 对于props的捕获（capturing）特性，之后的思考是更连续，更符合 Hooks 模式的心智模型，就会有下面的重构后的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isCurrent = <span class=\"literal\">true</span></span><br><span class=\"line\">  getUser(uid).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCurrent) &#123;</span><br><span class=\"line\">      setUser(user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    isCurrent = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [uid])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用 Hooks 模式进行编程时，我们需要忘记 生命周期和时间线 的概念，使用 <strong>以状态为中心，以及对应状态发生变化时，哪些副作用需要重新执行</strong> 的思想来进行编码。</p>\n"},{"title":"程序员夫妇的周末","date":"2019-09-01T02:40:28.000Z","_content":"\n![weekend](/images/weekend.jpeg)\n\nhave a nice day~","source":"_posts/weekend.md","raw":"---\ntitle: 程序员夫妇的周末\ndate: 2019-09-01 10:40:28\ncategories: \n- daily\ntags:\n- 日常\n- 白话\n---\n\n![weekend](/images/weekend.jpeg)\n\nhave a nice day~","slug":"weekend","published":1,"updated":"2019-09-02T01:37:27.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dmh003w80oxdwzwbfav","content":"<p><img src=\"/images/weekend.jpeg\" alt=\"weekend\"></p>\n<p>have a nice day~</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/weekend.jpeg\" alt=\"weekend\"></p>\n<p>have a nice day~</p>\n"},{"title":"不懂就问系列-为什么git有暂存区这一层","date":"2019-10-21T08:01:19.000Z","_content":"\n> 虽然每天用，但是git为啥有暂存区这一层呢，每次都得先git add, 然后git commit，好麻烦的说。\n\nGit 本地数据管理，大概可以分为三个区，工作区,暂存区和版本库。\n\n- 工作区（Working Directory）\n是我们直接编辑的地方，例如 Android Studio 打开的项目，记事本打开的文本等，肉眼可见，直接操作。\n- 暂存区（Stage 或 Index）\n数据暂时存放的区域，可在工作区和版本库之间进行数据的友好交流。\n- 版本库（commit History）\n存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程仓库了。\n\n\n跟传统的版本控制工具，如SVN，最大的不同就是多了一个暂存区的概念，加了它有什么用呢\n- 提交原子化\n如：同时修改了 a.js,b.js ,但其实他们分别属于两个featrue，可以分别add a 和 b 进行commit。\n\n- 提交阶段性\n如： 先修改了a.js的一句话，git add 添加到暂存区，这时候后续对a.js的修改可能还是可以加到暂存区，然后一起提交commit，可以认为对a.js进行了一个递进的操作，但是是一起commit的。\n\n- 回溯\n多了一层区域，也给历史回溯增加了更多可能，根据自己的实际情况，选择回溯的位置。\n\n","source":"_posts/why-git-add.md","raw":"---\ntitle: 不懂就问系列-为什么git有暂存区这一层\ndate: 2019-10-21 16:01:19\ncategories: \n- Git\ntags:\n- 暂存区\n- git add\n- git commit\n- 不懂就问\n---\n\n> 虽然每天用，但是git为啥有暂存区这一层呢，每次都得先git add, 然后git commit，好麻烦的说。\n\nGit 本地数据管理，大概可以分为三个区，工作区,暂存区和版本库。\n\n- 工作区（Working Directory）\n是我们直接编辑的地方，例如 Android Studio 打开的项目，记事本打开的文本等，肉眼可见，直接操作。\n- 暂存区（Stage 或 Index）\n数据暂时存放的区域，可在工作区和版本库之间进行数据的友好交流。\n- 版本库（commit History）\n存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程仓库了。\n\n\n跟传统的版本控制工具，如SVN，最大的不同就是多了一个暂存区的概念，加了它有什么用呢\n- 提交原子化\n如：同时修改了 a.js,b.js ,但其实他们分别属于两个featrue，可以分别add a 和 b 进行commit。\n\n- 提交阶段性\n如： 先修改了a.js的一句话，git add 添加到暂存区，这时候后续对a.js的修改可能还是可以加到暂存区，然后一起提交commit，可以认为对a.js进行了一个递进的操作，但是是一起commit的。\n\n- 回溯\n多了一层区域，也给历史回溯增加了更多可能，根据自己的实际情况，选择回溯的位置。\n\n","slug":"why-git-add","published":1,"updated":"2019-10-30T09:40:02.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dmj003y80oxmtvyou0n","content":"<blockquote>\n<p>虽然每天用，但是git为啥有暂存区这一层呢，每次都得先git add, 然后git commit，好麻烦的说。</p>\n</blockquote>\n<p>Git 本地数据管理，大概可以分为三个区，工作区,暂存区和版本库。</p>\n<ul>\n<li>工作区（Working Directory）<br>是我们直接编辑的地方，例如 Android Studio 打开的项目，记事本打开的文本等，肉眼可见，直接操作。</li>\n<li>暂存区（Stage 或 Index）<br>数据暂时存放的区域，可在工作区和版本库之间进行数据的友好交流。</li>\n<li>版本库（commit History）<br>存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程仓库了。</li>\n</ul>\n<p>跟传统的版本控制工具，如SVN，最大的不同就是多了一个暂存区的概念，加了它有什么用呢</p>\n<ul>\n<li><p>提交原子化<br>如：同时修改了 a.js,b.js ,但其实他们分别属于两个featrue，可以分别add a 和 b 进行commit。</p>\n</li>\n<li><p>提交阶段性<br>如： 先修改了a.js的一句话，git add 添加到暂存区，这时候后续对a.js的修改可能还是可以加到暂存区，然后一起提交commit，可以认为对a.js进行了一个递进的操作，但是是一起commit的。</p>\n</li>\n<li><p>回溯<br>多了一层区域，也给历史回溯增加了更多可能，根据自己的实际情况，选择回溯的位置。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>虽然每天用，但是git为啥有暂存区这一层呢，每次都得先git add, 然后git commit，好麻烦的说。</p>\n</blockquote>\n<p>Git 本地数据管理，大概可以分为三个区，工作区,暂存区和版本库。</p>\n<ul>\n<li>工作区（Working Directory）<br>是我们直接编辑的地方，例如 Android Studio 打开的项目，记事本打开的文本等，肉眼可见，直接操作。</li>\n<li>暂存区（Stage 或 Index）<br>数据暂时存放的区域，可在工作区和版本库之间进行数据的友好交流。</li>\n<li>版本库（commit History）<br>存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程仓库了。</li>\n</ul>\n<p>跟传统的版本控制工具，如SVN，最大的不同就是多了一个暂存区的概念，加了它有什么用呢</p>\n<ul>\n<li><p>提交原子化<br>如：同时修改了 a.js,b.js ,但其实他们分别属于两个featrue，可以分别add a 和 b 进行commit。</p>\n</li>\n<li><p>提交阶段性<br>如： 先修改了a.js的一句话，git add 添加到暂存区，这时候后续对a.js的修改可能还是可以加到暂存区，然后一起提交commit，可以认为对a.js进行了一个递进的操作，但是是一起commit的。</p>\n</li>\n<li><p>回溯<br>多了一层区域，也给历史回溯增加了更多可能，根据自己的实际情况，选择回溯的位置。</p>\n</li>\n</ul>\n"},{"title":"SSH、SSL 和 HTTPS","date":"2019-09-03T02:56:46.000Z","_content":"\n> 一直对 SSH 、SSL 以及 HTTPS 和它们互相之间的关系都云里雾里的，下面参考网上的文章和自己的理解梳理一下，晕了就再回来看一下，总会记住的。\n\n## 加密算法\n首先先说下加密算法，可以分为两大类，`对称加密` 和 `非对称加密`。\n### 对称加密\n通信双方的数据都是用同一套密钥来进行加密和解密。\n在1976年以前，所有的加密都采用对称加密，这种加密方式最大的问题就是如何管理秘钥？既要保证秘钥不泄露，同时还要保证秘钥的共享性。\n### 非对称加密\n1976年有两位数学家提出的一个新的加密概念：\n1. A生成一对两把密钥（公钥和私钥）。\n2. B获取A生成的公钥，然后用公钥对信息加密。\n3. A收到B的加密信息后，用自己的私钥解密。\n\n非对称加密引入了公钥和私钥的概念。公钥加密，私钥解密。公钥是面向所有使用者公开的。\n目前计算机领域使用最广泛的非对称加密算法是[RSA](https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95)。\n\n对称加密看起来很强大，但是也有缺点：\n\n- 加密更耗时：算法更复杂。\n- 容易受到中间人攻击:即如果有C冒充A利用A的公钥给B发消息，B的所有消息对C其实就是透明的了。\n  \n针对中间人攻击，一般就采用非对称加密+摘要算法+数字签名的机制来确保传输安全。\n### 摘要算法（hash算法）\nHash 算法的特点是单向不可逆。利用这个特性，可以通过hash对目前信息加密生成特定长度且唯一的hash值，该值也不能被逆向破译。因此hash算法进场用在不可还原的密码存储、信息完整性校验等领域。常见的hash算法：MD2，MD4，MD5，SHA等\n\n### 数字签名\n数字签名，是为了保证信息在传输过程中没有被篡改。使用hash算法生成要发送明文的摘要，然后 把明文和摘要都通过私钥加密，加密后的摘要作为`数字签名（digital signature）`跟加密后的内容一起发送给接受者。接受者收到数据信息后，使用公钥分别对内容和信息解密，得到数据和内容摘要，然后用一样的算法对内容生成摘要，比较摘要是否相同来确认信息的完整性。\n\n### 数字证书\n以上的流程还是存在一个问题就是，有人冒充通信人发放公钥。这种场景的出现，我们就需要有个公证人了，告诉我们到底有是真的注册登记过的。这个公证人就是证书中心（certificate authority）简称CA。\n所有想发放公钥的人，都需要去CA为自己的公钥做认证。证书中心会用自己私钥和公钥以及公钥人信息一起进行加密，生成的东西就叫数字证书。以后所有类似的场景，都是统一用CA的公钥解开数字证书，拿到通信用的公钥，然后证明数字签名确实是来自哪里的了。\n\n关于数字签名和数字证书，阮一峰老师的这篇文章讲的特别生动[blog](http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html)\n\n## SSH\nwiki上对SSH的定义:\n>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。\n>传统的网络服务程序，如rsh、FTP、POP和Telnet其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个>人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。\n>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。\n>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。\n\n看了以后显然更晕了，注意一下他是一个`SHELL`, 可以理解为 SSH 服务器之间安全通信的一个协议，既然称之为安全的，想必是通信过程使用了加密手段。\n这时候就用上了我们上一节的知识了，我们现在要在服务器之前就行安全的通信：\n1. A、B之间建立TCP连接\n2. B生成一对公私密钥\n3. B把公钥发送给A\n4. A生成一个用于加密数据的密钥K（既我们想通知给客户端的密钥，之后的数据通信都使用这个密钥加密，这个密钥不可让第三方知道）\n5. A把K用公钥加密发送给B，B解密后，从此A、B之间的通信数据都用K密钥进行加密和解密（转为了安全的对称加密方式）。\n\n这个过程还是会有一样的问题，加入中间有C、D，假冒B发放公钥给A，夹在了A和B之间，不是又不安全了吗。\n为了解决这个问题SSH协议采用由人工判断公钥的fingerprint是否可信的方式：\n```bash\nThe authenticity of host '172.20.7.211 (<no hostip for proxy command>)' can't be established.\nRSA key fingerprint is 23:42:c1:e4:3f:d2:cc:37:1d:89:cb:e7:5d:be:5d:53.\nAre you sure you want to continue connecting (yes/no)? \n```\n输入yes之后才会连接到远程服务器，同时这个信息会存储到用户的.ssh/known_hosts文件中，下次再登录的时候，会检查known_host文件，如果存在相同的公钥信息，就不在提示用户确认了.相当于中间加了一步人工验证，确定下要连接的机器，作为客户端一般也确实是知道自己要连谁的。\n当然这一步也可以手动跳过:\n```bash\nssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\n```\n我们都用过`ssh-keygen` 命令，他就是为我们生成一对密钥（公钥+私钥），用于我们所说的非对称加密过程\n```bash\nssh-keygen -t rsa\n#.ssh/\nid_rsa.pub       //公钥   \nid_rsa           //密钥\n```\n将id_rsa.pub的内容写入authorized_keys文件中，表示该机器目前授权的使用该公钥访问\n```bash\ncat id_rsa.pub >> authorized_keys\n```\n这样就将公钥内容追加到authorized_keys中了，然后需要注意配置权限了，否则SSH不会工作：\n- 将.ssh目录的权限为700\n- 将authorized_keys目录的权限为600\n有个 `ssh-copy-id` 工具很好用,一行命令就可以复制公钥到对应服务器下的 authorized_keys。\n```bash\nssh-copy-id -i username@remote-server\n```\n\n一个完整的SSH客户端认证流程\n一般我们能接触到的的认证方式有两种：\n- 密码认证\n- 密钥认证\n\n密码认证很好理解，就是我们在登录远程linux服务器的时候提供用户名和密码。\n\n每次登录都要输入密码很麻烦，且密码如果简单的话可能还会被暴力破解，而且很多自动化场景要求我们实现免密登录服务器。密钥认证提供了一种更安全便捷的认证客户端的方式。这个技术也用到了非对称加密技术，由客户端生成公私密钥对，然后将公钥保存在服务器上。认证的过程大体如下：\n1. 客户端发起一个公钥的认证请求，并发送RSA Key的模数作为标识符。\n2. 服务端检查是否存在请求帐号的公钥（Linux中存储在~/.ssh/authorized_keys文件中），以及其拥有的访问权限。\n3. 服务端使用对应的公钥对一个随机的256位的字符串进行加密，并发送给客户端\n4. 客户端使用私钥对字符串进行解密，并将其结合session id生成一个MD5值发送给服务端。\n5. 服务端采用同样的方式生成MD5值与客户端返回的MD5值进行比较，完成对客户端的认证。\n\n疑点：这个流程确实是一个完整的非对称加密处理的认证过程，但是实际使用中我发现客户端并没有发送自己的公钥，因为我把客户端的公钥删了，或者只复制私钥到一个新的客户端上，最终还是可以登入authorized_keys中配置了对应公钥的服务器。\n- 所以我猜测客户端发送请求后，服务端这边是把authorized_keys中的锁让客户端的钥匙循环匹配的？能打开其中的一把锁就能登录，但是这样key多的话，建立连接就会有效率问题。\n- 另一个猜测，这个发送的RSA_KEY的模数是通过私钥就能产生的，就是说通过私钥有办法直接得到它对应公钥的标志，所以客户端也就用不着专门保存公钥，也不用直接发送的公钥进行认证。\n目前我也不确定为啥客户端没发送自己的公钥，最后也能登录的真正原因。\n\n## SSL\nTLS（Transport Layer Security：它相当于是SSL协议的一个后续版本，他是SSL经过IETF标准化之后的产物。\n上面wiki上也有写，SSH其实是专门为shell设计的一种通信协议，它垮了两个网络层（传输层和应用层）。通俗点讲就是只有SSH客户端，和SSH服务器端之间的通信才能使用这个协议，其他软件服务无法使用它。但是其实我们非常需要一个通用的，建立在应用层之下的一个传输层安全协议，它的目标是建立一种对上层应用协议透明的，不管是HTTP、FTP、还是电子邮件协议或其他任何应用层协议都可以依赖的底层的可安全通信的传输层协议。SSL（Secure Sockets Layer）协议就是在此背景下诞生的。\n\n对于一个通用的协议来说，类似SSH使用printfinger来防止中间人攻击不一样，互联网上所有的客户端和服务器是不可能自己判断对方是不是可信。这个时候就用到了我们所说的 `数字证书` 的概念，在SSL中引入了一个公证机关，就是我们熟知的 `CA`。有了数字证书，浏览器在建立SSL连接之前，并不只是简单获取服务器的公钥，而从服务器获取数字证书。有了信任机制之后，剩下的交互过程还是我们所熟知的非对称加密过程。\n![](http://www.ruanyifeng.com/blogimg/asset/2014/bg2014092007.png)\n[图解SSL/TLS协议-阮一峰](http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html)\n\n## HTTPS\n上面的概念清晰了以后，理解HTTPS就简单了。HTTPS的全程是 Hypertext Transfer Protocol Secure，就是 运行在 SSL/TLS 之上的 HTTP协议。\n做为网站管理员，可能会遇到申请数字证书的任务，理解了上面的概念，申请数字证书就不那么一头雾水了，首先你要为服务器生成一对公司密钥，然后把你网站的信息连同你的公钥一起发送给某个权威的CA，CA会通过某种方式认证申请人是否真的是网站的所有人，比如让你在网站的指定路径上传他指定的特殊蚊子序列。验证通过就会得到证书了。\n\n\n## 参考文献\n- http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\n- https://zh.wikipedia.org/wiki/RSA加密演算法\n- https://www.jianshu.com/p/5e3f9dfd2cb4\n- https://www.jianshu.com/p/b078282653b3","source":"_posts/sshLogin.md","raw":"---\ntitle: SSH、SSL 和 HTTPS\ndate: 2019-09-03 10:56:46\ncategories: \n- devOps\ntags:\n- SSH\n- SSL\n- Https\n- encrypt\n---\n\n> 一直对 SSH 、SSL 以及 HTTPS 和它们互相之间的关系都云里雾里的，下面参考网上的文章和自己的理解梳理一下，晕了就再回来看一下，总会记住的。\n\n## 加密算法\n首先先说下加密算法，可以分为两大类，`对称加密` 和 `非对称加密`。\n### 对称加密\n通信双方的数据都是用同一套密钥来进行加密和解密。\n在1976年以前，所有的加密都采用对称加密，这种加密方式最大的问题就是如何管理秘钥？既要保证秘钥不泄露，同时还要保证秘钥的共享性。\n### 非对称加密\n1976年有两位数学家提出的一个新的加密概念：\n1. A生成一对两把密钥（公钥和私钥）。\n2. B获取A生成的公钥，然后用公钥对信息加密。\n3. A收到B的加密信息后，用自己的私钥解密。\n\n非对称加密引入了公钥和私钥的概念。公钥加密，私钥解密。公钥是面向所有使用者公开的。\n目前计算机领域使用最广泛的非对称加密算法是[RSA](https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95)。\n\n对称加密看起来很强大，但是也有缺点：\n\n- 加密更耗时：算法更复杂。\n- 容易受到中间人攻击:即如果有C冒充A利用A的公钥给B发消息，B的所有消息对C其实就是透明的了。\n  \n针对中间人攻击，一般就采用非对称加密+摘要算法+数字签名的机制来确保传输安全。\n### 摘要算法（hash算法）\nHash 算法的特点是单向不可逆。利用这个特性，可以通过hash对目前信息加密生成特定长度且唯一的hash值，该值也不能被逆向破译。因此hash算法进场用在不可还原的密码存储、信息完整性校验等领域。常见的hash算法：MD2，MD4，MD5，SHA等\n\n### 数字签名\n数字签名，是为了保证信息在传输过程中没有被篡改。使用hash算法生成要发送明文的摘要，然后 把明文和摘要都通过私钥加密，加密后的摘要作为`数字签名（digital signature）`跟加密后的内容一起发送给接受者。接受者收到数据信息后，使用公钥分别对内容和信息解密，得到数据和内容摘要，然后用一样的算法对内容生成摘要，比较摘要是否相同来确认信息的完整性。\n\n### 数字证书\n以上的流程还是存在一个问题就是，有人冒充通信人发放公钥。这种场景的出现，我们就需要有个公证人了，告诉我们到底有是真的注册登记过的。这个公证人就是证书中心（certificate authority）简称CA。\n所有想发放公钥的人，都需要去CA为自己的公钥做认证。证书中心会用自己私钥和公钥以及公钥人信息一起进行加密，生成的东西就叫数字证书。以后所有类似的场景，都是统一用CA的公钥解开数字证书，拿到通信用的公钥，然后证明数字签名确实是来自哪里的了。\n\n关于数字签名和数字证书，阮一峰老师的这篇文章讲的特别生动[blog](http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html)\n\n## SSH\nwiki上对SSH的定义:\n>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。\n>传统的网络服务程序，如rsh、FTP、POP和Telnet其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个>人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。\n>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。\n>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。\n\n看了以后显然更晕了，注意一下他是一个`SHELL`, 可以理解为 SSH 服务器之间安全通信的一个协议，既然称之为安全的，想必是通信过程使用了加密手段。\n这时候就用上了我们上一节的知识了，我们现在要在服务器之前就行安全的通信：\n1. A、B之间建立TCP连接\n2. B生成一对公私密钥\n3. B把公钥发送给A\n4. A生成一个用于加密数据的密钥K（既我们想通知给客户端的密钥，之后的数据通信都使用这个密钥加密，这个密钥不可让第三方知道）\n5. A把K用公钥加密发送给B，B解密后，从此A、B之间的通信数据都用K密钥进行加密和解密（转为了安全的对称加密方式）。\n\n这个过程还是会有一样的问题，加入中间有C、D，假冒B发放公钥给A，夹在了A和B之间，不是又不安全了吗。\n为了解决这个问题SSH协议采用由人工判断公钥的fingerprint是否可信的方式：\n```bash\nThe authenticity of host '172.20.7.211 (<no hostip for proxy command>)' can't be established.\nRSA key fingerprint is 23:42:c1:e4:3f:d2:cc:37:1d:89:cb:e7:5d:be:5d:53.\nAre you sure you want to continue connecting (yes/no)? \n```\n输入yes之后才会连接到远程服务器，同时这个信息会存储到用户的.ssh/known_hosts文件中，下次再登录的时候，会检查known_host文件，如果存在相同的公钥信息，就不在提示用户确认了.相当于中间加了一步人工验证，确定下要连接的机器，作为客户端一般也确实是知道自己要连谁的。\n当然这一步也可以手动跳过:\n```bash\nssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no\n```\n我们都用过`ssh-keygen` 命令，他就是为我们生成一对密钥（公钥+私钥），用于我们所说的非对称加密过程\n```bash\nssh-keygen -t rsa\n#.ssh/\nid_rsa.pub       //公钥   \nid_rsa           //密钥\n```\n将id_rsa.pub的内容写入authorized_keys文件中，表示该机器目前授权的使用该公钥访问\n```bash\ncat id_rsa.pub >> authorized_keys\n```\n这样就将公钥内容追加到authorized_keys中了，然后需要注意配置权限了，否则SSH不会工作：\n- 将.ssh目录的权限为700\n- 将authorized_keys目录的权限为600\n有个 `ssh-copy-id` 工具很好用,一行命令就可以复制公钥到对应服务器下的 authorized_keys。\n```bash\nssh-copy-id -i username@remote-server\n```\n\n一个完整的SSH客户端认证流程\n一般我们能接触到的的认证方式有两种：\n- 密码认证\n- 密钥认证\n\n密码认证很好理解，就是我们在登录远程linux服务器的时候提供用户名和密码。\n\n每次登录都要输入密码很麻烦，且密码如果简单的话可能还会被暴力破解，而且很多自动化场景要求我们实现免密登录服务器。密钥认证提供了一种更安全便捷的认证客户端的方式。这个技术也用到了非对称加密技术，由客户端生成公私密钥对，然后将公钥保存在服务器上。认证的过程大体如下：\n1. 客户端发起一个公钥的认证请求，并发送RSA Key的模数作为标识符。\n2. 服务端检查是否存在请求帐号的公钥（Linux中存储在~/.ssh/authorized_keys文件中），以及其拥有的访问权限。\n3. 服务端使用对应的公钥对一个随机的256位的字符串进行加密，并发送给客户端\n4. 客户端使用私钥对字符串进行解密，并将其结合session id生成一个MD5值发送给服务端。\n5. 服务端采用同样的方式生成MD5值与客户端返回的MD5值进行比较，完成对客户端的认证。\n\n疑点：这个流程确实是一个完整的非对称加密处理的认证过程，但是实际使用中我发现客户端并没有发送自己的公钥，因为我把客户端的公钥删了，或者只复制私钥到一个新的客户端上，最终还是可以登入authorized_keys中配置了对应公钥的服务器。\n- 所以我猜测客户端发送请求后，服务端这边是把authorized_keys中的锁让客户端的钥匙循环匹配的？能打开其中的一把锁就能登录，但是这样key多的话，建立连接就会有效率问题。\n- 另一个猜测，这个发送的RSA_KEY的模数是通过私钥就能产生的，就是说通过私钥有办法直接得到它对应公钥的标志，所以客户端也就用不着专门保存公钥，也不用直接发送的公钥进行认证。\n目前我也不确定为啥客户端没发送自己的公钥，最后也能登录的真正原因。\n\n## SSL\nTLS（Transport Layer Security：它相当于是SSL协议的一个后续版本，他是SSL经过IETF标准化之后的产物。\n上面wiki上也有写，SSH其实是专门为shell设计的一种通信协议，它垮了两个网络层（传输层和应用层）。通俗点讲就是只有SSH客户端，和SSH服务器端之间的通信才能使用这个协议，其他软件服务无法使用它。但是其实我们非常需要一个通用的，建立在应用层之下的一个传输层安全协议，它的目标是建立一种对上层应用协议透明的，不管是HTTP、FTP、还是电子邮件协议或其他任何应用层协议都可以依赖的底层的可安全通信的传输层协议。SSL（Secure Sockets Layer）协议就是在此背景下诞生的。\n\n对于一个通用的协议来说，类似SSH使用printfinger来防止中间人攻击不一样，互联网上所有的客户端和服务器是不可能自己判断对方是不是可信。这个时候就用到了我们所说的 `数字证书` 的概念，在SSL中引入了一个公证机关，就是我们熟知的 `CA`。有了数字证书，浏览器在建立SSL连接之前，并不只是简单获取服务器的公钥，而从服务器获取数字证书。有了信任机制之后，剩下的交互过程还是我们所熟知的非对称加密过程。\n![](http://www.ruanyifeng.com/blogimg/asset/2014/bg2014092007.png)\n[图解SSL/TLS协议-阮一峰](http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html)\n\n## HTTPS\n上面的概念清晰了以后，理解HTTPS就简单了。HTTPS的全程是 Hypertext Transfer Protocol Secure，就是 运行在 SSL/TLS 之上的 HTTP协议。\n做为网站管理员，可能会遇到申请数字证书的任务，理解了上面的概念，申请数字证书就不那么一头雾水了，首先你要为服务器生成一对公司密钥，然后把你网站的信息连同你的公钥一起发送给某个权威的CA，CA会通过某种方式认证申请人是否真的是网站的所有人，比如让你在网站的指定路径上传他指定的特殊蚊子序列。验证通过就会得到证书了。\n\n\n## 参考文献\n- http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\n- https://zh.wikipedia.org/wiki/RSA加密演算法\n- https://www.jianshu.com/p/5e3f9dfd2cb4\n- https://www.jianshu.com/p/b078282653b3","slug":"sshLogin","published":1,"updated":"2019-09-08T02:27:23.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dml004180oxympv7fag","content":"<blockquote>\n<p>一直对 SSH 、SSL 以及 HTTPS 和它们互相之间的关系都云里雾里的，下面参考网上的文章和自己的理解梳理一下，晕了就再回来看一下，总会记住的。</p>\n</blockquote>\n<h2 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h2><p>首先先说下加密算法，可以分为两大类，<code>对称加密</code> 和 <code>非对称加密</code>。</p>\n<h3 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h3><p>通信双方的数据都是用同一套密钥来进行加密和解密。<br>在1976年以前，所有的加密都采用对称加密，这种加密方式最大的问题就是如何管理秘钥？既要保证秘钥不泄露，同时还要保证秘钥的共享性。</p>\n<h3 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h3><p>1976年有两位数学家提出的一个新的加密概念：</p>\n<ol>\n<li>A生成一对两把密钥（公钥和私钥）。</li>\n<li>B获取A生成的公钥，然后用公钥对信息加密。</li>\n<li>A收到B的加密信息后，用自己的私钥解密。</li>\n</ol>\n<p>非对称加密引入了公钥和私钥的概念。公钥加密，私钥解密。公钥是面向所有使用者公开的。<br>目前计算机领域使用最广泛的非对称加密算法是<a href=\"https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">RSA</a>。</p>\n<p>对称加密看起来很强大，但是也有缺点：</p>\n<ul>\n<li>加密更耗时：算法更复杂。</li>\n<li>容易受到中间人攻击:即如果有C冒充A利用A的公钥给B发消息，B的所有消息对C其实就是透明的了。</li>\n</ul>\n<p>针对中间人攻击，一般就采用非对称加密+摘要算法+数字签名的机制来确保传输安全。</p>\n<h3 id=\"摘要算法（hash算法）\"><a href=\"#摘要算法（hash算法）\" class=\"headerlink\" title=\"摘要算法（hash算法）\"></a>摘要算法（hash算法）</h3><p>Hash 算法的特点是单向不可逆。利用这个特性，可以通过hash对目前信息加密生成特定长度且唯一的hash值，该值也不能被逆向破译。因此hash算法进场用在不可还原的密码存储、信息完整性校验等领域。常见的hash算法：MD2，MD4，MD5，SHA等</p>\n<h3 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h3><p>数字签名，是为了保证信息在传输过程中没有被篡改。使用hash算法生成要发送明文的摘要，然后 把明文和摘要都通过私钥加密，加密后的摘要作为<code>数字签名（digital signature）</code>跟加密后的内容一起发送给接受者。接受者收到数据信息后，使用公钥分别对内容和信息解密，得到数据和内容摘要，然后用一样的算法对内容生成摘要，比较摘要是否相同来确认信息的完整性。</p>\n<h3 id=\"数字证书\"><a href=\"#数字证书\" class=\"headerlink\" title=\"数字证书\"></a>数字证书</h3><p>以上的流程还是存在一个问题就是，有人冒充通信人发放公钥。这种场景的出现，我们就需要有个公证人了，告诉我们到底有是真的注册登记过的。这个公证人就是证书中心（certificate authority）简称CA。<br>所有想发放公钥的人，都需要去CA为自己的公钥做认证。证书中心会用自己私钥和公钥以及公钥人信息一起进行加密，生成的东西就叫数字证书。以后所有类似的场景，都是统一用CA的公钥解开数字证书，拿到通信用的公钥，然后证明数字签名确实是来自哪里的了。</p>\n<p>关于数字签名和数字证书，阮一峰老师的这篇文章讲的特别生动<a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\" target=\"_blank\" rel=\"noopener\">blog</a></p>\n<h2 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h2><p>wiki上对SSH的定义:</p>\n<blockquote>\n<p>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。<br>传统的网络服务程序，如rsh、FTP、POP和Telnet其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个&gt;人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。<br>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。<br>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。</p>\n</blockquote>\n<p>看了以后显然更晕了，注意一下他是一个<code>SHELL</code>, 可以理解为 SSH 服务器之间安全通信的一个协议，既然称之为安全的，想必是通信过程使用了加密手段。<br>这时候就用上了我们上一节的知识了，我们现在要在服务器之前就行安全的通信：</p>\n<ol>\n<li>A、B之间建立TCP连接</li>\n<li>B生成一对公私密钥</li>\n<li>B把公钥发送给A</li>\n<li>A生成一个用于加密数据的密钥K（既我们想通知给客户端的密钥，之后的数据通信都使用这个密钥加密，这个密钥不可让第三方知道）</li>\n<li>A把K用公钥加密发送给B，B解密后，从此A、B之间的通信数据都用K密钥进行加密和解密（转为了安全的对称加密方式）。</li>\n</ol>\n<p>这个过程还是会有一样的问题，加入中间有C、D，假冒B发放公钥给A，夹在了A和B之间，不是又不安全了吗。<br>为了解决这个问题SSH协议采用由人工判断公钥的fingerprint是否可信的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host <span class=\"string\">'172.20.7.211 (&lt;no hostip for proxy command&gt;)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is 23:42:c1:e4:3f:d2:cc:37:1d:89:cb:e7:5d:be:5d:53.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>\n\n<p>输入yes之后才会连接到远程服务器，同时这个信息会存储到用户的.ssh/known_hosts文件中，下次再登录的时候，会检查known_host文件，如果存在相同的公钥信息，就不在提示用户确认了.相当于中间加了一步人工验证，确定下要连接的机器，作为客户端一般也确实是知道自己要连谁的。<br>当然这一步也可以手动跳过:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no</span><br></pre></td></tr></table></figure>\n\n<p>我们都用过<code>ssh-keygen</code> 命令，他就是为我们生成一对密钥（公钥+私钥），用于我们所说的非对称加密过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\"><span class=\"comment\">#.ssh/</span></span><br><span class=\"line\">id_rsa.pub       //公钥   </span><br><span class=\"line\">id_rsa           //密钥</span><br></pre></td></tr></table></figure>\n\n<p>将id_rsa.pub的内容写入authorized_keys文件中，表示该机器目前授权的使用该公钥访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>这样就将公钥内容追加到authorized_keys中了，然后需要注意配置权限了，否则SSH不会工作：</p>\n<ul>\n<li>将.ssh目录的权限为700</li>\n<li>将authorized_keys目录的权限为600<br>有个 <code>ssh-copy-id</code> 工具很好用,一行命令就可以复制公钥到对应服务器下的 authorized_keys。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i username@remote-server</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>一个完整的SSH客户端认证流程<br>一般我们能接触到的的认证方式有两种：</p>\n<ul>\n<li>密码认证</li>\n<li>密钥认证</li>\n</ul>\n<p>密码认证很好理解，就是我们在登录远程linux服务器的时候提供用户名和密码。</p>\n<p>每次登录都要输入密码很麻烦，且密码如果简单的话可能还会被暴力破解，而且很多自动化场景要求我们实现免密登录服务器。密钥认证提供了一种更安全便捷的认证客户端的方式。这个技术也用到了非对称加密技术，由客户端生成公私密钥对，然后将公钥保存在服务器上。认证的过程大体如下：</p>\n<ol>\n<li>客户端发起一个公钥的认证请求，并发送RSA Key的模数作为标识符。</li>\n<li>服务端检查是否存在请求帐号的公钥（Linux中存储在~/.ssh/authorized_keys文件中），以及其拥有的访问权限。</li>\n<li>服务端使用对应的公钥对一个随机的256位的字符串进行加密，并发送给客户端</li>\n<li>客户端使用私钥对字符串进行解密，并将其结合session id生成一个MD5值发送给服务端。</li>\n<li>服务端采用同样的方式生成MD5值与客户端返回的MD5值进行比较，完成对客户端的认证。</li>\n</ol>\n<p>疑点：这个流程确实是一个完整的非对称加密处理的认证过程，但是实际使用中我发现客户端并没有发送自己的公钥，因为我把客户端的公钥删了，或者只复制私钥到一个新的客户端上，最终还是可以登入authorized_keys中配置了对应公钥的服务器。</p>\n<ul>\n<li>所以我猜测客户端发送请求后，服务端这边是把authorized_keys中的锁让客户端的钥匙循环匹配的？能打开其中的一把锁就能登录，但是这样key多的话，建立连接就会有效率问题。</li>\n<li>另一个猜测，这个发送的RSA_KEY的模数是通过私钥就能产生的，就是说通过私钥有办法直接得到它对应公钥的标志，所以客户端也就用不着专门保存公钥，也不用直接发送的公钥进行认证。<br>目前我也不确定为啥客户端没发送自己的公钥，最后也能登录的真正原因。</li>\n</ul>\n<h2 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h2><p>TLS（Transport Layer Security：它相当于是SSL协议的一个后续版本，他是SSL经过IETF标准化之后的产物。<br>上面wiki上也有写，SSH其实是专门为shell设计的一种通信协议，它垮了两个网络层（传输层和应用层）。通俗点讲就是只有SSH客户端，和SSH服务器端之间的通信才能使用这个协议，其他软件服务无法使用它。但是其实我们非常需要一个通用的，建立在应用层之下的一个传输层安全协议，它的目标是建立一种对上层应用协议透明的，不管是HTTP、FTP、还是电子邮件协议或其他任何应用层协议都可以依赖的底层的可安全通信的传输层协议。SSL（Secure Sockets Layer）协议就是在此背景下诞生的。</p>\n<p>对于一个通用的协议来说，类似SSH使用printfinger来防止中间人攻击不一样，互联网上所有的客户端和服务器是不可能自己判断对方是不是可信。这个时候就用到了我们所说的 <code>数字证书</code> 的概念，在SSL中引入了一个公证机关，就是我们熟知的 <code>CA</code>。有了数字证书，浏览器在建立SSL连接之前，并不只是简单获取服务器的公钥，而从服务器获取数字证书。有了信任机制之后，剩下的交互过程还是我们所熟知的非对称加密过程。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014092007.png\" alt><br><a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">图解SSL/TLS协议-阮一峰</a></p>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>上面的概念清晰了以后，理解HTTPS就简单了。HTTPS的全程是 Hypertext Transfer Protocol Secure，就是 运行在 SSL/TLS 之上的 HTTP协议。<br>做为网站管理员，可能会遇到申请数字证书的任务，理解了上面的概念，申请数字证书就不那么一头雾水了，首先你要为服务器生成一对公司密钥，然后把你网站的信息连同你的公钥一起发送给某个权威的CA，CA会通过某种方式认证申请人是否真的是网站的所有人，比如让你在网站的指定路径上传他指定的特殊蚊子序列。验证通过就会得到证书了。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/RSA加密演算法\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/RSA加密演算法</a></li>\n<li><a href=\"https://www.jianshu.com/p/5e3f9dfd2cb4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5e3f9dfd2cb4</a></li>\n<li><a href=\"https://www.jianshu.com/p/b078282653b3\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b078282653b3</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一直对 SSH 、SSL 以及 HTTPS 和它们互相之间的关系都云里雾里的，下面参考网上的文章和自己的理解梳理一下，晕了就再回来看一下，总会记住的。</p>\n</blockquote>\n<h2 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h2><p>首先先说下加密算法，可以分为两大类，<code>对称加密</code> 和 <code>非对称加密</code>。</p>\n<h3 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h3><p>通信双方的数据都是用同一套密钥来进行加密和解密。<br>在1976年以前，所有的加密都采用对称加密，这种加密方式最大的问题就是如何管理秘钥？既要保证秘钥不泄露，同时还要保证秘钥的共享性。</p>\n<h3 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h3><p>1976年有两位数学家提出的一个新的加密概念：</p>\n<ol>\n<li>A生成一对两把密钥（公钥和私钥）。</li>\n<li>B获取A生成的公钥，然后用公钥对信息加密。</li>\n<li>A收到B的加密信息后，用自己的私钥解密。</li>\n</ol>\n<p>非对称加密引入了公钥和私钥的概念。公钥加密，私钥解密。公钥是面向所有使用者公开的。<br>目前计算机领域使用最广泛的非对称加密算法是<a href=\"https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">RSA</a>。</p>\n<p>对称加密看起来很强大，但是也有缺点：</p>\n<ul>\n<li>加密更耗时：算法更复杂。</li>\n<li>容易受到中间人攻击:即如果有C冒充A利用A的公钥给B发消息，B的所有消息对C其实就是透明的了。</li>\n</ul>\n<p>针对中间人攻击，一般就采用非对称加密+摘要算法+数字签名的机制来确保传输安全。</p>\n<h3 id=\"摘要算法（hash算法）\"><a href=\"#摘要算法（hash算法）\" class=\"headerlink\" title=\"摘要算法（hash算法）\"></a>摘要算法（hash算法）</h3><p>Hash 算法的特点是单向不可逆。利用这个特性，可以通过hash对目前信息加密生成特定长度且唯一的hash值，该值也不能被逆向破译。因此hash算法进场用在不可还原的密码存储、信息完整性校验等领域。常见的hash算法：MD2，MD4，MD5，SHA等</p>\n<h3 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h3><p>数字签名，是为了保证信息在传输过程中没有被篡改。使用hash算法生成要发送明文的摘要，然后 把明文和摘要都通过私钥加密，加密后的摘要作为<code>数字签名（digital signature）</code>跟加密后的内容一起发送给接受者。接受者收到数据信息后，使用公钥分别对内容和信息解密，得到数据和内容摘要，然后用一样的算法对内容生成摘要，比较摘要是否相同来确认信息的完整性。</p>\n<h3 id=\"数字证书\"><a href=\"#数字证书\" class=\"headerlink\" title=\"数字证书\"></a>数字证书</h3><p>以上的流程还是存在一个问题就是，有人冒充通信人发放公钥。这种场景的出现，我们就需要有个公证人了，告诉我们到底有是真的注册登记过的。这个公证人就是证书中心（certificate authority）简称CA。<br>所有想发放公钥的人，都需要去CA为自己的公钥做认证。证书中心会用自己私钥和公钥以及公钥人信息一起进行加密，生成的东西就叫数字证书。以后所有类似的场景，都是统一用CA的公钥解开数字证书，拿到通信用的公钥，然后证明数字签名确实是来自哪里的了。</p>\n<p>关于数字签名和数字证书，阮一峰老师的这篇文章讲的特别生动<a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\" target=\"_blank\" rel=\"noopener\">blog</a></p>\n<h2 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h2><p>wiki上对SSH的定义:</p>\n<blockquote>\n<p>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。<br>传统的网络服务程序，如rsh、FTP、POP和Telnet其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个&gt;人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。<br>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。<br>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。</p>\n</blockquote>\n<p>看了以后显然更晕了，注意一下他是一个<code>SHELL</code>, 可以理解为 SSH 服务器之间安全通信的一个协议，既然称之为安全的，想必是通信过程使用了加密手段。<br>这时候就用上了我们上一节的知识了，我们现在要在服务器之前就行安全的通信：</p>\n<ol>\n<li>A、B之间建立TCP连接</li>\n<li>B生成一对公私密钥</li>\n<li>B把公钥发送给A</li>\n<li>A生成一个用于加密数据的密钥K（既我们想通知给客户端的密钥，之后的数据通信都使用这个密钥加密，这个密钥不可让第三方知道）</li>\n<li>A把K用公钥加密发送给B，B解密后，从此A、B之间的通信数据都用K密钥进行加密和解密（转为了安全的对称加密方式）。</li>\n</ol>\n<p>这个过程还是会有一样的问题，加入中间有C、D，假冒B发放公钥给A，夹在了A和B之间，不是又不安全了吗。<br>为了解决这个问题SSH协议采用由人工判断公钥的fingerprint是否可信的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host <span class=\"string\">'172.20.7.211 (&lt;no hostip for proxy command&gt;)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is 23:42:c1:e4:3f:d2:cc:37:1d:89:cb:e7:5d:be:5d:53.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>\n\n<p>输入yes之后才会连接到远程服务器，同时这个信息会存储到用户的.ssh/known_hosts文件中，下次再登录的时候，会检查known_host文件，如果存在相同的公钥信息，就不在提示用户确认了.相当于中间加了一步人工验证，确定下要连接的机器，作为客户端一般也确实是知道自己要连谁的。<br>当然这一步也可以手动跳过:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -o PubkeyAuthentication=yes  -o stricthostkeychecking=no</span><br></pre></td></tr></table></figure>\n\n<p>我们都用过<code>ssh-keygen</code> 命令，他就是为我们生成一对密钥（公钥+私钥），用于我们所说的非对称加密过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\"><span class=\"comment\">#.ssh/</span></span><br><span class=\"line\">id_rsa.pub       //公钥   </span><br><span class=\"line\">id_rsa           //密钥</span><br></pre></td></tr></table></figure>\n\n<p>将id_rsa.pub的内容写入authorized_keys文件中，表示该机器目前授权的使用该公钥访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>这样就将公钥内容追加到authorized_keys中了，然后需要注意配置权限了，否则SSH不会工作：</p>\n<ul>\n<li>将.ssh目录的权限为700</li>\n<li>将authorized_keys目录的权限为600<br>有个 <code>ssh-copy-id</code> 工具很好用,一行命令就可以复制公钥到对应服务器下的 authorized_keys。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i username@remote-server</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>一个完整的SSH客户端认证流程<br>一般我们能接触到的的认证方式有两种：</p>\n<ul>\n<li>密码认证</li>\n<li>密钥认证</li>\n</ul>\n<p>密码认证很好理解，就是我们在登录远程linux服务器的时候提供用户名和密码。</p>\n<p>每次登录都要输入密码很麻烦，且密码如果简单的话可能还会被暴力破解，而且很多自动化场景要求我们实现免密登录服务器。密钥认证提供了一种更安全便捷的认证客户端的方式。这个技术也用到了非对称加密技术，由客户端生成公私密钥对，然后将公钥保存在服务器上。认证的过程大体如下：</p>\n<ol>\n<li>客户端发起一个公钥的认证请求，并发送RSA Key的模数作为标识符。</li>\n<li>服务端检查是否存在请求帐号的公钥（Linux中存储在~/.ssh/authorized_keys文件中），以及其拥有的访问权限。</li>\n<li>服务端使用对应的公钥对一个随机的256位的字符串进行加密，并发送给客户端</li>\n<li>客户端使用私钥对字符串进行解密，并将其结合session id生成一个MD5值发送给服务端。</li>\n<li>服务端采用同样的方式生成MD5值与客户端返回的MD5值进行比较，完成对客户端的认证。</li>\n</ol>\n<p>疑点：这个流程确实是一个完整的非对称加密处理的认证过程，但是实际使用中我发现客户端并没有发送自己的公钥，因为我把客户端的公钥删了，或者只复制私钥到一个新的客户端上，最终还是可以登入authorized_keys中配置了对应公钥的服务器。</p>\n<ul>\n<li>所以我猜测客户端发送请求后，服务端这边是把authorized_keys中的锁让客户端的钥匙循环匹配的？能打开其中的一把锁就能登录，但是这样key多的话，建立连接就会有效率问题。</li>\n<li>另一个猜测，这个发送的RSA_KEY的模数是通过私钥就能产生的，就是说通过私钥有办法直接得到它对应公钥的标志，所以客户端也就用不着专门保存公钥，也不用直接发送的公钥进行认证。<br>目前我也不确定为啥客户端没发送自己的公钥，最后也能登录的真正原因。</li>\n</ul>\n<h2 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h2><p>TLS（Transport Layer Security：它相当于是SSL协议的一个后续版本，他是SSL经过IETF标准化之后的产物。<br>上面wiki上也有写，SSH其实是专门为shell设计的一种通信协议，它垮了两个网络层（传输层和应用层）。通俗点讲就是只有SSH客户端，和SSH服务器端之间的通信才能使用这个协议，其他软件服务无法使用它。但是其实我们非常需要一个通用的，建立在应用层之下的一个传输层安全协议，它的目标是建立一种对上层应用协议透明的，不管是HTTP、FTP、还是电子邮件协议或其他任何应用层协议都可以依赖的底层的可安全通信的传输层协议。SSL（Secure Sockets Layer）协议就是在此背景下诞生的。</p>\n<p>对于一个通用的协议来说，类似SSH使用printfinger来防止中间人攻击不一样，互联网上所有的客户端和服务器是不可能自己判断对方是不是可信。这个时候就用到了我们所说的 <code>数字证书</code> 的概念，在SSL中引入了一个公证机关，就是我们熟知的 <code>CA</code>。有了数字证书，浏览器在建立SSL连接之前，并不只是简单获取服务器的公钥，而从服务器获取数字证书。有了信任机制之后，剩下的交互过程还是我们所熟知的非对称加密过程。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014092007.png\" alt><br><a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">图解SSL/TLS协议-阮一峰</a></p>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>上面的概念清晰了以后，理解HTTPS就简单了。HTTPS的全程是 Hypertext Transfer Protocol Secure，就是 运行在 SSL/TLS 之上的 HTTP协议。<br>做为网站管理员，可能会遇到申请数字证书的任务，理解了上面的概念，申请数字证书就不那么一头雾水了，首先你要为服务器生成一对公司密钥，然后把你网站的信息连同你的公钥一起发送给某个权威的CA，CA会通过某种方式认证申请人是否真的是网站的所有人，比如让你在网站的指定路径上传他指定的特殊蚊子序列。验证通过就会得到证书了。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/RSA加密演算法\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/RSA加密演算法</a></li>\n<li><a href=\"https://www.jianshu.com/p/5e3f9dfd2cb4\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5e3f9dfd2cb4</a></li>\n<li><a href=\"https://www.jianshu.com/p/b078282653b3\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b078282653b3</a></li>\n</ul>\n"},{"title":"关于这个网站","date":"2019-08-30T07:53:09.000Z","_content":"\n## WHAT\n个人生活记录网站。(希望能通过备案)\n希望把所有有意义的东西都记录下来，包括但不限于技术范围。\n个人使用，能帮助到人就更好了。\n\n\n## WHY\n上学时候的 [Blog](http://huguobo.github.io) 用的是 [jekyll](https://jekyllrb.com/)+ [GithubPages](https://pages.github.com/)。\n好久没有更新和维护了, 不是很熟悉 ruby，也不想继续浪费 github 的资源。\n加上发觉自己工作后的积累和沉淀明显不够，开始着手使用基于 [node](https://nodejs.org) 的 [hexo](https://hexo.io/zh-cn/) 和自己的云服务器搭建了这个网站。\n\n## HOW\n富强、民主、文明、和谐、自由、平等、公正、法治、爱国、敬业、诚信、友善。\n合法、合规、合理。\nLOVE AND PEACE。","source":"_posts/新网站.md","raw":"---\ntitle: 关于这个网站\ndate: 2019-08-30 15:53:09\ncategories: \n- daily\ntags: \n- 白话\n---\n\n## WHAT\n个人生活记录网站。(希望能通过备案)\n希望把所有有意义的东西都记录下来，包括但不限于技术范围。\n个人使用，能帮助到人就更好了。\n\n\n## WHY\n上学时候的 [Blog](http://huguobo.github.io) 用的是 [jekyll](https://jekyllrb.com/)+ [GithubPages](https://pages.github.com/)。\n好久没有更新和维护了, 不是很熟悉 ruby，也不想继续浪费 github 的资源。\n加上发觉自己工作后的积累和沉淀明显不够，开始着手使用基于 [node](https://nodejs.org) 的 [hexo](https://hexo.io/zh-cn/) 和自己的云服务器搭建了这个网站。\n\n## HOW\n富强、民主、文明、和谐、自由、平等、公正、法治、爱国、敬业、诚信、友善。\n合法、合规、合理。\nLOVE AND PEACE。","slug":"新网站","published":1,"updated":"2019-09-02T01:37:30.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckemh0dmn004380ox0o674n4x","content":"<h2 id=\"WHAT\"><a href=\"#WHAT\" class=\"headerlink\" title=\"WHAT\"></a>WHAT</h2><p>个人生活记录网站。(希望能通过备案)<br>希望把所有有意义的东西都记录下来，包括但不限于技术范围。<br>个人使用，能帮助到人就更好了。</p>\n<h2 id=\"WHY\"><a href=\"#WHY\" class=\"headerlink\" title=\"WHY\"></a>WHY</h2><p>上学时候的 <a href=\"http://huguobo.github.io\" target=\"_blank\" rel=\"noopener\">Blog</a> 用的是 <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">jekyll</a>+ <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GithubPages</a>。<br>好久没有更新和维护了, 不是很熟悉 ruby，也不想继续浪费 github 的资源。<br>加上发觉自己工作后的积累和沉淀明显不够，开始着手使用基于 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">node</a> 的 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a> 和自己的云服务器搭建了这个网站。</p>\n<h2 id=\"HOW\"><a href=\"#HOW\" class=\"headerlink\" title=\"HOW\"></a>HOW</h2><p>富强、民主、文明、和谐、自由、平等、公正、法治、爱国、敬业、诚信、友善。<br>合法、合规、合理。<br>LOVE AND PEACE。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"WHAT\"><a href=\"#WHAT\" class=\"headerlink\" title=\"WHAT\"></a>WHAT</h2><p>个人生活记录网站。(希望能通过备案)<br>希望把所有有意义的东西都记录下来，包括但不限于技术范围。<br>个人使用，能帮助到人就更好了。</p>\n<h2 id=\"WHY\"><a href=\"#WHY\" class=\"headerlink\" title=\"WHY\"></a>WHY</h2><p>上学时候的 <a href=\"http://huguobo.github.io\" target=\"_blank\" rel=\"noopener\">Blog</a> 用的是 <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">jekyll</a>+ <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GithubPages</a>。<br>好久没有更新和维护了, 不是很熟悉 ruby，也不想继续浪费 github 的资源。<br>加上发觉自己工作后的积累和沉淀明显不够，开始着手使用基于 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">node</a> 的 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a> 和自己的云服务器搭建了这个网站。</p>\n<h2 id=\"HOW\"><a href=\"#HOW\" class=\"headerlink\" title=\"HOW\"></a>HOW</h2><p>富强、民主、文明、和谐、自由、平等、公正、法治、爱国、敬业、诚信、友善。<br>合法、合规、合理。<br>LOVE AND PEACE。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckemh0dkh000080oxck1krcuz","category_id":"ckemh0dko000280oxw1fqa3d3","_id":"ckemh0dl0000c80ox8b60bnuy"},{"post_id":"ckemh0dkl000180ox3227jai3","category_id":"ckemh0dko000280oxw1fqa3d3","_id":"ckemh0dl4000h80oxs4lewv2l"},{"post_id":"ckemh0dkr000480ox2s29zkz8","category_id":"ckemh0dkz000b80ox2lurn1nv","_id":"ckemh0dl8000n80oxcur80n2t"},{"post_id":"ckemh0dks000580ox59v3rao8","category_id":"ckemh0dl5000j80oxboaf5ksf","_id":"ckemh0dlb000t80oxn4b6yp3b"},{"post_id":"ckemh0dkt000680oxr5a00ftx","category_id":"ckemh0dl8000o80oxxfrdh0iu","_id":"ckemh0dlf000z80ox2oo4687p"},{"post_id":"ckemh0dkx000980ox5twodnlu","category_id":"ckemh0dlc000v80oxicwxi24x","_id":"ckemh0dli001480oxjq9n520d"},{"post_id":"ckemh0dky000a80oxxx9gr3g9","category_id":"ckemh0dl8000o80oxxfrdh0iu","_id":"ckemh0dli001680oxfnqtjb7q"},{"post_id":"ckemh0dl0000e80oxf0dow7q1","category_id":"ckemh0dlh001380oxwbafuv9o","_id":"ckemh0dlj001a80oxm837yy35"},{"post_id":"ckemh0dl2000g80oxoxbdjm6d","category_id":"ckemh0dl8000o80oxxfrdh0iu","_id":"ckemh0dlj001c80oxcg4a6mkr"},{"post_id":"ckemh0dl6000l80oxefq5r0dx","category_id":"ckemh0dlj001980oxb0kw7l7a","_id":"ckemh0dll001h80oxx5iistlg"},{"post_id":"ckemh0dl7000m80oxc8ijgmoh","category_id":"ckemh0dlc000v80oxicwxi24x","_id":"ckemh0dlm001m80oxy6q5jovs"},{"post_id":"ckemh0dl9000q80ox8lmxtng8","category_id":"ckemh0dlc000v80oxicwxi24x","_id":"ckemh0dln001q80oxopk6q415"},{"post_id":"ckemh0dla000s80oxfnucn4gd","category_id":"ckemh0dlm001l80oxsm8u1hpa","_id":"ckemh0dlo001w80ox98u44cwf"},{"post_id":"ckemh0dlc000w80ox73ah2vh3","category_id":"ckemh0dlh001380oxwbafuv9o","_id":"ckemh0dlp001z80oxp7q7c0od"},{"post_id":"ckemh0dle000y80oxlohy5m1p","category_id":"ckemh0dlo001v80ox03alwfdd","_id":"ckemh0dlp002280oxx8lvlx0q"},{"post_id":"ckemh0dlf001080oxq9e5diap","category_id":"ckemh0dlp002080oxw0fiytql","_id":"ckemh0dlw002980oxshnhwbhv"},{"post_id":"ckemh0dlf001080oxq9e5diap","category_id":"ckemh0dlv002580ox1q4rypsa","_id":"ckemh0dlw002b80oxxwirj1dl"},{"post_id":"ckemh0dmh003w80oxdwzwbfav","category_id":"ckemh0dko000280oxw1fqa3d3","_id":"ckemh0dmo004480ox8v9ljerr"},{"post_id":"ckemh0dml004180oxympv7fag","category_id":"ckemh0dlh001380oxwbafuv9o","_id":"ckemh0dmq004780oxccyafdez"},{"post_id":"ckemh0dmn004380ox0o674n4x","category_id":"ckemh0dko000280oxw1fqa3d3","_id":"ckemh0dmq004980oxd11ikjuv"},{"post_id":"ckemh0dmj003y80oxmtvyou0n","category_id":"ckemh0dmn004280oxym9n5l0a","_id":"ckemh0dmr004c80oxm3hafj76"}],"PostTag":[{"post_id":"ckemh0dkh000080oxck1krcuz","tag_id":"ckemh0dkq000380oxac5xxq36","_id":"ckemh0dl2000f80oxto39fjol"},{"post_id":"ckemh0dkh000080oxck1krcuz","tag_id":"ckemh0dku000880oxcuqjj3xk","_id":"ckemh0dl4000i80oxb4ea1k7t"},{"post_id":"ckemh0dkl000180ox3227jai3","tag_id":"ckemh0dl0000d80oxct5rddgl","_id":"ckemh0dla000r80oxp0y7hx3e"},{"post_id":"ckemh0dkl000180ox3227jai3","tag_id":"ckemh0dl5000k80oxzgro9jq8","_id":"ckemh0dlb000u80oxxwxqfann"},{"post_id":"ckemh0dkr000480ox2s29zkz8","tag_id":"ckemh0dl9000p80oxnvit354o","_id":"ckemh0dll001f80oxyw9d5kwe"},{"post_id":"ckemh0dkr000480ox2s29zkz8","tag_id":"ckemh0dld000x80ox5ysbn9d9","_id":"ckemh0dll001i80oxe4ksi322"},{"post_id":"ckemh0dkr000480ox2s29zkz8","tag_id":"ckemh0dlh001280oxcznc7cgo","_id":"ckemh0dlm001k80oxnbhyolqb"},{"post_id":"ckemh0dkr000480ox2s29zkz8","tag_id":"ckemh0dli001580oxjxabaori","_id":"ckemh0dlm001n80ox7yf5zduv"},{"post_id":"ckemh0dkr000480ox2s29zkz8","tag_id":"ckemh0dli001880oxuq7kzxj2","_id":"ckemh0dln001p80oxra0mcjk9"},{"post_id":"ckemh0dkr000480ox2s29zkz8","tag_id":"ckemh0dlj001b80oxemyum2q7","_id":"ckemh0dln001s80oxxukj6yhf"},{"post_id":"ckemh0dks000580ox59v3rao8","tag_id":"ckemh0dlk001e80ox0aiogher","_id":"ckemh0dlo001u80oxh4mk45ue"},{"post_id":"ckemh0dks000580ox59v3rao8","tag_id":"ckemh0dlj001b80oxemyum2q7","_id":"ckemh0dlo001x80ox0zqk7vg0"},{"post_id":"ckemh0dkt000680oxr5a00ftx","tag_id":"ckemh0dlm001o80oxj09inlz1","_id":"ckemh0dlp002380oxngf9i0l0"},{"post_id":"ckemh0dkt000680oxr5a00ftx","tag_id":"ckemh0dln001t80ox4xvcxv63","_id":"ckemh0dlq002480oxsp0943ui"},{"post_id":"ckemh0dkt000680oxr5a00ftx","tag_id":"ckemh0dlo001y80ox8g38mdbb","_id":"ckemh0dlv002780oxwneu6c7d"},{"post_id":"ckemh0dkx000980ox5twodnlu","tag_id":"ckemh0dlp002180oxnruefu6q","_id":"ckemh0dlw002c80oxokyt3rq5"},{"post_id":"ckemh0dkx000980ox5twodnlu","tag_id":"ckemh0dlv002680oxho91k9cb","_id":"ckemh0dlw002d80oxq95b6si8"},{"post_id":"ckemh0dkx000980ox5twodnlu","tag_id":"ckemh0dlv002880oxnhrwq8kh","_id":"ckemh0dlx002f80oxcmn6lpnr"},{"post_id":"ckemh0dky000a80oxxx9gr3g9","tag_id":"ckemh0dlm001o80oxj09inlz1","_id":"ckemh0dlx002h80ox1alxg5ft"},{"post_id":"ckemh0dky000a80oxxx9gr3g9","tag_id":"ckemh0dlw002e80oxwvqswdms","_id":"ckemh0dlx002i80oxpxnkjl90"},{"post_id":"ckemh0dl0000e80oxf0dow7q1","tag_id":"ckemh0dlx002g80oxl2gx2f0m","_id":"ckemh0dly002n80ox1nl35xoo"},{"post_id":"ckemh0dl0000e80oxf0dow7q1","tag_id":"ckemh0dlx002j80oxn83y8p5e","_id":"ckemh0dly002o80ox1gqjrjf2"},{"post_id":"ckemh0dl0000e80oxf0dow7q1","tag_id":"ckemh0dly002k80oxfqmu9nu9","_id":"ckemh0dlz002q80oxeqfd8yw2"},{"post_id":"ckemh0dl0000e80oxf0dow7q1","tag_id":"ckemh0dly002l80oxj5u8bp65","_id":"ckemh0dlz002r80ox3lt74std"},{"post_id":"ckemh0dl2000g80oxoxbdjm6d","tag_id":"ckemh0dlm001o80oxj09inlz1","_id":"ckemh0dlz002t80oxd4t9edth"},{"post_id":"ckemh0dl2000g80oxoxbdjm6d","tag_id":"ckemh0dly002p80oxpxhoyv0x","_id":"ckemh0dlz002u80ox4u7s0mg5"},{"post_id":"ckemh0dl6000l80oxefq5r0dx","tag_id":"ckemh0dlz002s80oxsb9mx6hf","_id":"ckemh0dm1002y80ox694h0zow"},{"post_id":"ckemh0dl6000l80oxefq5r0dx","tag_id":"ckemh0dlz002v80ox6y38b5te","_id":"ckemh0dm1002z80oxwhy2u0zf"},{"post_id":"ckemh0dl6000l80oxefq5r0dx","tag_id":"ckemh0dlj001b80oxemyum2q7","_id":"ckemh0dm1003180ox4gyn523t"},{"post_id":"ckemh0dl7000m80oxc8ijgmoh","tag_id":"ckemh0dm0002x80ox058ftx9r","_id":"ckemh0dm2003480oxeuzkr5q3"},{"post_id":"ckemh0dl7000m80oxc8ijgmoh","tag_id":"ckemh0dm1003080oxpnek0kmw","_id":"ckemh0dm2003580ox1o237xu1"},{"post_id":"ckemh0dl7000m80oxc8ijgmoh","tag_id":"ckemh0dm1003280ox11omjlzt","_id":"ckemh0dm2003780oxmbld17ej"},{"post_id":"ckemh0dl9000q80ox8lmxtng8","tag_id":"ckemh0dm1003080oxpnek0kmw","_id":"ckemh0dm4003a80oxh4t1gdw6"},{"post_id":"ckemh0dl9000q80ox8lmxtng8","tag_id":"ckemh0dm2003680oxysrtt9l6","_id":"ckemh0dm4003b80oxhj7a4xfn"},{"post_id":"ckemh0dl9000q80ox8lmxtng8","tag_id":"ckemh0dm3003880oxldrhqn5f","_id":"ckemh0dm4003d80oxlgtl5v4e"},{"post_id":"ckemh0dla000s80oxfnucn4gd","tag_id":"ckemh0dm4003980oxiwycrc74","_id":"ckemh0dm4003e80oxljubwwyp"},{"post_id":"ckemh0dlc000w80ox73ah2vh3","tag_id":"ckemh0dm4003c80oxbofxbewa","_id":"ckemh0dm5003i80oxpdom1zkp"},{"post_id":"ckemh0dlc000w80ox73ah2vh3","tag_id":"ckemh0dm5003f80oxzs72z9by","_id":"ckemh0dm6003j80ox7xvj88tp"},{"post_id":"ckemh0dlc000w80ox73ah2vh3","tag_id":"ckemh0dm5003g80oxk54c8p8v","_id":"ckemh0dm6003l80oxnuiuynkq"},{"post_id":"ckemh0dle000y80oxlohy5m1p","tag_id":"ckemh0dm5003h80ox1095xygy","_id":"ckemh0dm7003o80oxccpsq7hi"},{"post_id":"ckemh0dle000y80oxlohy5m1p","tag_id":"ckemh0dm6003k80ox393inu9a","_id":"ckemh0dm7003p80ox5dprukru"},{"post_id":"ckemh0dle000y80oxlohy5m1p","tag_id":"ckemh0dm6003m80oxi2wm1cu2","_id":"ckemh0dm7003r80ox08zkaq8a"},{"post_id":"ckemh0dlf001080oxq9e5diap","tag_id":"ckemh0dm6003n80ox8g80l8lv","_id":"ckemh0dm7003t80oxe9hfefdh"},{"post_id":"ckemh0dlf001080oxq9e5diap","tag_id":"ckemh0dm7003q80oxbc72sil2","_id":"ckemh0dm8003u80oxit8zjvic"},{"post_id":"ckemh0dlf001080oxq9e5diap","tag_id":"ckemh0dm7003s80oxh64nlnvq","_id":"ckemh0dm8003v80oxpmuudfad"},{"post_id":"ckemh0dmn004380ox0o674n4x","tag_id":"ckemh0dml004080ox69esl83n","_id":"ckemh0dmp004680oxciqx4por"},{"post_id":"ckemh0dmh003w80oxdwzwbfav","tag_id":"ckemh0dkq000380oxac5xxq36","_id":"ckemh0dmq004880ox7psyarfz"},{"post_id":"ckemh0dmh003w80oxdwzwbfav","tag_id":"ckemh0dml004080ox69esl83n","_id":"ckemh0dmr004b80oxx8pe8cvk"},{"post_id":"ckemh0dmj003y80oxmtvyou0n","tag_id":"ckemh0dmo004580oxbsemi8nv","_id":"ckemh0dms004f80oxhl07rwn4"},{"post_id":"ckemh0dmj003y80oxmtvyou0n","tag_id":"ckemh0dmq004a80oxj4t58407","_id":"ckemh0dms004g80ox7p7p3y10"},{"post_id":"ckemh0dmj003y80oxmtvyou0n","tag_id":"ckemh0dmr004d80ox5v6lxrf8","_id":"ckemh0dmt004i80oxpcimbi67"},{"post_id":"ckemh0dmj003y80oxmtvyou0n","tag_id":"ckemh0dlj001b80oxemyum2q7","_id":"ckemh0dmt004j80ox8yical67"},{"post_id":"ckemh0dml004180oxympv7fag","tag_id":"ckemh0dms004e80ox0bs8y13g","_id":"ckemh0dmu004l80oxdn4ovhkn"},{"post_id":"ckemh0dml004180oxympv7fag","tag_id":"ckemh0dms004h80oxrb0v546w","_id":"ckemh0dmu004m80oxfilzzv6v"},{"post_id":"ckemh0dml004180oxympv7fag","tag_id":"ckemh0dm5003g80oxk54c8p8v","_id":"ckemh0dmu004n80oxl9vy49dw"},{"post_id":"ckemh0dml004180oxympv7fag","tag_id":"ckemh0dmt004k80ox4l4hq5ss","_id":"ckemh0dmu004o80oxpc1wotfc"}],"Tag":[{"name":"日常","_id":"ckemh0dkq000380oxac5xxq36"},{"name":"思考","_id":"ckemh0dku000880oxcuqjj3xk"},{"name":"HHKB","_id":"ckemh0dl0000d80oxct5rddgl"},{"name":"keyboard","_id":"ckemh0dl5000k80oxzgro9jq8"},{"name":"cache","_id":"ckemh0dl9000p80oxnvit354o"},{"name":"expires","_id":"ckemh0dld000x80ox5ysbn9d9"},{"name":"cache-control","_id":"ckemh0dlh001280oxcznc7cgo"},{"name":"last-modified","_id":"ckemh0dli001580oxjxabaori"},{"name":"etag","_id":"ckemh0dli001880oxuq7kzxj2"},{"name":"不懂就问","_id":"ckemh0dlj001b80oxemyum2q7"},{"name":"javascript","_id":"ckemh0dlk001e80ox0aiogher"},{"name":"日语","_id":"ckemh0dlm001o80oxj09inlz1"},{"name":"浊音","_id":"ckemh0dln001t80ox4xvcxv63"},{"name":"半浊音","_id":"ckemh0dlo001y80ox8g38mdbb"},{"name":"scorllTop","_id":"ckemh0dlp002180oxnruefu6q"},{"name":"height","_id":"ckemh0dlv002680oxho91k9cb"},{"name":"width","_id":"ckemh0dlv002880oxnhrwq8kh"},{"name":"数字","_id":"ckemh0dlw002e80oxwvqswdms"},{"name":"travis","_id":"ckemh0dlx002g80oxl2gx2f0m"},{"name":"CI","_id":"ckemh0dlx002j80oxn83y8p5e"},{"name":"hexo","_id":"ckemh0dly002k80oxfqmu9nu9"},{"name":"gem","_id":"ckemh0dly002l80oxj5u8bp65"},{"name":"状态","_id":"ckemh0dly002p80oxpxhoyv0x"},{"name":"Canvas","_id":"ckemh0dlz002s80oxsb9mx6hf"},{"name":"WebGL","_id":"ckemh0dlz002v80ox6y38b5te"},{"name":"JavaScript","_id":"ckemh0dm0002x80ox058ftx9r"},{"name":"JS","_id":"ckemh0dm1003080oxpnek0kmw"},{"name":"正则","_id":"ckemh0dm1003280ox11omjlzt"},{"name":"File","_id":"ckemh0dm2003680oxysrtt9l6"},{"name":"HTML5","_id":"ckemh0dm3003880oxldrhqn5f"},{"name":"NODE","_id":"ckemh0dm4003980oxiwycrc74"},{"name":"nginx","_id":"ckemh0dm4003c80oxbofxbewa"},{"name":"ssl","_id":"ckemh0dm5003f80oxzs72z9by"},{"name":"Https","_id":"ckemh0dm5003g80oxk54c8p8v"},{"name":"thread","_id":"ckemh0dm5003h80ox1095xygy"},{"name":"linux","_id":"ckemh0dm6003k80ox393inu9a"},{"name":"OS","_id":"ckemh0dm6003m80oxi2wm1cu2"},{"name":"useEffect","_id":"ckemh0dm6003n80ox8g80l8lv"},{"name":"capturing","_id":"ckemh0dm7003q80oxbc72sil2"},{"name":"react-hooks","_id":"ckemh0dm7003s80oxh64nlnvq"},{"name":"白话","_id":"ckemh0dml004080ox69esl83n"},{"name":"暂存区","_id":"ckemh0dmo004580oxbsemi8nv"},{"name":"git add","_id":"ckemh0dmq004a80oxj4t58407"},{"name":"git commit","_id":"ckemh0dmr004d80ox5v6lxrf8"},{"name":"SSH","_id":"ckemh0dms004e80ox0bs8y13g"},{"name":"SSL","_id":"ckemh0dms004h80oxrb0v546w"},{"name":"encrypt","_id":"ckemh0dmt004k80ox4l4hq5ss"}]}}